!function(g){var e,t,n,i,s,l,o;!function(_){var o,l,p,m,g={},f={},b={},v={},i=Object.prototype.hasOwnProperty,s=[].slice,w=/\.js$/;function y(e,t){return i.call(e,t)}function a(e,t){var i,s,n,o,l,a,r,c,d,u,h,_=t&&t.split("/"),p=b.map,m=p&&p["*"]||{};if(e){for(l=(e=e.split("/")).length-1,b.nodeIdCompat&&w.test(e[l])&&(e[l]=e[l].replace(w,"")),"."===e[0].charAt(0)&&_&&(e=_.slice(0,_.length-1).concat(e)),d=0;d<e.length;d++)if("."===(h=e[d]))e.splice(d,1),d-=1;else if(".."===h){if(0===d||1===d&&".."===e[2]||".."===e[d-1])continue;0<d&&(e.splice(d-1,2),d-=2)}e=e.join("/")}if((_||m)&&p){for(d=(i=e.split("/")).length;0<d;d-=1){if(s=i.slice(0,d).join("/"),_)for(u=_.length;0<u;u-=1)if((n=p[_.slice(0,u).join("/")])&&(n=n[s])){o=n,a=d;break}if(o)break;!r&&m&&m[s]&&(r=m[s],c=d)}!o&&r&&(o=r,a=c),o&&(i.splice(0,a,o),e=i.join("/"))}return e}function k(t,i){return function(){var e=s.call(arguments,0);return"string"!=typeof e[0]&&1===e.length&&e.push(null),l.apply(_,e.concat([t,i]))}}function S(t){return function(e){g[t]=e}}function C(e){if(y(f,e)){var t=f[e];delete f[e],v[e]=!0,o.apply(_,t)}if(!y(g,e)&&!y(v,e))throw new Error("No "+e);return g[e]}function r(e){var t,i=e?e.indexOf("!"):-1;return-1<i&&(t=e.substring(0,i),e=e.substring(i+1,e.length)),[t,e]}function M(e){return e?r(e):[]}p=function(e,t){var i,s,n=r(e),o=n[0],l=t[1];return e=n[1],o&&(i=C(o=a(o,l))),o?e=i&&i.normalize?i.normalize(e,(s=l,function(e){return a(e,s)})):a(e,l):(o=(n=r(e=a(e,l)))[0],e=n[1],o&&(i=C(o))),{f:o?o+"!"+e:e,n:e,pr:o,p:i}},m={require:function(e){return k(e)},exports:function(e){var t=g[e];return void 0!==t?t:g[e]={}},module:function(e){return{id:e,uri:"",exports:g[e],config:(t=e,function(){return b&&b.config&&b.config[t]||{}})};var t}},o=function(e,t,i,s){var n,o,l,a,r,c,d,u=[],h=typeof i;if(c=M(s=s||e),"undefined"===h||"function"===h){for(t=!t.length&&i.length?["require","exports","module"]:t,r=0;r<t.length;r+=1)if("require"===(o=(a=p(t[r],c)).f))u[r]=m.require(e);else if("exports"===o)u[r]=m.exports(e),d=!0;else if("module"===o)n=u[r]=m.module(e);else if(y(g,o)||y(f,o)||y(v,o))u[r]=C(o);else{if(!a.p)throw new Error(e+" missing "+o);a.p.load(a.n,k(s,!0),S(o),{}),u[r]=g[o]}l=i?i.apply(g[e],u):void 0,e&&(n&&n.exports!==_&&n.exports!==g[e]?g[e]=n.exports:l===_&&d||(g[e]=l))}else e&&(g[e]=i)},e=t=l=function(e,t,i,s,n){if("string"==typeof e)return m[e]?m[e](t):C(p(e,M(t)).f);if(!e.splice){if((b=e).deps&&l(b.deps,b.callback),!t)return;t.splice?(e=t,t=i,i=null):e=_}return t=t||function(){},"function"==typeof i&&(i=s,s=n),s?o(_,e,t,i):setTimeout(function(){o(_,e,t,i)},4),l},l.config=function(e){return l(e)},e._defined=g,(n=function(e,t,i){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(i=t,t=[]),y(g,e)||y(f,e)||(f[e]=[e,t,i])}).amd={jQuery:!0}}(),n("vendor/almond",function(){}),n("underscore",[],function(){return _}),n("backbone",[],function(){return Backbone}),n("jquery",[],function(){return jQuery}),i=this,s=function(h,t,r){var i=t.View,c="model",a=["collection","modelView","modelViewOptions","itemTemplate","itemTemplateFunction","detachedRendering"],s={background:"transparent",border:"none","box-shadow":"none"};function n(e){var n={};if(!h.isArray(e))throw new Error("Option declarations must be an array.");return h.each(e,function(e){var t,i,s;if(i=!1,s=void 0,h.isString(e))t=e;else{if(!h.isObject(e))throw new Error("Each element in the option declarations array must be either a string or an object.");t=h.first(h.keys(e)),s=h.isFunction(e[t])?e[t]:h.clone(e[t])}"!"===t[t.length-1]&&(i=!0,t=t.slice(0,t.length-1)),n[t]=n[t]||{},n[t].required=i,h.isUndefined(s)||(n[t].defaultValue=s)}),n}return t.CollectionView=t.View.extend({tagName:"ul",events:{"mousedown > li, tbody > tr > td":"_listItem_onMousedown","dblclick > li, tbody > tr > td":"_listItem_onDoubleClick",click:"_listBackground_onClick","click ul.collection-view, table.collection-view":"_listBackground_onClick",keydown:"_onKeydown"},spawnMessages:{focus:"focus"},passMessages:{"*":"."},initializationOptions:[{collection:null},{modelView:null},{modelViewOptions:{}},{itemTemplate:null},{itemTemplateFunction:null},{selectable:!0},{clickToSelect:!0},{selectableModelsFilter:null},{visibleModelsFilter:null},{sortableModelsFilter:null},{selectMultiple:!1},{clickToToggle:!1},{processKeyEvents:!0},{sortable:!1},{sortableOptions:null},{reuseModelViews:!0},{detachedRendering:!1},{emptyListCaption:null}],initialize:function(e){t.ViewOptions.add(this,"initializationOptions"),this.setOptions(e),this.collection||(this.collection=new t.Collection),this._hasBeenRendered=!1,this._isBackboneCourierAvailable()&&t.Courier.add(this),this.$el.data("view",this),this.$el.addClass("collection-view collection-list"),this.selectable&&this.$el.addClass("selectable"),this.selectable&&this.processKeyEvents&&this.$el.attr("tabindex",0),this.selectedItems=[],this._updateItemTemplate(),this.collection&&this._registerCollectionEvents(),this.viewManager=new ChildViewContainer},_onOptionsChanged:function(s,n){var o=this,l=!1;h.each(h.keys(s),function(e){var t=s[e],i=n[e];switch(e){case"collection":t!==i&&(o.stopListening(i),o._registerCollectionEvents());break;case"selectMultiple":!t&&1<o.selectedItems.length&&o.setSelectedModel(h.first(o.selectedItems),{by:"cid"});break;case"selectable":!t&&0<o.selectedItems.length&&o.setSelectedModels([]),t&&this.processKeyEvents?o.$el.attr("tabindex",0):o.$el.removeAttr("tabindex",0);break;case"sortable":s.sortable?o._setupSortable():o.$el.sortable("destroy");break;case"selectableModelsFilter":o.reapplyFilter("selectableModels");break;case"sortableOptions":o.$el.sortable("destroy"),o._setupSortable();break;case"sortableModelsFilter":o.reapplyFilter("sortableModels");break;case"visibleModelsFilter":o.reapplyFilter("visibleModels");break;case"itemTemplate":o._updateItemTemplate();break;case"processKeyEvents":t&&this.selectable?o.$el.attr("tabindex",0):o.$el.removeAttr("tabindex",0);break;case"modelView":o.viewManager.each(function(e){o.viewManager.remove(e),e.remove()})}h.contains(a,e)&&(l=!0)}),this._hasBeenRendered&&l&&this.render()},setOption:function(e,t){var i={};i[e]=t,this.setOptions(i)},getSelectedModel:function(e){return this.selectedItems.length?h.first(this.getSelectedModels(e)):null},getSelectedModels:function(e){var t=this,i=(e=h.extend({},{by:c},e)).by,s=[];switch(i){case"id":h.each(this.selectedItems,function(e){s.push(t.collection.get(e).id)});break;case"cid":s=s.concat(this.selectedItems);break;case"offset":var n=0;this._getVisibleItemEls().each(function(){r(this).is(".selected")&&s.push(n),n++});break;case"model":h.each(this.selectedItems,function(e){s.push(t.collection.get(e))});break;case"view":h.each(this.selectedItems,function(e){s.push(t.viewManager.findByModel(t.collection.get(e)))});break;default:throw new Error("Invalid referenceBy option: "+i)}return s},setSelectedModels:function(t,e){if(!h.isArray(t))throw"Invalid parameter value";if(this.selectable||!(0<t.length)){var i=(e=h.extend({},{silent:!1,by:c},e)).by,s=[];switch(i){case"cid":s=t;break;case"id":this.collection.each(function(e){h.contains(t,e.id)&&s.push(e.cid)});break;case"model":s=h.pluck(t,"cid");break;case"view":h.each(t,function(e){s.push(e.model.cid)});break;case"offset":var n=0;this._getVisibleItemEls().each(function(){var e=r(this);h.contains(t,n)&&s.push(e.attr("data-model-cid")),n++});break;default:throw new Error("Invalid referenceBy option: "+i)}var o=this.getSelectedModels(),l=h.clone(this.selectedItems);this.selectedItems=this._convertStringsToInts(s),this._validateSelection();var a=this.getSelectedModels();this._containSameElements(l,this.selectedItems)||(this._addSelectedClassToSelectedItems(l),e.silent||(this._isBackboneCourierAvailable()?this.spawn("selectionChanged",{selectedModels:a,oldSelectedModels:o}):this.trigger("selectionChanged",a,o)),this.updateDependentControls())}},setSelectedModel:function(e,t){e||0===e?this.setSelectedModels([e],t):this.setSelectedModels([],t)},getView:function(e,t){switch((t=h.extend({},{by:c},t)).by){case"id":case"cid":var i=this.collection.get(e)||null;return i&&this.viewManager.findByModel(i);case"offset":var s=this._getVisibleItemEls();return r(s.get(e));case"model":return this.viewManager.findByModel(e);default:throw new Error("Invalid referenceBy option: "+referenceBy)}},render:function(){var i;this._hasBeenRendered=!0,this.selectable&&this._saveSelection(),i=this._getContainerEl();var s,n=this.viewManager;this.viewManager=new ChildViewContainer,n.each(function(e){this.reuseModelViews&&this.collection.get(e.model.cid)?e.$el.detach():e.remove()},this),i.empty(),this.detachedRendering&&(s=document.createDocumentFragment()),this.collection.each(function(e){var t=n.findByModelCid(e.cid);this.reuseModelViews&&!h.isUndefined(t)||(t=this._createNewModelView(e,this._getModelViewOptions(e))),this._insertAndRenderModelView(t,s||i)},this),this.detachedRendering&&i.append(s),this.sortable&&this._setupSortable(),this._showEmptyListCaptionIfAppropriate(),this._isBackboneCourierAvailable()?this.spawn("render"):this.trigger("render"),this.selectable&&(this._restoreSelection(),this.updateDependentControls()),this.forceRerenderOnNextSortEvent=!1},_showEmptyListCaptionIfAppropriate:function(){if((this._removeEmptyListCaption(),this.emptyListCaption)&&0===this._getVisibleItemEls().length){var e,t;e=h.isFunction(this.emptyListCaption)?this.emptyListCaption():this.emptyListCaption;var i=r("<var class='empty-list-caption'>"+e+"</var>");t=this._isRenderedAsList()?i.wrapAll("<li class='not-sortable'></li>").parent().css(s):i.wrapAll("<tr class='not-sortable'><td colspan='1000'></td></tr>").parent().parent().css(s),this._getContainerEl().append(t)}},_removeEmptyListCaption:function(){this._isRenderedAsList()?this._getContainerEl().find("> li > var.empty-list-caption").parent().remove():this._getContainerEl().find("> tr > td > var.empty-list-caption").parent().parent().remove()},_insertAndRenderModelView:function(e,t,i){var s=this._wrapModelView(e);if(11===t.nodeType)t.appendChild(s.get(0));else{var n=t.children().length;!h.isUndefined(i)&&0<=i&&i<n?t.children().eq(i).before(s):(!h.isUndefined(i)&&n<i&&(this.forceRerenderOnNextSortEvent=!0),t.append(s))}this.viewManager.add(e),!1===e.render()&&(s.hide(),s.addClass("not-visible"));var o=!1;h.isFunction(this.visibleModelsFilter)&&(o=!this.visibleModelsFilter(e.model)),1===s.children().length?s.toggle(!o):e.$el.toggle(!o),s.toggleClass("not-visible",o),!o&&this.emptyListCaption&&this._removeEmptyListCaption()},updateDependentControls:function(){this._isBackboneCourierAvailable()?this.spawn("updateDependentControls",{selectedModels:this.getSelectedModels()}):this.trigger("updateDependentControls",this.getSelectedModels())},remove:function(){this.viewManager.each(function(e){e.remove()}),t.View.prototype.remove.apply(this,arguments)},reapplyFilter:function(e){var i=this;if(!h.contains(["selectableModels","sortableModels","visibleModels"],e))throw new Error("Invalid filter identifier supplied to reapplyFilter: "+e);switch(e){case"visibleModels":i.viewManager.each(function(e){var t=i.visibleModelsFilter&&!i.visibleModelsFilter.call(i,e.model);e.$el.toggleClass("not-visible",t),i._modelViewHasWrapperLI(e)?e.$el.closest("li").toggleClass("not-visible",t).toggle(!t):e.$el.toggle(!t)}),this._showEmptyListCaptionIfAppropriate();break;case"sortableModels":i.$el.sortable("destroy"),i.viewManager.each(function(e){var t=i.sortableModelsFilter&&!i.sortableModelsFilter.call(i,e.model);e.$el.toggleClass("not-sortable",t),i._modelViewHasWrapperLI(e)&&e.$el.closest("li").toggleClass("not-sortable",t)}),i._setupSortable();break;case"selectableModels":i.viewManager.each(function(e){var t=i.selectableModelsFilter&&!i.selectableModelsFilter.call(i,e.model);e.$el.toggleClass("not-selectable",t),i._modelViewHasWrapperLI(e)&&e.$el.closest("li").toggleClass("not-selectable",t)}),i._validateSelection()}},_removeModelView:function(e){this.selectable&&this._saveSelection(),this.viewManager.remove(e),this._modelViewHasWrapperLI(e)&&e.$el.parent().remove(),e.remove(),this.selectable&&this._restoreSelection(),this._showEmptyListCaptionIfAppropriate()},_validateSelectionAndRender:function(){this._validateSelection(),this.render()},_registerCollectionEvents:function(){this.listenTo(this.collection,"add",function(e){var t;this._hasBeenRendered&&(t=this._createNewModelView(e,this._getModelViewOptions(e)),this._insertAndRenderModelView(t,this._getContainerEl(),this.collection.indexOf(e))),this._isBackboneCourierAvailable()?this.spawn("add",t):this.trigger("add",t)}),this.listenTo(this.collection,"remove",function(e){var t;this._hasBeenRendered&&(t=this.viewManager.findByModelCid(e.cid),this._removeModelView(t)),this._isBackboneCourierAvailable()?this.spawn("remove"):this.trigger("remove")}),this.listenTo(this.collection,"reset",function(){this._hasBeenRendered&&this.render(),this._isBackboneCourierAvailable()?this.spawn("reset"):this.trigger("reset")}),this.listenTo(this.collection,"sort",function(e,t){this._hasBeenRendered&&(!0!==t.add||this.forceRerenderOnNextSortEvent)&&this.render(),this._isBackboneCourierAvailable()?this.spawn("sort"):this.trigger("sort")})},_getContainerEl:function(){if(this._isRenderedAsTable()){var e=this.$el.find("> tbody");if(0<e.length)return e}return this.$el},_getClickedItemId:function(e){var t=null,i=r(e.currentTarget);if(i.closest(".collection-view").get(0)===this.$el.get(0)){var s=i.closest("[data-model-cid]");return 0<s.length&&(t=s.attr("data-model-cid"),r.isNumeric(t)&&(t=parseInt(t,10))),t}},_updateItemTemplate:function(){var e;if(this.itemTemplate){if(0===r(this.itemTemplate).length)throw"Could not find item template from selector: "+this.itemTemplate;e=r(this.itemTemplate).html()}else e=this.$(".item-template").html();e&&(this.itemTemplateFunction=h.template(e))},_validateSelection:function(){var e=h.pluck(this.collection.models,"cid");this.selectedItems=h.intersection(e,this.selectedItems),h.isFunction(this.selectableModelsFilter)&&(this.selectedItems=h.filter(this.selectedItems,function(e){return this.selectableModelsFilter.call(this,this.collection.get(e))},this))},_saveSelection:function(){if(!this.selectable)throw"Attempt to save selection on non-selectable list";this.savedSelection={items:h.clone(this.selectedItems),offset:this.getSelectedModel({by:"offset"})}},_restoreSelection:function(){if(!this.savedSelection)throw"Attempt to restore selection but no selection has been saved!";this.setSelectedModels([],{silent:!0}),0<this.savedSelection.items.length&&(this.setSelectedModels(this.savedSelection.items,{by:"cid",silent:!0}),0===this.selectedItems.length&&this.setSelectedModel(this.savedSelection.offset,{by:"offset"}),this.selectedItems.length!==this.savedSelection.items.length&&(this._isBackboneCourierAvailable()?this.spawn("selectionChanged",{selectedModels:this.getSelectedModels(),oldSelectedModels:[]}):this.trigger("selectionChanged",this.getSelectedModels(),[])))},_addSelectedClassToSelectedItems:function(e){h.isUndefined(e)&&(e=[]);var t=e;t=h.without(t,this.selectedItems),h.each(t,function(e){this._getContainerEl().find("[data-model-cid="+e+"]").removeClass("selected"),this._isRenderedAsList()&&this._getContainerEl().find("li[data-model-cid="+e+"] > *").removeClass("selected")},this);var i=this.selectedItems;i=h.without(i,e),h.each(i,function(e){this._getContainerEl().find("[data-model-cid="+e+"]").addClass("selected"),this._isRenderedAsList()&&this._getContainerEl().find("li[data-model-cid="+e+"] > *").addClass("selected")},this)},_reorderCollectionBasedOnHTML:function(){var i=this;this._getContainerEl().children().each(function(){var e=r(this).attr("data-model-cid");if(e){var t=i.collection.get(e);t&&(i.collection.remove(t,{silent:!0}),i.collection.add(t,{silent:!0,sort:!i.collection.comparator}))}}),this._isBackboneCourierAvailable()?this.spawn("reorder"):this.collection.trigger("reorder"),this.collection.comparator&&this.collection.sort()},_getModelViewConstructor:function(e){return this.modelView||i},_getModelViewOptions:function(e){var t=this.modelViewOptions;return h.isFunction(t)&&(t=t(e)),h.extend({model:e},t)},_createNewModelView:function(e,t){var i=this._getModelViewConstructor(e);if(h.isUndefined(i))throw"Could not find modelView constructor for model";var s=new i(t);return s.collectionListView=s.collectionView=this,s},_wrapModelView:function(e){var t;return this._isRenderedAsTable()?(t=e.$el,e.$el.attr("data-model-cid",e.model.cid)):this._isRenderedAsList()&&(e.$el.is("li")?(t=e.$el,e.$el.attr("data-model-cid",e.model.cid)):t=e.$el.wrapAll("<li data-model-cid='"+e.model.cid+"'></li>").parent()),h.isFunction(this.sortableModelsFilter)&&(this.sortableModelsFilter.call(this,e.model)||(t.addClass("not-sortable"),e.$el.addClass("not-selectable"))),h.isFunction(this.selectableModelsFilter)&&(this.selectableModelsFilter.call(this,e.model)||(t.addClass("not-selectable"),e.$el.addClass("not-selectable"))),t},_convertStringsToInts:function(e){return h.map(e,function(e){if(!h.isString(e))return e;var t=parseInt(e,10);return t==e?t:e})},_containSameElements:function(e,t){return e.length==t.length&&h.intersection(e,t).length==e.length},_isRenderedAsTable:function(){return"table"===this.$el.prop("tagName").toLowerCase()},_isRenderedAsList:function(){return!this._isRenderedAsTable()},_modelViewHasWrapperLI:function(e){return this._isRenderedAsList()&&!e.$el.is("li")},_getVisibleItemEls:function(){return this._getContainerEl().find("> [data-model-cid]:not(.not-visible)")},_charCodes:{upArrow:38,downArrow:40},_isBackboneCourierAvailable:function(){return!h.isUndefined(t.Courier)},_setupSortable:function(){var e=h.extend({axis:"y",distance:10,forcePlaceholderSize:!0,items:this._isRenderedAsTable()?"> tbody > tr:not(.not-sortable)":"> li:not(.not-sortable)",start:h.bind(this._sortStart,this),change:h.bind(this._sortChange,this),stop:h.bind(this._sortStop,this),receive:h.bind(this._receive,this),over:h.bind(this._over,this)},h.result(this,"sortableOptions"));this.$el=this.$el.sortable(e)},_sortStart:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));this._isBackboneCourierAvailable()?this.spawn("sortStart",{modelBeingSorted:i}):this.trigger("sortStart",i)},_sortChange:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));this._isBackboneCourierAvailable()?this.spawn("sortChange",{modelBeingSorted:i}):this.trigger("sortChange",i)},_sortStop:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid")),s=this._getContainerEl().children().index(t.item);-1==s&&i&&this.collection.remove(i),i&&(this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:s}):this.trigger("sortStop",i,s))},_receive:function(e,t){var i=t.sender.data("view");if(i&&i.collection){var s=this._getContainerEl().children().index(t.item),n=i.collection.get(t.item.attr("data-model-cid"));i.collection.remove(n),this.collection.add(n,{at:s}),n.collection=this.collection,this.setSelectedModel(n)}},_over:function(e,t){this._getContainerEl().find("> var.empty-list-caption").hide()},_onKeydown:function(e){if(!this.processKeyEvents)return!0;var t=!1;if(1==this.getSelectedModels({by:"offset"}).length){var i=this.getSelectedModel({by:"offset"});e.which===this._charCodes.upArrow&&0!==i?(this.setSelectedModel(i-1,{by:"offset"}),t=!0):e.which===this._charCodes.downArrow&&i!==this.collection.length-1&&(this.setSelectedModel(i+1,{by:"offset"}),t=!0)}return!t},_listItem_onMousedown:function(t){var i=this._getClickedItemId(t);if(i){var e=this.collection.get(i);if(this._isBackboneCourierAvailable()){var s={clickedModel:e,metaKeyPressed:t.ctrlKey||t.metaKey};h.each(["preventDefault","stopPropagation","stopImmediatePropagation"],function(e){s[e]=function(){t[e]()}}),this.spawn("click",s)}else this.trigger("click",e)}if(this.selectable&&this.clickToSelect)if(i){if(h.isFunction(this.selectableModelsFilter)&&!this.selectableModelsFilter.call(this,this.collection.get(i)))return;if(this.selectMultiple&&t.shiftKey){var n=-1;0<this.selectedItems.length&&this.collection.find(function(e){return n++,h.contains(this.selectedItems,e.cid)},this);var o=-1;this.collection.find(function(e){return o++,e.cid==i},this);for(var l=-1==n?o:n,a=Math.min(o,l),r=Math.max(o,l),c=[],d=a;d<=r;d++)c.push(this.collection.at(d).cid);if(this.setSelectedModels(c,{by:"cid"}),document.selection&&document.selection.empty)document.selection.empty();else if(window.getSelection){var u=window.getSelection();u&&u.removeAllRanges&&u.removeAllRanges()}}else(this.selectMultiple||h.contains(this.selectedItems,i))&&(this.clickToToggle||t.metaKey||t.ctrlKey)?h.contains(this.selectedItems,i)?this.setSelectedModels(h.without(this.selectedItems,i),{by:"cid"}):this.setSelectedModels(h.union(this.selectedItems,[i]),{by:"cid"}):this.setSelectedModels([i],{by:"cid"})}else this.setSelectedModels([])},_listItem_onDoubleClick:function(e){var t=this._getClickedItemId(e);if(t){var i=this.collection.get(t);this._isBackboneCourierAvailable()?this.spawn("doubleClick",{clickedModel:i,metaKeyPressed:e.ctrlKey||e.metaKey}):this.trigger("doubleClick",i)}},_listBackground_onClick:function(e){this.selectable&&this.clickToSelect&&r(e.target).is(".collection-view")&&this.setSelectedModels([])}},{setDefaultModelViewConstructor:function(e){i=e}}),t.ViewOptions={},t.ViewOptions.add=function(e,s){h.isUndefined(s)&&(s="options"),e.setOptions=function(l){var a=this,r={},c={},e=h.result(this,s);if(!h.isUndefined(e)){var t=n(e);h.each(t,function(e,t){var i=e.required,s=e.defaultValue;if(i){if((!l||!h.contains(h.keys(l),t))&&h.isUndefined(a[t]))throw new Error('Required option "'+t+'" was not supplied.');if(l&&h.contains(h.keys(l),t)&&h.isUndefined(l[t]))throw new Error('Required option "'+t+'" can not be set to undefined.')}if(l&&t in l&&!h.isUndefined(l[t])){var n=a[t],o=l[t];h.isUndefined(n)||n===o||(c[t]=n,r[t]=o),a[t]=o}else h.isUndefined(a[t])&&(a[t]=s)})}0<h.keys(r).length&&(h.isFunction(a.onOptionsChanged)?a.onOptionsChanged(r,c):h.isFunction(a._onOptionsChanged)&&a._onOptionsChanged(r,c))},e.getOptions=function(){var e=h.result(this,s);if(h.isUndefined(e))return{};var t=n(e),i=h.keys(t);return h.pick(this,i)}},ChildViewContainer=function(e,s){var i=function(e){this._views={},this._indexByModel={},this._indexByCustom={},this._updateLength(),s.each(e,this.add,this)};s.extend(i.prototype,{add:function(e,t){var i=e.cid;(this._views[i]=e).model&&(this._indexByModel[e.model.cid]=i),t&&(this._indexByCustom[t]=i),this._updateLength()},findByModel:function(e){return this.findByModelCid(e.cid)},findByModelCid:function(e){var t=this._indexByModel[e];return this.findByCid(t)},findByCustom:function(e){var t=this._indexByCustom[e];return this.findByCid(t)},findByIndex:function(e){return s.values(this._views)[e]},findByCid:function(e){return this._views[e]},findIndexByCid:function(t){var i=-1;return s.find(this._views,function(e){if(i++,e.model.cid==t)return e})?i:-1},remove:function(e){var i=e.cid;e.model&&delete this._indexByModel[e.model.cid],s.any(this._indexByCustom,function(e,t){if(e===i)return delete this._indexByCustom[t],!0},this),delete this._views[i],this._updateLength()},call:function(e){this.apply(e,s.tail(arguments))},apply:function(t,i){s.each(this._views,function(e){s.isFunction(e[t])&&e[t].apply(e,i||[])})},_updateLength:function(){this.length=s.size(this._views)}});return s.each(["forEach","each","map","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","toArray","first","initial","rest","last","without","isEmpty","pluck"],function(t){i.prototype[t]=function(){var e=[s.values(this._views)].concat(s.toArray(arguments));return s[t].apply(s,e)}}),i}(0,h),t.CollectionView},"function"==typeof n&&n.amd?n("vendor/backbone.collectionView",["underscore","backbone","jquery"],s):"undefined"!=typeof exports?module.exports=s(t("underscore"),t("backbone"),t("backbone").$):s(i._,i.Backbone,i.jQuery||i.Zepto||i.$),l=[],o=function(s){var n,o=_.rest(arguments);return _.each(l,function(e){var t,i;!n&&(i=(t=e)._unsavedConfig[s],_.isBoolean(i)?i:(_.isString(i)?t[i]:i).apply(t,o))&&(n=e._unsavedConfig.prompt)}),n},Backbone.History.prototype.navigate=_.wrap(Backbone.History.prototype.navigate,function(e,t,i){var s=o("unloadRouterPrompt",t,i);s?confirm(s+" \n\nAre you sure you want to leave this page?")&&e.call(this,t,i):e.call(this,t,i)}),window.onbeforeunload=function(e){return o("unloadWindowPrompt",e)},_.extend(Backbone.Model.prototype,{unsaved:{},_trackingChanges:!1,_originalAttrs:{},_unsavedChanges:{},startTracking:function(){return this._unsavedConfig=_.extend({},{prompt:"You have unsaved changes!",unloadRouterPrompt:!1,unloadWindowPrompt:!1},this.unsaved||{}),this._trackingChanges=!0,this._resetTracking(),this._triggerUnsavedChanges(),this},stopTracking:function(){return this._trackingChanges=!1,this._originalAttrs={},this._unsavedChanges={},this._triggerUnsavedChanges(),this},restartTracking:function(){return this._resetTracking(),this._triggerUnsavedChanges(),this},resetAttributes:function(){if(this._trackingChanges)return this.attributes=this._originalAttrs,this._resetTracking(),this._triggerUnsavedChanges(),this},unsavedAttributes:function(e){if(!e)return!_.isEmpty(this._unsavedChanges)&&_.clone(this._unsavedChanges);var t,i=!1,s=this._unsavedChanges;for(var n in e)_.isEqual(s[n],t=e[n])||((i||(i={}))[n]=t);return i},_resetTracking:function(){this._originalAttrs=_.clone(this.attributes),this._unsavedChanges={}},_triggerUnsavedChanges:function(){var t;this.trigger("unsavedChanges",!_.isEmpty(this._unsavedChanges),_.clone(this._unsavedChanges)),this.unsaved&&(t=this,_.isEmpty(t._unsavedChanges)?l=_.filter(l,function(e){return t.cid!=e.cid}):_.findWhere(l,{cid:t.cid})||l.push(t))}}),Backbone.Model.prototype.set=_.wrap(Backbone.Model.prototype.set,function(e,t,i,s){var n,o;return null==t?this:("object"==typeof t?(n=t,s=i):(n={})[t]=i,s||(s={}),o=e.call(this,n,s),this._trackingChanges&&!s.silent&&(_.each(n,_.bind(function(e,t){_.isEqual(this._originalAttrs[t],e)?delete this._unsavedChanges[t]:this._unsavedChanges[t]=e},this)),this._triggerUnsavedChanges()),o)}),Backbone.sync=_.wrap(Backbone.sync,function(e,t,o,i){return i||(i={}),"update"==t&&(i.success=_.wrap(i.success,_.bind(function(e,t,i,s){var n;return e&&(n=e.call(this,t,i,s)),o._trackingChanges&&(o._resetTracking(),o._triggerUnsavedChanges()),n},this))),e(t,o,i)}),n("vendor/backbone.trackit",function(){}),n("Models/Image",[],function(){return Backbone.Model.extend({defaults:{enabled:"no",id:"",size:"full",src:""},initialize:function(){this.startTracking()}})}),n("Models/_Relationships",[],function(){return{relationship_defaults:{parent:{},children:{}},relationships:{},init_relationships:function(e){var t=this.get_relationships();t.parent&&e&&e.parent&&this.set_parent(e.parent),_.each(t.children,function(e,t){if(!e.conditional||!0===e.conditional(this)){var i,s=this.get(t);e.lookup?i=e.lookup(s):"model"===e.type?i=window.llms_builder.construct.get_model(e.class,s):"collection"===e.type&&(i=window.llms_builder.construct.get_collection(e.class,s)),this.set(t,i),"model"===e.type?this._maybe_set_parent_reference(i):"collection"===e.type&&(i.parent=this,i.each(function(e){this._maybe_set_parent_reference(e)},this))}},this)},get_child_props:function(){var i=[];return _.each(this.get_relationships().children,function(e,t){e.conditional&&!0!==e.conditional(this)||i.push(t)},this),i},get_parent:function(){var e=this.get_relationships();return!!e.parent&&e.parent.reference},get_relationships:function(){return g.extend(!0,this.relationships,this.relationship_defaults)},set_parent:function(e){this.relationships.parent.reference=e},_maybe_set_parent_reference:function(e){if(e&&e.get_relationships){var t=e.get_relationships();t.parent&&t.parent.model===this.get("type")&&e.set_parent(this)}}}}),n("Models/QuestionChoice",["Models/Image","Models/_Relationships"],function(e,t){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"llms_question",type:"model"},children:{choice:{conditional:function(e){return"image"===e.get("choice_type")},class:"Image",model:"image",type:"model"}}},defaults:function(){return{id:_.uniqueId("temp_"),choice:"",choice_type:"text",correct:!1,marker:"A",question_id:"",type:"choice"}},initialize:function(e,t){this.startTracking(),this.init_relationships(t)},get_parent:function(){return this.collection.parent},get_trash_id:function(){return this.get("question_id")+":"+this.get("id")},is_selectable:function(){return this.get_parent().get("question_type").get_choice_selectable()}},t))}),n("Collections/QuestionChoices",["Models/QuestionChoice"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order),this.on("add",this.update_correct),this.on("remove",this.update_correct),this.on("correct-update",this.update_correct)},count_correct:function(){return _.size(this.get_correct())},get_correct:function(){return this.filter(function(e){return e.get("correct")})},update_correct:function(e){if(this.parent.get("question_type").get_choice_selectable()){var t=this.without(e),i=this.parent;if("no"===i.get("multi_choices")&&_.each(t,function(e){e.set("correct",!1)}),0===this.count_correct()&&0<i.get("points")){var s=1===this.size()?this.models:t;_.first(s).set("correct",!0)}}},update_order:function(){var t=this,i=this.parent;this.each(function(e){e.set("marker",i.get("question_type").get_choice_markers()[t.indexOf(e)])})}})}),n("Models/QuestionType",[],function(){return Backbone.Model.extend({defaults:function(){return{choices:!1,clarifications:!0,default_choices:[],description:!0,icon:"question",id:"generic",image:!0,keywords:[],name:"Generic",placeholder:"",points:!0,video:!0}},get_keywords:function(){var e=this.get("name");return[e].concat(this.get("keywords")).concat(e.split(" "))},get_choice_markers:function(){return this._get_choice_option("markers")},get_choice_selectable:function(){return this._get_choice_option("selectable")},get_choice_type:function(){return this._get_choice_option("type")},get_min_choices:function(){return this._get_choice_option("min")},get_max_choices:function(){return this._get_choice_option("max")},get_multi_choices:function(){return!!this.get("choices")&&this._get_choice_option("multi")},_get_choice_option:function(e){var t=this.get("choices");return!(!t||!t[e])&&t[e]}})}),n("Models/Question",["Models/Image","Collections/Questions","Collections/QuestionChoices","Models/QuestionType","Models/_Relationships"],function(e,t,i,s,n){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"llms_quiz",type:"model"},children:{choices:{class:"QuestionChoices",model:"choice",type:"collection"},image:{class:"Image",model:"image",type:"model"},questions:{class:"Questions",conditional:function(e){var t=e.get("question_type");return"group"===(_.isString(t)?t:t.get("id"))},model:"llms_question",type:"collection"},question_type:{class:"QuestionType",lookup:function(e){return _.isString(e)?window.llms_builder.questions.get(e):e},model:"question_type",type:"model"}}},defaults:function(){return{id:_.uniqueId("temp_"),choices:[],content:"",description_enabled:"no",image:{},multi_choices:"no",menu_order:1,points:1,question_type:"generic",questions:[],parent_id:"",title:"",type:"llms_question",video_enabled:"no",video_src:"",_expanded:!1}},initialize:function(e,t){var i=this;this.startTracking(),this.init_relationships(t),!1!==this.get("question_type").choices&&(this._ensure_min_choices(),this.listenTo(this.get("choices"),"remove",function(){setTimeout(function(){i._ensure_min_choices()},0)})),this.get("question_type").get("points")||this.set("points",0),_.delay(function(e){e.on("change:points",e.get_parent().update_points,e.get_parent())},1,this)},add_choice:function(e,t){var i=this.get("question_type").get_max_choices();if(!(this.get("choices").size()>=i)){t=t||{},(e=e||{}).choice_type=this.get("question_type").get_choice_type(),e.question_id=this.get("id");var s=(t.parent=this).get("choices").add(e,t);Backbone.pubSub.trigger("question-add-choice",s,this)}},before_save:function(e,t){return"full"===t&&(e.question_type=this.get("question_type").get("id")),e},get_parent:function(){var e=this.get_relationships();if(e.parent){if(this.collection&&this.collection.parent)return this.collection.parent;if(e.parent.reference)return e.parent.reference}return!1},get_type_index:function(){var i=this.get("question_type").get("id");return this.collection.filter(function(e){var t=e.get("question_type").get("id");return"content"!==i?"content"!==t:"content"===t}).indexOf(this)},get_type_iterator:function(){var e=this.get_type_index();return-1===e?"":"content"!==this.get("question_type").get("id")?e+1:"ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("")[e]},get_qid:function(){var e=this.get_parent_question(),t="";return e&&(t=e.get_qid()+"."),t+this.get_type_iterator()},get_parent_question:function(){return!!this.is_in_group()&&this.collection.parent},get_parent_quiz:function(){return this.get_parent()},get_points:function(){return this.get("question_type").get("points")?this.get("points"):0},get_points_percentage:function(){var e=this.get_parent().get("_points"),t=this.get("points");return 0===e?"0%":(t/e*100).toFixed(2)+"%"},is_in_group:function(){return"question"===this.collection.parent.get("type")},_ensure_min_choices:function(){for(var e=this.get("choices");e.size()<this.get("question_type").get_min_choices();)this.add_choice()}},n))}),n("Collections/Questions",["Models/Question"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order),this.on("add",this.update_parent)},update_order:function(){var t=this;this.each(function(e){e.set("menu_order",t.indexOf(e)+1)})},update_parent:function(e){e.set("parent_id",this.parent.get("id"))}})}),n("Models/_Utilities",[],function(){return{fields:[],get_edit_post_link:function(){return this.has_temp_id()?"":window.llms_builder.admin_url+"post.php?post="+this.get("id")+"&action=edit"},get_settings_fields:function(){var e=this.schema||{};return window.llms_builder.schemas.get(e,this.get("type").replace("llms_",""),this)},has_temp_id:function(){return!_.isNumber(this.get("id"))&&0===this.get("id").indexOf("temp_")},init_custom_schema:function(){var e=_.filter(this.get_settings_fields(),function(e){return e.custom});_.each(e,function(e){_.each(_.flatten(e.fields),function(i){var e=[i.attribute],s=this.get("custom");i.switch_attribute&&e.push(i.switch_attribute),_.each(e,function(e){var t=i.attribute_prefix?i.attribute_prefix+e:e;s&&s[t]&&this.set(e,s[t][0])},this)},this)},this)}}}),n("Schemas/Quiz",[],function(){return{default:{title:LLMS.l10n.translate("General Settings"),toggleable:!0,fields:[[{attribute:"permalink",id:"permalink",type:"permalink"}],[{attribute:"content",id:"description",label:LLMS.l10n.translate("Description"),type:"editor"}],[{attribute:"passing_percent",id:"passing-percent",label:LLMS.l10n.translate("Passing Percentage"),min:0,max:100,tip:LLMS.l10n.translate("Minimum percentage of total points required to pass the quiz"),type:"number"},{attribute:"allowed_attempts",id:"allowed-attempts",label:LLMS.l10n.translate("Limit Attempts"),switch_attribute:"limit_attempts",tip:LLMS.l10n.translate("Limit the maximum number of times a student can take this quiz"),type:"switch-number"},{attribute:"time_limit",id:"time-limit",label:LLMS.l10n.translate("Time Limit"),min:1,max:360,switch_attribute:"limit_time",tip:LLMS.l10n.translate("Enforce a maximum number of minutes a student can spend on each attempt"),type:"switch-number"}],[{attribute:"show_correct_answer",id:"show-correct-answer",label:LLMS.l10n.translate("Show Correct Answers"),tip:LLMS.l10n.translate("When enabled, students will be shown the correct answer to any question they answered incorrectly."),type:"switch"},{attribute:"random_questions",id:"random-questions",label:LLMS.l10n.translate("Randomize Question Order"),tip:LLMS.l10n.translate("Display questions in a random order for each attempt. Content questions are locked into their defined positions."),type:"switch"}]]}}}),n("Models/Quiz",["Collections/Questions","Models/Lesson","Models/Question","Models/_Relationships","Models/_Utilities","Schemas/Quiz"],function(e,t,i,s,n,o){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"lesson",type:"model"},children:{questions:{class:"Questions",model:"llms_question",type:"collection"}}},schema:o,defaults:function(){return{id:_.uniqueId("temp_"),title:LLMS.l10n.translate("New Quiz"),type:"llms_quiz",lesson_id:"",status:"draft",content:"",allowed_attempts:5,limit_attempts:"no",limit_time:"no",passing_percent:65,name:"",random_answers:"no",time_limit:30,show_correct_answer:"no",questions:[],_points:0,permalink:"",_show_settings:!1,_questions_loaded:!1}},initialize:function(){this.init_custom_schema(),this.startTracking(),this.init_relationships(),this.listenTo(this.get("questions"),"add",this.update_points),this.listenTo(this.get("questions"),"remove",this.update_points),this.set("_points",this.get_total_points()),this.on("change:status",function(){"publish"===this.get("status")&&this.get_parent().set("quiz_enabled","yes")})},add_question:function(e){e.parent_id=this.get("id");var t=this.get("questions").add(e,{parent:this});Backbone.pubSub.trigger("quiz-add-question",t,this)},get_l10n_type:function(e){return e?LLMS.l10n.translate("quizzes"):LLMS.l10n.translate("quiz")},get_total_points:function(){var t=0;return this.get("questions").each(function(e){t+=e.get_points()}),t},load_questions:function(s){if(this.get("_questions_loaded"))s();else{var t=this;LLMS.Ajax.call({data:{action:"llms_builder",action_type:"lazy_load",course_id:window.llms_builder.CourseModel.get("id"),load_id:this.get("id")},error:function(e,t,i){console.log(e,t,i),window.llms_builder.debug.log("==== start load_questions error ====",e,t,i,"==== finish load_questions error ===="),s(!0)},success:function(e){e&&e.questions?(t.set("_questions_loaded",!0),e.questions&&_.each(e.questions,t.add_question,t),s()):s(!0)}})}},update_points:function(){this.set("_points",this.get_total_points())}},s,n))}),n("Schemas/Lesson",[],function(){return{default:{title:LLMS.l10n.translate("General Settings"),toggleable:!0,fields:[[{attribute:"permalink",id:"permalink",type:"permalink"}],[{attribute:"video_embed",id:"video-embed",label:LLMS.l10n.translate("Video Embed URL"),type:"video_embed"},{attribute:"audio_embed",id:"audio-embed",label:LLMS.l10n.translate("Audio Embed URL"),type:"audio_embed"}],[{attribute:"free_lesson",id:"free-lesson",label:LLMS.l10n.translate("Free Lesson"),tip:LLMS.l10n.translate("Free lessons can be accessed without enrollment."),type:"switch"},{attribute:"require_passing_grade",id:"require-passing-grade",label:LLMS.l10n.translate("Require Passing Grade on Quiz"),tip:LLMS.l10n.translate("When enabled, students must pass this lesson's quiz before the lesson can be completed."),type:"switch",condition:function(){return"yes"===this.get("quiz_enabled")}},{attribute:"require_assignment_passing_grade",id:"require-assignment-passing-grade",label:LLMS.l10n.translate("Require Passing Grade on Assignment"),tip:LLMS.l10n.translate("When enabled, students must pass this lesson's assignment before the lesson can be completed."),type:"switch",condition:function(){return"undefined"!==window.llms_builder.assignments&&"yes"===this.get("assignment_enabled")}}],[{attribute:"prerequisite",condition:function(){return!1===this.is_first_in_course()},id:"prerequisite",label:LLMS.l10n.translate("Prerequisite"),switch_attribute:"has_prerequisite",type:"switch-select",options:function(){return this.get_available_prereq_options()}}],[{attribute:"drip_method",id:"drip-method",label:LLMS.l10n.translate("Drip Method"),switch_attribute:"drip_method",type:"select",options:function(){var e=[{key:"",val:LLMS.l10n.translate("None")},{key:"date",val:LLMS.l10n.translate("On a specific date")},{key:"enrollment",val:LLMS.l10n.translate("# of days after course enrollment")}];return this.get_course().get("start_date")&&e.push({key:"start",val:LLMS.l10n.translate("# of days after course start date")}),"yes"===this.get("has_prerequisite")&&e.push({key:"prerequisite",val:LLMS.l10n.translate("# of days after prerequisite lesson completion")}),e}},{attribute:"days_before_available",condition:function(){return-1!==["enrollment","start","prerequisite"].indexOf(this.get("drip_method"))},id:"days-before-available",label:LLMS.l10n.translate("# of days"),min:0,type:"number"},{attribute:"date_available",date_format:"Y-m-d",condition:function(){return"date"===this.get("drip_method")},id:"date-available",label:LLMS.l10n.translate("Date"),timepicker:"false",type:"datepicker"},{attribute:"time_available",condition:function(){return"date"===this.get("drip_method")},datepicker:"false",date_format:"h:i A",id:"time-available",label:LLMS.l10n.translate("Time"),type:"datepicker"}]]}}}),n("Models/Lesson",["Models/Quiz","Models/_Relationships","Models/_Utilities","Schemas/Lesson"],function(e,t,i,s){return Backbone.Model.extend(_.defaults({relationships:{parents:{model:"section",type:"model"},children:{quiz:{class:"Quiz",conditional:function(e){return"yes"===e.get("quiz_enabled")||!_.isEmpty(e.get("quiz"))},model:"llms_quiz",type:"model"}}},schema:s,defaults:function(){return{id:_.uniqueId("temp_"),title:LLMS.l10n.translate("New Lesson"),type:"lesson",order:this.collection?this.collection.length+1:1,parent_course:window.llms_builder.course.id,parent_section:"",edit_url:"",view_url:"",content:"",audio_embed:"",has_prerequisite:"no",require_passing_grade:"yes",require_assignment_passing_grade:"yes",video_embed:"",free_lesson:"",assignment:{},assignment_enabled:"no",quiz:{},quiz_enabled:"no",_forceSync:!1}},initialize:function(){this.init_custom_schema(),this.startTracking(),this.maybe_init_assignments(),this.init_relationships();var e=this.get("quiz");_.isEmpty(e)||e.get("lesson_id")||e.set("lesson_id",this.get("id"))},get_course:function(){return this.get_parent().get_parent()},get_l10n_type:function(e){return e?LLMS.l10n.translate("lessons"):LLMS.l10n.translate("lesson")},get_parent:function(){var e=this.get_relationships();return e.parent&&e.parent.reference?e.parent.reference:!(!this.collection||!this.collection.parent)&&this.collection.parent},get_available_prereq_options:function(){var n=this.get_parent().collection.indexOf(this.get_parent()),o=this.collection.indexOf(this),t=[];return this.get_course().get("sections").each(function(e,i){if(i<=n){var s={label:LLMS.l10n.replace("Section %1$d: %2$s",{"%1$d":e.get("order"),"%2$s":e.get("title")}),options:[]};e.get("lessons").each(function(e,t){(i!==n||t<o)&&s.options.push({key:e.get("id"),val:LLMS.l10n.replace("Lesson %1$d: %2$s",{"%1$d":e.get("order"),"%2$s":e.get("title")})})},this),t.push(s)}},this),t},add_quiz:function(e){(e=e||{}).lesson_id=this.id,e._questions_loaded=!0,e.title||(e.title=LLMS.l10n.replace("%1$s Quiz",{"%1$s":this.get("title")})),this.set("quiz",e),this.init_relationships();var t=this.get("quiz");return this.set("quiz_enabled","yes"),t},is_first_in_course:function(){if(this.collection.indexOf(this))return!1;var e=this.get_parent();return!e.collection.indexOf(e)},maybe_init_assignments:function(){window.llms_builder.assignments&&(this.relationships.children.assignment={class:"Assignment",conditional:function(e){return"yes"===e.get("assignment_enabled")||!_.isEmpty(e.get("assignment"))},model:"llms_assignment",type:"model"})}},t,i))}),n("Collections/Lessons",["Models/Lesson"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.on_reorder),this.on("add",this.on_reorder),this.on("remove",this.on_reorder)},on_reorder:function(){this.update_order(),this.validate_prereqs()},update_order:function(){this.each(function(e){e.set("order",this.indexOf(e)+1)},this)},validate_prereqs:function(){this.each(function(e){"yes"===e.get("has_prerequisite")&&(-1===_.pluck(_.flatten(_.pluck(e.get_available_prereq_options(),"options")),"key").indexOf(1*e.get("prerequisite"))&&e.set({prerequisite:0,has_prerequisite:"no"}))},this)}})}),n("Collections/QuestionTypes",["Models/QuestionType"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("add",this.comparator),this.on("remove",this.comparator)},comparator:function(e){return e.get("group").order}})}),n("Models/Section",["Collections/Lessons","Models/_Relationships"],function(e,t){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"course",type:"model"},children:{lessons:{class:"Lessons",model:"lesson",type:"collection"}}},defaults:function(){return{id:_.uniqueId("temp_"),lessons:[],order:this.collection?this.collection.length+1:1,parent_course:window.llms_builder.course.id,title:LLMS.l10n.translate("New Section"),type:"section",_expanded:!1,_selected:!1}},initialize:function(){this.startTracking(),this.init_relationships()},add_lesson:function(e,t){return t=t||{},(e=e||{})instanceof Backbone.Model?(e.set("parent_section",this.get("id")),e.set_parent(this)):e.parent_section=this.get("id"),this.get("lessons").add(e,t)},get_l10n_type:function(e){return e?LLMS.l10n.translate("sections"):LLMS.l10n.translate("section")},get_next:function(e){return this._get_sibling("next",e)},get_prev:function(e){return this._get_sibling("prev",e)},_get_sibling:function(e,t){t="undefined"===t||t;var i,s=this.collection.size()-1,n=this.collection.indexOf(this);if("next"===e?i=n+1:"prev"===e&&(i=n-1),i<=s||i<=0)return this.collection.at(i);if(t){if("next"===e)return this.collection.first();if("prev"===e)return this.collection.last()}return!1}},t))}),n("Collections/Sections",["Models/Section"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order)},update_order:function(){var t=this;this.each(function(e){e.set("order",t.indexOf(e)+1)})}})}),n("Collections/loader",["Collections/Lessons","Collections/QuestionChoices","Collections/Questions","Collections/QuestionTypes","Collections/Sections"],function(e,t,i,s,n){return{Lessons:e,QuestionChoices:t,Questions:i,QuestionTypes:s,Sections:n}}),n("Models/Abstract",["Models/_Relationships","Models/_Utilities"],function(e,t){return Backbone.Model.extend(_.defaults({},e,t))}),n("Models/Course",["Collections/Sections","Models/_Relationships","Models/_Utilities"],function(e,t,i){return Backbone.Model.extend(_.defaults({relationships:{children:{sections:{class:"Sections",model:"section",type:"collection"}}},defaults:function(){return{edit_url:"",sections:[],title:"New Course",type:"course",view_url:""}},initialize:function(){this.startTracking(),this.init_relationships(),Backbone.pubSub.on("add-new-section",this.add_section,this),Backbone.pubSub.on("add-new-lesson",this.add_lesson,this),Backbone.pubSub.on("lesson-search-select",this.add_existing_lesson,this)},add_existing_lesson:function(e){var t=e.data;"clone"===e.action?(delete t.id,t.quiz&&(delete t.quiz,t.quiz_enabled="no")):t._forceSync=!0,delete t.order,delete t.parent_course,delete t.parent_section,this.add_lesson(t)},add_lesson:function(e){var t;(e=e||{}).parent_section?t=this.get("sections").get(e.parent_section):(t=this.get_selected_section())||(t=this.get("sections").last()),e._selected=!0,e.parent_course=this.get("id");var i=t.add_lesson(e,{});return Backbone.pubSub.trigger("new-lesson-added",i),t.set("_expanded",!0),i},add_section:function(e){e=e||{};var t=this.get("sections"),i={},s=this.get_selected_section();s&&(i.at=t.indexOf(s)+1),t.add(e,i)},get_selected_section:function(){return this.get("sections").find(function(e){return e.get("_selected")})}},t,i))}),n("Models/loader",["Models/Abstract","Models/Course","Models/Image","Models/Lesson","Models/Question","Models/QuestionChoice","Models/QuestionType","Models/Quiz","Models/Section"],function(e,t,i,s,n,o,l,a,r){return{Abstract:e,Course:t,Image:i,Lesson:s,Question:n,QuestionChoice:o,QuestionType:l,Quiz:a,Section:r}}),n("Views/_Detachable",[],function(){return{events:{'click a[href="#llms-detach-model"]':"detach_model"},detach_model:function(e){e&&(e.preventDefault(),e.stopPropagation());var t=LLMS.l10n.replace("Are you sure you want to detach this %s?",{"%s":this.model.get_l10n_type()});window.confirm(t)&&(this.model.collection&&this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-detached",this.model),this.trigger("model-trashed",this.model))}}}),n("Views/_Editable",[],function(){return{media_lib:null,events:{"click .llms-add-image":"open_media_lib",'click a[href="#llms-edit-slug"]':"make_slug_editable",'click a[href="#llms-remove-image"]':"remove_image","change .llms-editable-select select":"on_select",'change .llms-switch input[type="checkbox"]':"toggle_switch","change .llms-editable-radio input":"on_radio_select","focusin .llms-input":"on_focus","focusout .llms-input":"on_blur","keydown .llms-input":"on_keydown",'input .llms-input[type="number"]':"on_blur","paste .llms-input[data-formatting]":"on_paste"},get_allowed_tags:function(e){return e.attr("data-formatting")?_.map(e.attr("data-formatting").split(","),function(e){return e.trim()}):["b","i","u","strong","em"]},get_content:function(e){return"INPUT"===e[0].tagName?e.val():e.attr("data-formatting")||e.hasClass("ql-editor")?_.stripFormatting(e.html(),this.get_allowed_tags(e)):e.text()},has_changed:function(e){var t=g(e.target);return t.attr("data-original-content")!==this.get_content(t)},is_valid:function(e){var t=this,i=g(e.target),s=this.get_content(i),n=i.attr("data-type");if((i.attr("required")||i.attr("data-required"))&&s.length<1)return!1;if("url"===n||"video"===n){if(!this._validate_url(this.get_content(i)))return!1}else"permalink"===n&&LLMS.Ajax.call({data:{action:"llms_builder",action_type:"get_permalink",course_id:window.llms_builder.CourseModel.get("id"),id:t.model.get("id"),title:t.model.get("title"),slug:s},beforeSend:function(){LLMS.Spinner.start(i.closest(".llms-editable-toggle-group"),"small")},success:function(e){e.permalink&&e.slug&&(t.model.set("permalink",e.permalink),t.model.set("name",e.slug),t.render())}});return!0},init_datepickers:function(){this.$el.find(".llms-editable-date input").each(function(){g(this).datetimepicker({format:g(this).attr("data-date-format")||"Y-m-d h:i A",datepicker:void 0===g(this).attr("data-date-datepicker")||"true"==g(this).attr("data-date-datepicker"),timepicker:void 0===g(this).attr("data-date-timepicker")||"true"==g(this).attr("data-date-timepicker"),onClose:function(e,t){t.blur()}})})},init_formatting_els:function(){var o=this;this.$el.find(".llms-input-formatting[data-formatting]").each(function(){var e=g(this).attr("data-formatting").split(","),s=g(this).attr("data-attribute"),n=new Quill(this,{modules:{toolbar:[e],keyboard:{bindings:{tab:{key:9,handler:function(e,t){return!0}},13:{key:13,handler:function(e,t){return n.root.blur(),!1}}}}},placeholder:g(this).attr("data-placeholder"),theme:"bubble"});n.on("text-change",function(e,t,i){o.model.set(s,o.get_content(g(n.root)))}),Backbone.pubSub.trigger("formatting-ed-init",n,g(this),o)})},init_selects:function(){this.$el.find(".llms-editable-select select").llmsSelect2({width:"100%"})},on_blur:function(e){e.stopPropagation(),this.model.set("_has_focus",!1,{silent:!0});g(e.target);this.has_changed(e)&&(this.is_valid(e)?this.save_edits(e):this.revert_edits(e))},on_focus:function(e){e.stopPropagation(),this.model.set("_has_focus",!0,{silent:!0})},on_paste:function(e){e.preventDefault(),e.stopPropagation();var t=(e.originalEvent||e).clipboardData.getData("text/plain");window.document.execCommand("insertText",!1,t)},on_select:function(e){var t,i=g(e.target),s=i.attr("multiple"),n=i.attr("name"),o=i.find("option:selected");s?(t=[],t=o.map(function(){return this.value}).get()):t=o[0].value,this.model.set(n,t)},on_radio_select:function(e){var t=g(e.target),i=t.attr("name"),s=t.val();this.model.set(i,s)},on_keydown:function(e){e.stopPropagation();var t=e.which||e.keyCode,i=e.shiftKey;switch(t){case 13:i||(e.preventDefault(),e.target.blur());break;case 27:e.preventDefault(),this.revert_edits(e),e.target.blur()}},open_media_lib:function(e){e.stopPropagation();var n=this,o=g(e.currentTarget);n.media_lib?n.media_lib.uploader.uploader.param("post_id"):(n.media_lib=wp.media.frames.file_frame=wp.media({title:LLMS.l10n.translate("Select an image"),button:{text:LLMS.l10n.translate("Use this image")},multiple:!1}),n.media_lib.on("select",function(){var e,t=o.attr("data-image-size"),i=n.media_lib.state().get("selection").first().toJSON(),s=n.model.get(o.attr("data-attribute"));e=t&&i.sizes[t]?i.sizes[t].url:i.url,s.set({id:i.id,src:e})})),n.media_lib.open()},remove_image:function(e){e.preventDefault(),this.model.get(g(e.currentTarget).attr("data-attribute")).set({id:"",src:""})},revert_edits:function(e){var t=g(e.target),i=t.attr("data-original-content");t.html(i)},save_edits:function(e){var t=g(e.target),i=this.get_content(t);this.model.set(t.attr("data-attribute"),i)},toggle_switch:function(e){e.stopPropagation();var t,i=g(e.target),s=i.attr("name"),n=i.attr("data-rerender");if(t=i.is(":checked")?i.attr("data-on")?i.attr("data-on"):"yes":i.attr("data-off")?i.attr("data-off"):"no",-1!==s.indexOf(".")){var o=s.split(".");"parent"===o[0]?this.model.get_parent().set(o[1],t):this.model.get(o[0]).set(o[1],t)}else this.model.set(s,t);if(this.trigger(s.replace(".","-")+"_toggle",t),!n||"yes"===n){var l=this;setTimeout(function(){l.render()},100)}},init_editor:function(e,t){t=t||{},wp.editor.remove(e),wp.editor.initialize(e,g.extend(!0,wp.editor.getDefaultSettings(),{mediaButtons:!0,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,blockquote,hr,alignleft,aligncenter,alignright,link,unlink,wp_adv",toolbar2:"formatselect,underline,alignjustify,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help",setup:_.bind(this.on_editor_ready,this)}},t))},make_slug_editable:function(e){var t=g(e.currentTarget),i=t.prevAll("a"),s=t.prev("input.permalink"),n=i.attr("href"),o=s.val(),l=n.replace(o,"");t.hide(),i.css({color:"#999","pointer-events":"none","text-decoration":"none"}),i.text(l.substring(0,l.length-1)),s.show().focus()},on_editor_ready:function(t){var i=this,s=g("#"+t.id),e=s.closest(".llms-editable-editor"),n=e.find(".llms-label"),o=s.attr("data-attribute");n.length&&n.prependTo(e.find(".wp-editor-tools")),t.on("change",function(e){i.model.set(o,wp.editor.getContent(t.id))}),s.on("input",function(e){i.model.set(o,s.val())}),e.on("click",".quicktags-toolbar .ed_button",function(){setTimeout(function(){s.trigger("input")},10)})},_validate_url:function(e){var t=document.createElement("a");return t.href=e,t.host&&t.host!==window.location.host}}}),n("Views/_Receivable",[],function(){return{_receive:function(e,t){if(t.sender.hasClass("ui-draggable")){var i=this._getContainerEl().children().index(t.helper);return t.helper.remove(),void this.collection.add({},{at:i})}var s=t.sender.data("view");if(s&&s.collection){var n=this._getContainerEl().children().index(t.item),o=s.collection.get(t.item.attr("data-model-cid"));s.collection.remove(o),this.collection.add(o,{at:n}),o.collection=this.collection,this.setSelectedModel(o)}}}}),n("Views/_Shiftable",[],function(){return{maybe_hide_shiftable_buttons:function(){if(this.model.collection){var e=this.model.get("type");this.model.collection.first()===this.model?this.$el.find(".shift-up--"+e).hide():this.model.collection.last()===this.model&&this.$el.find(".shift-down--"+e).hide()}},shift:function(e,t){var i=this.model.collection;i.remove(this.model),i.add(this.model,{at:t}),i.trigger("reorder")},shift_down:function(e){e.preventDefault();var t=this.model.collection.indexOf(this.model);this.shift(t,t+1)},shift_up:function(e){e.preventDefault();var t=this.model.collection.indexOf(this.model);this.shift(t,t-1)}}}),n("Views/_Subview",[],function(){return{subscriptions:{},state:"",views:{},get_subview:function(e){return!!this.views[e]&&this.views[e]},events_subscribe:function(e){_.each(e,function(e,t){this.subscriptions[t]=e,Backbone.pubSub.on(t,e,this)},this)},events_unsubscribe:function(){_.each(this.subscriptions,function(e,t){Backbone.pubSub.off(t,e,this),delete this.subscriptions[t]},this)},remove_subview:function(e){var t=this.get_subview(e);t&&t.instance&&(_.isEmpty(t.instance.views)||(t.instance.events_unsubscribe(),t.instance.remove_subviews()),t.instance.off(),t.instance.off(null,null,null),t.instance.remove(),t.instance.undelegateEvents(),t.instance=null)},remove_subviews:function(){_.each(this.views,function(e,t){this.remove_subview(t)},this)},render_subviews:function(i){i=i||{},_.each(this.views,function(e,t){this.state===e.state?this.render_subview(t,i):this.remove_subview(t)},this)},render_subview:function(e,t){var i=this.get_subview(e);i&&(this.remove_subview(e),i.instance||(i.instance=new i.class(t)),i.instance.render())},set_state:function(e){return this.state=e,this}}}),n("Views/_Trashable",[],function(){return{events:{'click a[href="#llms-trash-model"]':"trash_model"},trash_model:function(e){e&&(e.preventDefault(),e.stopPropagation());var t=LLMS.l10n.replace("Are you sure you want to move this %s to the trash?",{"%s":this.model.get_l10n_type()});window.confirm(t)&&(this.model.collection&&this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-trashed",this.model),this.trigger("model-trashed",this.model))}}}),n("Views/_loader",["Views/_Detachable","Views/_Editable","Views/_Receivable","Views/_Shiftable","Views/_Subview","Views/_Trashable"],function(e,t,i,s,n,o){return{Detachable:e,Editable:t,Receivable:i,Shiftable:s,Subview:n,Trashable:o}}),n("Controllers/Construct",["Collections/loader","Models/loader","Views/_loader"],function(n,o,l){return function(){function s(e,t,i,s){return e[t]?new e[t](i,s):(console.log('"'+t+'" not found.'),!1)}return this.get_collection=function(e,t,i){return s(n,e,t,i)},this.get_model=function(e,t,i){return s(o,e,t,i)},this.extend_view=function(){for(var e=arguments[0],t=1;arguments[t];){var i=arguments[t];l[i]&&(e.events&&l[i].events&&(e.events=_.defaults(e.events,l[i].events)),e=_.defaults(e,l[i])),t++}return Backbone.View.extend(e)},this.register_collection=function(e,t){n[e]=Backbone.Collection.extend(t)},this.register_model=function(e,t){o[e]=o.Abstract.extend(t)},this}}),n("Controllers/Debug",[],function(){return function(e){var t=this,i=e.enabled||!1;this.disable=function(){t.log("LifterLMS Builder debugging disabled"),i=!1},this.enable=function(){i=!0,t.log("LifterLMS Builder debugging enabled")},this.log=function(){i&&_.each(arguments,function(e){console.log(e)})},this.toggle=function(){i?t.disable():t.enable()},i&&t.enable()}}),n("Controllers/Schemas",[],function(){return function(e){var s=e;return _.each(s,function(e){_.each(e,function(e){e.custom=!0})}),this.get=function(e,t,i){return s[t]&&(e=_.extend(e,s[t])),e},this}}),n("Controllers/Sync",[],function(){return function(s,e){this.saving=!1;var n=this,t=!0,i=null,o=e.check_interval_ms||1e4,l=new Backbone.Collection,a=new Backbone.Collection;function r(e,t){return"success"===e.status&&(e.message=[]),e.status="error","string"==typeof t&&(t=[t]),e.message=e.message.concat(t),e}function c(){var e={};e.changes=n.get_unsaved_changes(),e.has_unsaved_changes=n.has_unsaved_changes(e.changes),e.saving=n.saving,window.llms_builder.debug.log("==== start changes check ====",e,"==== finish changes check ===="),Backbone.pubSub.trigger("current-save-status",e)}function d(i){var s;return i instanceof Backbone.Model?(s=function(e){var t,i={};if(e.get("_has_focus"))return i;u(e)||!0===e.get("_forceSync")?(i=_.clone(e.attributes),t="full"):(i=e.unsavedAttributes(),t="partial");var s=e.get_relationships?e.get_child_props():[];return i=_.omit(i,function(e,t){return 0===t.indexOf("_")||-1!==s.indexOf(t)}),e.before_save&&(i=e.before_save(i,t)),i}(i),i.get_relationships&&_.each(i.get_child_props(),function(e){var t=d(i.get(e));_.isEmpty(t)||(s[e]=t)}),_.isEmpty(s)||(s.id=i.get("id"))):i instanceof Backbone.Collection&&(s=[],i.each(function(e){var t=d(e);_.isEmpty(t)||s.push(t)})),s}function u(e){return!_.isNumber(e.id)&&0===e.id.indexOf("temp_")}function h(i,e){Backbone.pubSub.trigger(i.get("type")+"-maybe-restart-tracking",i,e);var t=["id","orig_id"];i.get_relationships&&t.concat(i.get_child_props()),_.each(_.omit(e,t),function(e,t){_.isEqual(i.get(t),e)&&(delete i._unsavedChanges[t],i._originalAttrs[t]=e)}),i.unset("_forceSync")}function p(s){var e={detach:l,trash:a};return _.each(e,function(t,e){if(s[e]){var i=[];_.each(s[e],function(e){e.error?i.push(e.error):t.remove(e.id)}),i.length&&_.extend(s,r(s,i))}}),s}function m(e){return e.updates&&e.updates&&(e=function s(n,o,l,a){if(!n[o])return n;if(l.get(o)instanceof Backbone.Model){var e=n[o];if(e.error)_.extend(a,r(a,e.error));else{var t=l.get(o);e.id!=e.orig_id&&(t.set("id",e.id),delete t._unsavedChanges.id),h(t,e),t.get_relationships&&_.each(t.get_child_props(),function(e){_.extend(n[o],s(n[o],e,t,a))})}}else l.get(o)instanceof Backbone.Collection&&_.each(n[o],function(e,t){if(e.error)_.extend(a,r(a,e.error));else{var i=l.get(o).get(e.orig_id);e.id!=e.orig_id&&(i.set("id",e.id),delete i._unsavedChanges.id),h(i,e),i.get_relationships&&_.each(i.get_child_props(),function(e){_.extend(n[o],s(n[o][t],e,i,a))})}});return a}(e.updates,"sections",s,e)),e}return this.get_unsaved_changes=function(){return{detach:l.pluck("id"),trash:a.pluck("id"),updates:d(s)}},this.has_unsaved_changes=function(e){return void 0===e&&(e=n.get_unsaved_changes()),!!_.find(e,function(e){return!1===_.isEmpty(e)})},this.save_now=function(){t?wp.heartbeat.connectNow():function(){if(!n.saving){var e=n.get_unsaved_changes();n.has_unsaved_changes(e)&&(e.id=s.get("id"),LLMS.Ajax.call({data:{action:"llms_builder",action_type:"ajax_save",course_id:e.id,llms_builder:JSON.stringify(e)},beforeSend:function(){window.llms_builder.debug.log("==== start do_ajax_save before ====",e,"==== finish do_ajax_save before ===="),n.saving=!0,Backbone.pubSub.trigger("heartbeat-send",n)},error:function(e,t,i){window.llms_builder.debug.log("==== start do_ajax_save error ====",data,"==== finish do_ajax_save error ===="),n.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",n,{status:"error",message:e.responseText+" ("+i+" "+t+")"})},success:function(e){e.llms_builder&&(window.llms_builder.debug.log("==== start do_ajax_save success ====",e,"==== finish do_ajax_save success ===="),e.llms_builder=p(e.llms_builder),e.llms_builder=m(e.llms_builder),n.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",n,e.llms_builder))}}))}}()},this.set_check_interval=function(e){o=e,i&&clearInterval(i),o&&(i=setInterval(c,o))},Backbone.pubSub.on("model-detached",function(e){u(e)||l.add(_.clone(e.attributes))}),Backbone.pubSub.on("model-trashed",function(e){if(!u(e)){var t=_.clone(e.attributes);e.get_trash_id&&(t.id=e.get_trash_id()),a.add(t)}}),g(document).on("heartbeat-send",function(e,t){if(!n.saving){var i=n.get_unsaved_changes();n.has_unsaved_changes(i)&&(i.id=s.get("id"),n.saving=!0,t.llms_builder=JSON.stringify(i)),window.llms_builder.debug.log("==== start heartbeat-send ====",t,"==== finish heartbeat-send ===="),Backbone.pubSub.trigger("heartbeat-send",n)}}),g(document).on("heartbeat-tick",function(e,t){t.llms_builder&&(window.llms_builder.debug.log("==== start heartbeat-tick ====",t,"==== finish heartbeat-tick ===="),t.llms_builder=p(t.llms_builder),t.llms_builder=m(t.llms_builder),n.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",n,t.llms_builder))}),g(document).on("heartbeat-error",function(e,t){window.llms_builder.debug.log("==== start heartbeat-error ====",t,"==== finish heartbeat-error ===="),n.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",n,{status:"error",message:t.responseText+" ("+t.status+" "+t.statusText+")"})}),void 0===wp.heartbeat&&(window.llms_builder.debug.log("WordPress Heartbeat disabled. Autosaving is disabled!"),t=!1),o&&n.set_check_interval(o),g(window).on("beforeunload",function(){if(n.has_unsaved_changes())return c(),"Are you sure you want to abandon your changes?"}),this}}),n("Views/Lesson",["Views/_Detachable","Views/_Editable","Views/_Shiftable","Views/_Trashable"],function(e,t,i,s){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id,"data-section-id":this.model.get("parent_section")}},className:"llms-builder-item llms-lesson",events:_.defaults({"click .edit-lesson":"open_lesson_editor","click .edit-quiz":"open_quiz_editor","click .edit-assignment":"open_assignment_editor","click .section-prev":"section_prev","click .section-next":"section_next","click .shift-up--lesson":"shift_up","click .shift-down--lesson":"shift_down"},e.events,t.events,s.events),id:function(){return"llms-lesson-"+this.model.id},tagName:"li",template:wp.template("llms-lesson-template"),initialize:function(){this.render(),this.listenTo(this.model,"change",this.render),Backbone.pubSub.on("lesson-selected",this.on_select,this),Backbone.pubSub.on("new-lesson-added",this.on_select,this)},render:function(){return this.$el.html(this.template(this.model)),this.maybe_hide_shiftable_buttons(),this.model.get("_selected")?this.$el.addClass("selected"):this.$el.removeClass("selected"),this},open_assignment_editor:function(){Backbone.pubSub.trigger("lesson-selected",this.model,"assignment"),this.model.set("_selected",!0)},open_lesson_editor:function(){Backbone.pubSub.trigger("lesson-selected",this.model,"lesson"),this.model.set("_selected",!0)},open_quiz_editor:function(){Backbone.pubSub.trigger("lesson-selected",this.model,"quiz"),this.model.set("_selected",!0)},on_select:function(e){this.model.id!==e.id&&this.model.set("_selected",!1)},section_next:function(e){e.preventDefault(),this._move_to_section("next")},section_prev:function(e){e.preventDefault(),this._move_to_section("prev")},_move_to_section:function(e){var t,i=this.model.collection;"next"===e?t=i.parent.get_next():"prev"===e&&(t=i.parent.get_prev()),t&&(i.remove(this.model),t.add_lesson(this.model),t.set("_expanded",!0))}},e,t,i,s))}),n("Views/LessonList",["Views/Lesson","Views/_Receivable"],function(e,t){return Backbone.CollectionView.extend(_.defaults({className:"llms-lessons",modelView:e,selectable:!1,sortable:!0,sortableOptions:{axis:!1,connectWith:".llms-lessons",cursor:"move",handle:".drag-lesson",items:".llms-lesson",placeholder:"llms-lesson llms-sortable-placeholder"},sortable_start:function(e){g(".llms-lessons").addClass("dragging")},sortable_stop:function(e){g(".llms-lessons").removeClass("dragging")},_sortStop:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid")),s=this._getContainerEl().children().index(t.item);-1==s&&i&&this.collection.remove(i),this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:s}):this.trigger("sortStop",i,s)}},t))}),n("Views/Section",["Views/LessonList","Views/_Editable","Views/_Shiftable","Views/_Trashable"],function(e,t,i,s){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id}},className:"llms-builder-item llms-section",events:_.defaults({click:"select","click .expand":"expand","click .collapse":"collapse","click .shift-up--section":"shift_up","click .shift-down--section":"shift_down","mouseenter .llms-lessons":"on_mouseenter"},t.events,s.events),id:function(){return"llms-section-"+this.model.id},tagName:"li",template:wp.template("llms-section-template"),initialize:function(){this.render(),this.listenTo(this.model,"change",this.render),this.listenTo(this.model,"change:_expanded",this.toggle_expanded),this.lessonListView.collection.on("add",this.on_lesson_add,this),this.dragTimeout=null,Backbone.pubSub.on("expand-all",this.expand,this),Backbone.pubSub.on("collapse-all",this.collapse,this)},render:function(){return this.$el.html(this.template(this.model.toJSON())),this.maybe_hide_shiftable_buttons(),this.lessonListView=new e({el:this.$el.find(".llms-lessons"),collection:this.model.get("lessons")}),this.lessonListView.render(),this.lessonListView.on("sortStart",this.lessonListView.sortable_start),this.lessonListView.on("sortStop",this.lessonListView.sortable_stop),this.lessonListView.on("selectionChanged",this.active_lesson_change,this),this.maybe_hide_trash_button(),this},active_lesson_change:function(e,t){Backbone.pubSub.trigger("active-lesson-change",{current:e,previous:t})},collapse:function(e,t){void 0===t&&(t=!0),e&&(e.stopPropagation(),e.preventDefault()),this.$el.removeClass("expanded").find(".drag-expanded").removeClass("drag-expanded"),t&&this.model.set("_expanded",!1),Backbone.pubSub.trigger("section-toggle",this.model)},expand:function(e,t){void 0===t&&(t=!0),e&&(e.stopPropagation(),e.preventDefault()),this.$el.addClass("expanded"),t&&this.model.set("_expanded",!0),Backbone.pubSub.trigger("section-toggle",this.model)},maybe_hide_trash_button:function(){var e=this.$el.find(".trash--section");this.model.get("lessons").isEmpty()?e.show():e.hide()},on_lesson_add:function(e){this.lessonListView.collection.trigger("reorder"),e.set("parent_section",this.model.get("id")),this.expand()},on_mouseenter:function(e){g(e.target).hasClass("dragging")&&(g(".drag-expanded").removeClass("drag-expanded"),g(e.target).addClass("drag-expanded"))},toggle_expanded:function(e,t){t?this.expand(null,!1):this.collapse(null,!1)}},t,i,s))}),n("Views/SectionList",["Views/Section","Views/_Receivable"],function(e,t){return Backbone.CollectionView.extend(_.defaults({el:"#llms-sections",events:{"mousedown > li.llms-section > .llms-builder-header .llms-headline":"_listItem_onMousedown",click:"_listBackground_onClick","click ul.collection-view":"_listBackground_onClick",keydown:"_onKeydown"},modelView:e,processKeyEvents:!1,selectable:!0,sortable:!0,sortableOptions:{axis:!1,cursor:"move",handle:".drag-section",items:".llms-section",placeholder:"llms-section llms-sortable-placeholder"},sortable_start:function(e){this.$el.addClass("dragging")},sortable_stop:function(e){this.$el.removeClass("dragging")}},t))}),n("Views/Course",["Views/SectionList","Views/_Editable"],function(e,t){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id}},el:"#llms-builder-main",tagName:"div",template:wp.template("llms-course-template"),initialize:function(){this.render(),this.sectionListView=new e({collection:this.model.get("sections")}),this.sectionListView.render(),this.sectionListView.on("sortStart",this.sectionListView.sortable_start),this.sectionListView.on("sortStop",this.sectionListView.sortable_stop),this.sectionListView.on("selectionChanged",this.active_section_change),this.listenTo(this.model.get("sections"),"add",this.on_section_add),Backbone.pubSub.on("section-toggle",this.on_section_toggle,this),Backbone.pubSub.on("expand-section",this.expand_section,this),Backbone.pubSub.on("lesson-selected",this.active_lesson_change,this)},render:function(){return this.$el.html(this.template(this.model)),this},active_lesson_change:function(e){var t=this.model.get("sections").get(e.get("parent_section"));this.sectionListView.setSelectedModel(t)},active_section_change:function(e,t){_.each(e,function(e){e.set("_selected",!0)}),_.each(t,function(e){e.set("_selected",!1)})},on_section_add:function(e){this.sectionListView.setSelectedModel(e)},on_section_toggle:function(e){var t=e.get("_expanded")?[e]:[];this.sectionListView.setSelectedModels(t)}},t))}),n("Views/SettingsFields",[],function(){return Backbone.View.extend(_.defaults({events:{"click .llms-settings-group-toggle":"toggle_group"},fields:{},tagName:"div",template:wp.template("llms-settings-fields-template"),get_editor_fields:function(){return _.filter(this.fields,function(e){return this.is_editor_field(e.type)},this)},get_groups:function(){return this.model.get_settings_fields()},is_group_hidden:function(e){var t="llms-"+this.model.get("type")+"-settings-group--"+e;return"undefined"!==window.localStorage&&"hidden"===window.localStorage.getItem(t)},get_switch_attribute:function(e){return e.switch_attribute?e.switch_attribute:e.attribute},has_switch:function(e){return-1!==e.indexOf("switch")},is_default_field:function(e){return-1!==["audio_embed","datepicker","number","text","video_embed"].indexOf(e.replace("switch-",""))},is_editor_field:function(e){return-1!==["editor","switch-editor"].indexOf(e.replace("switch-",""))},is_switch_condition_met:function(e){return e.switch_on===this.model.get(e.switch_attribute)},render:function(){return this.$el.html(this.template(this)),_.each(this.get_editor_fields(),function(e){this.render_editor(e)},this),this},render_editor:function(e){var o=this;wp.editor.remove(e.id),e.settings.tinymce.setup=function(t){var i=g("#"+t.id),e=i.closest(".llms-editable-editor"),s=e.find(".llms-label"),n=i.attr("data-attribute");s.length&&s.prependTo(e.find(".wp-editor-tools")),t.on("change",function(e){o.model.set(n,wp.editor.getContent(t.id))}),i.on("input",function(e){o.model.set(n,i.val())}),e.on("click",".quicktags-toolbar .ed_button",function(){setTimeout(function(){i.trigger("input")},10)})},wp.editor.initialize(e.id,e.settings)},render_select_options:function(e,i){var s="",n=this.model.get(i);function o(e,t){return'<option value="'+t+'"'+_.selected(t,n)+">"+e+"</option>"}return _.each(e,function(e,t){"string"==typeof e?s+=o(e,t):"object"==typeof e&&(e.label&&e.options?(s+='<optgroup label="'+e.label+'">',s+=this.render_select_options(e.options,i)):s+=o(e.val,e.key))},this),s},setup_field:function(e,t){var i={classes:[],id:_.uniqueId(e.attribute+"_"),input_type:"text",label:"",options:{},placeholder:"",tip:"",tip_position:"top-right",settings:{}};if(e.condition&&!1===_.bind(e.condition,this.model)())return!1;switch(e.type){case"audio_embed":i.classes.push("llms-editable-audio"),i.placeholder="https://",i.tip=LLMS.l10n.translate("Use SoundCloud or Spotify audio URLS."),i.input_type="url";break;case"datepicker":i.classes.push("llms-editable-date");break;case"editor":case"switch-editor":var s=e.settings||{};i.settings=g.extend(!0,wp.editor.getDefaultSettings(),{mediaButtons:!0,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,blockquote,hr,alignleft,aligncenter,alignright,link,unlink,wp_adv",toolbar2:"formatselect,underline,alignjustify,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help"}},s);break;case"number":i.input_type="number";break;case"permalink":i.label=LLMS.l10n.translate("Permalink");break;case"video_embed":i.classes.push("llms-editable-video"),i.placeholder="https://",i.tip=LLMS.l10n.translate("Use YouTube, Vimeo, or Wistia video URLS."),i.input_type="url"}this.has_switch(e.type)&&(i.switch_on="yes",i.switch_off="no");var n=_.defaults(_.deepClone(e),i);if(_.isFunction(n.options)&&(n.options=_.bind(n.options,this.model)()),-1!==["radio","switch-radio"].indexOf(e.type)){var o=!1;_.each(e.options,function(e,t){-1===e.indexOf(".png")&&-1===e.indexOf(".jpg")||(n.options[t]='<span><img src="'+e+'"></span>',o=!0)}),o&&n.classes.push("has-images")}return n.tip&&n.classes.push("tip--"+n.tip_position),n.classes.length&&(n.classes=" "+n.classes.join(" ")),this.fields[n.id]=n},should_rerender_on_toggle:function(e){return-1!==e.indexOf("switch-")?"yes":"no"},toggle_group:function(e){e.preventDefault();var t=g(e.currentTarget).closest(".llms-model-settings");if(t.toggleClass("hidden"),"undefined"!==window.localStorage){var i=t.attr("id");t.hasClass("hidden")?window.localStorage.setItem(i,"hidden"):window.localStorage.removeItem(i)}}}))}),n("Views/LessonEditor",["Views/_Detachable","Views/_Editable","Views/_Trashable","Views/_Subview","Views/SettingsFields"],function(e,t,i,s,n){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{class:n,instance:null,state:"default"}},el:"#llms-editor-lesson",events:_.defaults({},e.events,t.events,i.events),template:wp.template("llms-lesson-settings-template"),initialize:function(e){this.model=e.lesson;_.each(["change:date_available","change:drip_method","change:time_available"],function(e){this.listenTo(this.model,e,this.render)},this),this.listenTo(this.model,"change:has_prerequisite",function(e,t){"yes"===t&&this.$el.find('select[name="prerequisite"]').trigger("change")})},render:function(){return this.$el.html(this.template(this.model)),this.remove_subview("settings"),this.render_subview("settings",{el:"#llms-lesson-settings-fields",model:this.model}),this.init_datepickers(),this.init_selects(),this}},e,t,i,s,n))}),n("Views/Popover",[],function(){return Backbone.View.extend({defaults:{placement:"auto",width:"auto",trigger:"manual",style:"light",animation:"pop",title:"",content:"",closeable:!1,backdrop:!1,onShow:function(e){},onHide:function(e){}},tagName:"div",initialize:function(e){this.$el.length&&(this.defaults.container=this.$el.parent()),this.args=_.defaults(e.args,this.defaults),this.render()},render:function(){return this.$el.webuiPopover(this.args),this},hide:function(){return this.$el.webuiPopover("hide"),this},show:function(){return this.$el.webuiPopover("show"),this}})}),n("Views/PostSearch",[],function(){return Backbone.View.extend({events:{"select2:select":"add_post"},tagName:"select",initialize:function(e){this.post_type=e.post_type,this.searching_message=e.searching_message||LLMS.l10n.translate("Searching...")},add_post:function(e){var t=this.$el.attr("data-post-type");Backbone.pubSub.trigger(t.replace("llms_","")+"-search-select",e.params.data,e),this.$el.val(null).trigger("change")},render:function(){var t=this;return setTimeout(function(){t.$el.llmsSelect2({ajax:{dataType:"JSON",delay:250,method:"POST",url:window.ajaxurl,data:function(e){return{action:"llms_builder",action_type:"search",course_id:window.llms_builder.course.id,post_type:t.post_type,term:e.term,page:e.page,_ajax_nonce:wp_ajax_data.nonce}}},dropdownParent:g(".wrap.lifterlms.llms-builder"),escapeMarkup:function(e){return e},placeholder:t.searching_message,templateResult:t.render_result,width:"100%"}),t.$el.attr("data-post-type",t.post_type)},0),this},render_result:function(e){var t=g('<div class="llms-existing-lesson-result" />');if(e.loading)return t.append(e.text);var i=g('<aside class="llms-existing-action" />'),s=g('<div class="llms-existing-info" />');return icon="attach"===e.action?"paperclip":"clone",text="attach"===e.action?LLMS.l10n.translate("Attach"):LLMS.l10n.translate("Clone"),i.append('<i class="fa fa-'+icon+'" aria-hidden="true"></i><small>'+text+"</small>"),s.append("<h4>"+e.data.title+"</h4>"),s.append("<h5>"+LLMS.l10n.translate("ID")+": <em>"+e.data.id+"</em></h5>"),_.each(e.parents,function(e){s.append("<h5>"+e+"</em></h5>")}),t.append(i).append(s)}})}),n("Views/QuestionType",[],function(){return Backbone.View.extend({className:"llms-question-type",events:{"click .llms-add-question":"add_question"},id:function(){return"llms-question-type-"+this.model.id},tagName:"li",template:wp.template("llms-question-type-template"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model)),this},add_question:function(){this.quiz.add_question({_expanded:!0,choices:this.model.get("default_choices")?this.model.get("default_choices"):null,question_type:this.model}),this.quiz.trigger("new-question-added")}})}),n("Views/QuestionBank",["Views/QuestionType"],function(e){return Backbone.CollectionView.extend({className:"llms-question",el:"#llms-question-bank",modelView:e,selectable:!1,sortable:!1})}),n("Views/QuestionChoice",["Views/_Editable"],function(e){return Backbone.View.extend(_.defaults({className:"llms-question-choice",events:_.defaults({'change input[name="correct"]':"toggle_correct",'click .llms-action-icon[href="#llms-add-choice"]':"add_choice",'click .llms-action-icon[href="#llms-del-choice"]':"del_choice"},e.events),id:function(){return"llms-question-choice-"+this.model.id},tagName:"li",template:wp.template("llms-question-choice-template"),initialize:function(){this.render(),this.listenTo(this.model.collection,"add",this.maybe_disable_buttons),this.listenTo(this.model,"change",this.render),"image"===this.model.get("choice_type")&&this.listenTo(this.model.get("choice"),"change",this.render)},render:function(){return this.$el.html(this.template(this.model)),this},add_choice:function(e){e.stopPropagation(),e.preventDefault();var t=this.model.collection.indexOf(this.model);this.model.collection.parent.add_choice({},{at:t+1})},del_choice:function(e){e.preventDefault(),Backbone.pubSub.trigger("model-trashed",this.model),this.model.collection.remove(this.model)},toggle_correct:function(){var e=this.$el.find('input[name="correct"]').is(":checked");this.model.set("correct",e),this.model.collection.trigger("correct-update",this.model)}},e))}),n("Views/QuestionChoiceList",["Views/QuestionChoice"],function(e){return Backbone.CollectionView.extend({className:"llms-quiz-questions",modelView:e,processKeyEvents:!1,selectable:!1,sortable:!0,sortableOptions:{axis:!1,cursor:"move",handle:".llms-choice-id",items:".llms-question-choice",placeholder:"llms-question-choice llms-sortable-placeholder"},sortable_start:function(e){this.$el.addClass("dragging")},sortable_stop:function(e){this.$el.removeClass("dragging")}})}),n("Views/Question",["Views/_Editable","Views/QuestionChoiceList"],function(e,t){return Backbone.View.extend(_.defaults({className:function(){return"llms-question qtype--"+this.model.get("question_type").get("id")},events:_.defaults({"click .clone--question":"clone","click .delete--question":"delete","click .expand--question":"expand","click .collapse--question":"collapse",'change input[name="question_points"]':"update_points"},e.events),id:function(){return"llms-question-"+this.model.id},tagName:"li",template:wp.template("llms-question-template"),initialize:function(){_.each(["change:_expanded","change:menu_order"],function(e){this.listenTo(this.model,e,this.render)},this),this.listenTo(this.model.get("image"),"change",this.render),this.listenTo(this.model.get_parent(),"change:_points",this.render_points_percentage),this.on("multi_choices_toggle",this.multi_choices_toggle,this),Backbone.pubSub.on("del-question-choice",this.del_choice,this)},render:function(){if(this.$el.html(this.template(this.model)),this.model.get("question_type").get("choices")&&(this.choiceListView=new t({el:this.$el.find(".llms-question-choices"),collection:this.model.get("choices")}),this.choiceListView.render(),this.choiceListView.on("sortStart",this.choiceListView.sortable_start),this.choiceListView.on("sortStop",this.choiceListView.sortable_stop)),"group"===this.model.get("question_type").get("id")){var e=this;setTimeout(function(){e.questionListView=e.collectionListView.quiz.get_question_list({el:e.$el.find(".llms-quiz-questions"),collection:e.model.get("questions")}),e.questionListView.render(),e.questionListView.on("sortStart",e.questionListView.sortable_start),e.questionListView.on("sortStop",e.questionListView.sortable_stop)},1)}return this.model.get("description_enabled")&&this.init_editor("question-desc--"+this.model.get("id")),this.model.get("clarifications_enabled")&&this.init_editor("question-clarifications--"+this.model.get("id"),{mediaButtons:!1,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,alignleft,aligncenter,alignright",toolbar2:"",setup:_.bind(this.on_editor_ready,this)}}),this.init_formatting_els(),this.init_selects(),this},render_points_percentage:function(){this.$el.find(".llms-question-points").attr("data-tip",this.model.get_points_percentage())},clone:function(e){e.stopPropagation(),e.preventDefault(),this.model.collection.add(this._get_question_clone(this.model))},_get_question_clone:function(e){var i=_.clone(e.attributes);return delete i.id,i.parent_id=e.get("id"),i.question_type=e.get("question_type").get("id"),i.image=_.clone(e.get("image").attributes),e.get("choices")&&(i.choices=[],e.get("choices").each(function(e){var t=_.clone(e.attributes);delete t.id,delete t.question_id,i.choices.push(t)})),"group"===e.get("question_type").get("id")&&(i.questions=[],e.get("questions").each(function(e){i.questions.push(this._get_question_clone(e))},this)),i},collapse:function(){this.model.set("_expanded",!1)},delete:function(e){e.preventDefault(),window.confirm(LLMS.l10n.translate("Are you sure you want to delete this question?"))&&(this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-trashed",this.model))},expand:function(){this.model.set("_expanded",!0)},multi_choices_toggle:function(e){"yes"!==e&&this.model.get("choices").update_correct(_.first(this.model.get("choices").get_correct()))},update_points:function(){this.model.set("points",1*this.$el.find('input[name="question_points"]').val())}},e))}),n("Views/QuestionList",["Views/Question"],function(e){return Backbone.CollectionView.extend({className:"llms-quiz-questions",modelView:e,processKeyEvents:!1,selectable:!1,sortable:!0,sortableOptions:{axis:!1,connectWith:".llms-quiz-questions",cursor:"move",handle:".llms-data-stamp",items:".llms-question",placeholder:"llms-question llms-sortable-placeholder"},sortable_start:function(e){var t="group"===e.get("question_type").get("id")?".llms-editor-tab > .llms-quiz-questions":".llms-quiz-questions";g(t).addClass("dragging")},sortable_stop:function(){g(".llms-quiz-questions").removeClass("dragging")},_receive:function(e,t){if(e.stopPropagation(),t.item.hasClass("qtype--group")&&g(e.target).closest(".qtype--group").length)t.sender.sortable("cancel");else{var i=t.sender.data("view");if(i&&i.collection){var s=this._getContainerEl().children().index(t.item),n=i.collection.get(t.item.attr("data-model-cid"));i.collection.remove(n),this.collection.add(n,{at:s}),n.collection=this.collection,this.setSelectedModel(n)}}},_sortStart:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));t.placeholder.addClass("qtype--"+i.get("question_type").get("id")),this._isBackboneCourierAvailable()?this.spawn("sortStart",{modelBeingSorted:i}):this.trigger("sortStart",i)},_sortStop:function(e,t){e.stopPropagation();var i=this.collection.get(t.item.attr("data-model-cid")),s=this._getContainerEl().children().index(t.item);-1==s&&i&&this.collection.remove(i),this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:s}):this.trigger("sortStop",i,s)}})}),n("Views/Quiz",["Models/Quiz","Views/Popover","Views/PostSearch","Views/QuestionBank","Views/QuestionList","Views/SettingsFields","Views/_Detachable","Views/_Editable","Views/_Subview","Views/_Trashable"],function(e,t,i,s,n,o,l,a,r,c){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{class:o,instance:null,state:"default"},bank:{class:s,instance:null,state:"default"},list:{class:n,instance:null,state:"default"}},el:"#llms-editor-quiz",events:_.defaults({"click #llms-existing-quiz":"add_existing_quiz_click","click #llms-new-quiz":"add_new_quiz","click #llms-show-question-bank":"show_tools","click .bulk-toggle":"bulk_toggle"},l.events,a.events,c.events),tagName:"div",template:wp.template("llms-quiz-template"),initialize:function(e){this.lesson=e.lesson,"yes"!==this.lesson.get("quiz_enabled")&&_.isEmpty(this.lesson.get("quiz"))||(this.model=this.lesson.get("quiz"),this.model.set_parent(this.lesson),this.listenTo(this.model,"change:_points",this.render_points)),this.on("model-trashed",this.on_trashed)},render:function(){if(this.$el.html(this.template(this.model)),this.model){LLMS.Spinner.start(this.$el),this.render_subview("settings",{el:"#llms-quiz-settings-fields",model:this.model}),this.init_datepickers(),this.init_selects(),this.render_subview("bank",{collection:window.llms_builder.questions});var t=null,i=null;this.get_subview("bank").instance.viewManager.each(function(e){e.quiz=this.model,i=e.model.get("group").name,t!==i&&(t=i,e.$el.before('<li class="llms-question-bank-header"><h4>'+i+"</h4></li>"))},this),this.model.load_questions(_.bind(function(e){if(e)return alert(LLMS.l10n.translate("An error occurred while trying to load the questions. Please refresh the page and try again.")),this;LLMS.Spinner.stop(this.$el),this.render_subview("list",{el:"#llms-quiz-questions",collection:this.model.get("questions")});var t=this.get_subview("list").instance;t.quiz=this,t.collection.on("add",function(){t.collection.trigger("reorder")},this),t.on("sortStart",t.sortable_start),t.on("sortStop",t.sortable_stop)},this)),this.model.on("new-question-added",function(){var e=this.$el.find("#llms-quiz-questions");e.animate({scrollTop:e.prop("scrollHeight")},200)},this)}return this},render_points:function(e,t){this.$el.find("#llms-quiz-total-points").text(t)},bulk_toggle:function(e){var t="expand"===g(e.target).attr("data-action");this.model.get("questions").each(function(e){e.set("_expanded",t)})},add_new_quiz:function(){var e=this.lesson.get("quiz");_.isEmpty(e)?e=this.lesson.add_quiz():this.lesson.set("quiz_enabled","yes"),this.model=e,this.render()},add_existing_quiz:function(e){this.post_search_popover.hide();var t=e.data;"clone"===e.action?(delete t.id,_.each(t.questions,function(e){delete e.parent_id,delete e.id,e.choices&&_.each(e.choices,function(e){delete e.question_id,delete e.id})})):t._forceSync=!0,delete t.lesson_id,this.lesson.add_quiz(t),this.model=this.lesson.get("quiz"),this.render()},add_existing_quiz_click:function(e){e.preventDefault(),this.post_search_popover=new t({el:"#llms-existing-quiz",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Quiz"),content:new i({post_type:"llms_quiz",searching_message:LLMS.l10n.translate("Search for existing quizzes...")}).render().$el,onHide:function(){Backbone.pubSub.off("quiz-search-select")}}}),this.post_search_popover.show(),Backbone.pubSub.once("quiz-search-select",this.add_existing_quiz,this)},on_trashed:function(e){this.lesson.set("quiz_enabled","no"),this.lesson.set("quiz",""),delete this.model,this.render()},show_tools:function(){var e=new t({el:"#llms-show-question-bank",args:{backdrop:!0,closeable:!0,container:"#llms-builder-sidebar",dismissible:!0,placement:"top-left",width:"calc( 100% - 40px )",title:LLMS.l10n.translate("Add a Question"),url:"#llms-quiz-tools"}});e.show(),this.model.on("new-question-added",function(){e.hide()})},get_question_list:function(e){return new n(e)}},l,a,r,c,o))}),n("Views/Assignment",["Views/Popover","Views/PostSearch","Views/_Detachable","Views/_Editable","Views/_Trashable","Views/_Subview","Views/SettingsFields"],function(s,t,i,n,o,e,l){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{class:l,instance:null,state:"default"}},el:"#llms-editor-assignment",events:function(){var e=this.is_addon_available()?window.llms_builder.assignments.get_view_events():{};return _.defaults({"click #llms-existing-assignment":"add_existing_assignment_click","click #llms-new-assignment":"add_new_assignment"},i.events,n.events,o.events,e)},tagName:"div",template:wp.template("llms-assignment-template"),initialize:function(e){this.lesson=e.lesson,"yes"!==this.lesson.get("assignment_enabled")&&_.isEmpty(this.lesson.get("assignment"))||(this.model=this.lesson.get("assignment"),this.model.set_parent(this.lesson)),this.on("model-trashed",this.on_trashed)},render:function(){return this.$el.html(this.template(this.model)),this.model&&this.is_addon_available()&&(this.stopListening(this.model,"change:assignment_type",this.render),this.render_subview("settings",{el:"#llms-assignment-settings-fields",model:this.model}),this.init_selects(),window.llms_builder.assignments.render_editor(this),this.listenTo(this.model,"change:assignment_type",this.render)),this},add_new_assignment:function(){this.is_addon_available()?(this.model=window.llms_builder.assignments.get_assignment({title:LLMS.l10n.replace("%1$s Assignment",{"%1$s":this.lesson.get("title")}),lesson_id:this.lesson.get("id")}),this.lesson.set("assignment_enabled","yes"),this.lesson.set("assignment",this.model),this.render()):this.show_ad_popover("#llms-new-assignment")},add_existing_assignment:function(e){this.post_search_popover.hide();var t=e.data;"clone"===e.action?delete t.id:t._forceSync=!0,t.lesson_id=this.lesson.get("id"),t=window.llms_builder.construct.get_model("Assignment",t),this.lesson.set("assignment_enabled","yes"),this.lesson.set("assignment",t),this.model=t,this.render()},add_existing_assignment_click:function(e){e.preventDefault(),this.is_addon_available()?(this.post_search_popover=new s({el:"#llms-existing-assignment",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Assignment"),content:new t({post_type:"llms_assignment",searching_message:LLMS.l10n.translate("Search for existing assignments...")}).render().$el,onHide:function(){Backbone.pubSub.off("assignment-search-select")}}}),this.post_search_popover.show(),Backbone.pubSub.once("assignment-search-select",this.add_existing_assignment,this)):this.show_ad_popover("#llms-existing-assignment")},is_addon_available:function(){return window.llms_builder.assignments},on_trashed:function(e){this.lesson.set("assignment_enabled","no"),this.lesson.set("assignment",""),delete this.model,this.render()},show_ad_popover:function(e){var t=LLMS.l10n.translate("Get Your Students Taking Action"),i=LLMS.l10n.translate("Get Assignments Now!");this.ad_popover=new s({el:e,args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,width:380,title:LLMS.l10n.translate("Unlock LifterLMS Assignments"),content:"<h3>"+t+'</h3><p>Great learning content is only half of teaching online. When your learners fully engage, they will take your content and move into action. Remove barriers for your learners by telling them what to do to apply what they just learned. Create graded assignments or simply give them a checklist of action items to complete before moving on.</p><br><p><a class="llms-button-primary" href="https://lifterlms.com/product/lifterlms-assignments?utm_source=LifterLMS%20Plugin&utm_medium=Assignment%20Builder%20Button&utm_campaign=Assignment%20Addon%20Upsell&utm_content=3.17.0" target="_blank">'+i+"</a></p>"}}),this.ad_popover.show()}},i,n,o,e,l))}),n("Views/Editor",["Views/LessonEditor","Views/Quiz","Views/Assignment","Views/_Subview"],function(e,t,i,s){return Backbone.View.extend(_.defaults({state:"lesson",views:{lesson:{class:e,instance:null,state:"lesson"},assignment:{class:i,instance:null,state:"assignment"},quiz:{class:t,instance:null,state:"quiz"}},el:"#llms-editor",events:{'click .llms-editor-nav a[href="#llms-editor-close"]':"close_editor",'click .llms-editor-nav a:not([href="#llms-editor-close"])':"switch_tab"},tagName:"div",template:wp.template("llms-editor-template"),initialize:function(e){this.SidebarView=e.SidebarView,e.tab&&(this.state=e.tab)},render:function(e){return e=e||{},this.$el.html(this.template(this)),this.render_subviews(_.extend(e,{lesson:this.model})),this},close_editor:function(e){e.preventDefault(),Backbone.pubSub.trigger("sidebar-editor-close")},switch_tab:function(e){e.preventDefault();var t=g(e.target),i=t.attr("data-view");this.$el.find(t.attr("href"));this.set_state(i).render()}},s))}),n("Views/Elements",["Models/Section","Views/Section","Models/Lesson","Views/Lesson","Views/Popover","Views/PostSearch"],function(e,t,i,s,n,o){return Backbone.View.extend({el:"#llms-elements",events:{"click #llms-new-section":"add_new_section","click #llms-new-lesson":"add_new_lesson","click #llms-existing-lesson":"add_existing_lesson"},tagName:"div",template:wp.template("llms-elements-template"),initialize:function(e){this.SidebarView=e.SidebarView,this.listenTo(this.SidebarView.CourseView.model.get("sections"),"add",this.maybe_disable_buttons),this.listenTo(this.SidebarView.CourseView.model.get("sections"),"remove",this.maybe_disable_buttons)},render:function(){return this.$el.html(this.template()),this.draggable(),this.maybe_disable_buttons(),this},draggable:function(){g("#llms-new-section").draggable({appendTo:"#llms-sections",cancel:!1,connectToSortable:".llms-sections",helper:function(){return new t({model:new e}).render().$el},start:function(){g(".llms-sections").addClass("dragging")},stop:function(){g(".llms-sections").removeClass("dragging")}}),g("#llms-new-lesson").draggable({appendTo:"#llms-sections",cancel:!1,connectToSortable:".llms-lessons",helper:function(){return new s({model:new i}).render().$el},start:function(){g(".llms-lessons").addClass("dragging")},stop:function(){g(".llms-lessons").removeClass("dragging"),g(".drag-expanded").removeClass(".drag-expanded")}})},add_new_section:function(e){e.preventDefault(),Backbone.pubSub.trigger("add-new-section")},add_new_lesson:function(e){e.preventDefault(),Backbone.pubSub.trigger("add-new-lesson")},add_existing_lesson:function(e){e.preventDefault();var t=new n({el:"#llms-existing-lesson",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Lesson"),content:new o({post_type:"lesson",searching_message:LLMS.l10n.translate("Search for existing lessons...")}).render().$el}});t.show(),Backbone.pubSub.on("lesson-search-select",function(){t.hide()})},maybe_disable_buttons:function(){var e=g("#llms-new-lesson, #llms-existing-lesson");this.SidebarView.CourseView.model.get("sections").length?e.removeAttr("disabled"):e.attr("disabled","disabled")}})}),n("Views/Utilities",[],function(){return Backbone.View.extend({el:"#llms-utilities",events:{"click #llms-collapse-all":"collapse_all","click #llms-expand-all":"expand_all"},tagName:"div",template:wp.template("llms-utilities-template"),initialize:function(){},render:function(){return this.$el.html(this.template()),this},collapse_all:function(e){e.preventDefault(),Backbone.pubSub.trigger("collapse-all")},expand_all:function(e){e.preventDefault(),Backbone.pubSub.trigger("expand-all")}})}),n("Views/Sidebar",["Views/Editor","Views/Elements","Views/Utilities","Views/_Subview"],function(e,t,i,s){return Backbone.View.extend(_.defaults({state:"builder",views:{elements:{class:t,instance:null,state:"builder"},utilities:{class:i,instance:null,state:"builder"},editor:{class:e,instance:null,state:"editor"}},el:"#llms-builder-sidebar",events:{"click #llms-save-button":"save_now","click #llms-exit-button":"exit_now","click .llms-builder-error":"clear_errors"},tagName:"aside",template:wp.template("llms-sidebar-template"),initialize:function(e){this.CourseView=e.CourseView,this.render(),Backbone.pubSub.on("current-save-status",this.changes_made,this),Backbone.pubSub.on("heartbeat-send",this.heartbeat_send,this),Backbone.pubSub.on("heartbeat-tick",this.heartbeat_tick,this),Backbone.pubSub.on("lesson-selected",this.on_lesson_select,this),Backbone.pubSub.on("sidebar-editor-close",this.on_editor_close,this),this.$saveButton=g("#llms-save-button")},render:function(e){e=e||{},this.$el.html(this.template()),this.render_subviews(_.extend(e,{SidebarView:this}));var t=g(".wrap.lifterlms.llms-builder");return"builder"===this.state?t.removeClass("editor-active"):t.addClass("editor-active"),this.$saveButton=this.$el.find("#llms-save-button"),this},add_error:function(e){this.$el.find(".llms-builder-save").prepend(e)},clear_errors:function(){this.$el.find(".llms-builder-save .llms-builder-error").remove()},changes_made:function(e){e.saving||(e.has_unsaved_changes?(this.$saveButton.attr("data-status","unsaved"),this.$saveButton.removeAttr("disabled")):(this.$saveButton.attr("data-status","saved"),this.$saveButton.attr("disabled","disabled")))},exit_now:function(){window.location.href=window.llms_builder.CourseModel.get_edit_post_link()},heartbeat_send:function(e){e.saving&&(LLMS.Spinner.start(this.$saveButton.find("i"),"small"),this.$saveButton.attr({"data-status":"saving",disabled:"disabled"}))},heartbeat_tick:function(e,t){if(!e.saving){var i="saved";if(this.clear_errors(),"error"===t.status){i="error";var s=t.message,n=g('<ol class="llms-builder-error" />');"object"==typeof s?_.each(s,function(e){n.append("<li>"+e+"</li>")}):n=n.append("<li>"+s+"</li>"),this.add_error(n)}this.$saveButton.find(".llms-spinning").remove(),this.$saveButton.attr({"data-status":i,disabled:"disabled"})}},is_editor_active:function(){return"editor"===this.state},on_editor_close:function(){this.set_state("builder").render()},on_lesson_select:function(e,t){"editor"!==this.state?this.set_state("editor"):this.remove_subview("editor"),this.render({model:e,tab:t})},save_now:function(){window.llms_builder.sync.save_now()}},s))}),t(["vendor/backbone.collectionView","vendor/backbone.trackit","Controllers/Construct","Controllers/Debug","Controllers/Schemas","Controllers/Sync","Models/loader","Views/Course","Views/Sidebar"],function(e,t,i,s,n,o,l,a,r){function c(e,t){return _.isArray(t)&&-1!==t.indexOf(e)||e==t}window.llms_builder.debug=new s(window.llms_builder.debug),window.llms_builder.construct=new i,window.llms_builder.schemas=new n(window.llms_builder.schemas),_.mixin({checked:function(e,t){return c(e,t)?' checked="checked"':""},deepClone:function(e){var i=_.clone(e);return _.each(i,function(e,t){!_.isFunction(e)&&_.isObject(e)&&(i[t]=_.deepClone(e))}),i},selected:function(e,t){return c(e,t)?' selected="selected"':""},stripFormatting:function(e,t){t||(t=["b","i","u","strong","em"]);var i=g("<div>"+e+"</div>");return i.find("*").not(t.join(",")).each(function(){g(this).replaceWith(this.innerHTML)}),i.html()}}),Backbone.pubSub=_.extend({},Backbone.Events),g(document).trigger("llms-builder-pre-init"),window.llms_builder.questions=window.llms_builder.construct.get_collection("QuestionTypes",window.llms_builder.questions);var d=window.llms_builder.construct.get_model("Course",window.llms_builder.course);window.llms_builder.CourseModel=d,window.llms_builder.sync=new o(d,window.llms_builder.sync);var u=new a({model:d}),h=new r({CourseView:u});g(document).trigger("llms-builder-init",{course:u,sidebar:h})}),n("main",function(){})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxsbXMtYnVpbGRlci5qcyJdLCJuYW1lcyI6WyIkIiwicmVxdWlyZWpzIiwicmVxdWlyZSIsImRlZmluZSIsInJvb3QiLCJmYWN0b3J5IiwidW5zYXZlZE1vZGVscyIsImdldFByb21wdCIsInVuZGVmIiwibWFpbiIsInJlcSIsIm1ha2VNYXAiLCJoYW5kbGVycyIsImRlZmluZWQiLCJ3YWl0aW5nIiwiY29uZmlnIiwiZGVmaW5pbmciLCJoYXNPd24iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImFwcyIsInNsaWNlIiwianNTdWZmaXhSZWdFeHAiLCJoYXNQcm9wIiwib2JqIiwicHJvcCIsImNhbGwiLCJub3JtYWxpemUiLCJuYW1lIiwiYmFzZU5hbWUiLCJuYW1lUGFydHMiLCJuYW1lU2VnbWVudCIsIm1hcFZhbHVlIiwiZm91bmRNYXAiLCJsYXN0SW5kZXgiLCJmb3VuZEkiLCJmb3VuZFN0YXJNYXAiLCJzdGFySSIsImkiLCJqIiwicGFydCIsImJhc2VQYXJ0cyIsInNwbGl0IiwibWFwIiwic3Rhck1hcCIsImxlbmd0aCIsIm5vZGVJZENvbXBhdCIsInRlc3QiLCJyZXBsYWNlIiwiY2hhckF0IiwiY29uY2F0Iiwic3BsaWNlIiwiam9pbiIsIm1ha2VSZXF1aXJlIiwicmVsTmFtZSIsImZvcmNlU3luYyIsImFyZ3MiLCJhcmd1bWVudHMiLCJwdXNoIiwiYXBwbHkiLCJtYWtlTG9hZCIsImRlcE5hbWUiLCJ2YWx1ZSIsImNhbGxEZXAiLCJFcnJvciIsInNwbGl0UHJlZml4IiwicHJlZml4IiwiaW5kZXgiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwibWFrZVJlbFBhcnRzIiwicmVsUGFydHMiLCJwbHVnaW4iLCJwYXJ0cyIsInJlbFJlc291cmNlTmFtZSIsImYiLCJuIiwicHIiLCJwIiwiZXhwb3J0cyIsImUiLCJtb2R1bGUiLCJpZCIsInVyaSIsImRlcHMiLCJjYWxsYmFjayIsImNqc01vZHVsZSIsInJldCIsInVzaW5nRXhwb3J0cyIsImNhbGxiYWNrVHlwZSIsImxvYWQiLCJ1bmRlZmluZWQiLCJhbHQiLCJzZXRUaW1lb3V0IiwiY2ZnIiwiX2RlZmluZWQiLCJhbWQiLCJqUXVlcnkiLCJfIiwiQmFja2JvbmUiLCJ0aGlzIiwibURlZmF1bHRNb2RlbFZpZXdDb25zdHJ1Y3RvciIsIlZpZXciLCJrRGVmYXVsdFJlZmVyZW5jZUJ5Iiwia09wdGlvbnNSZXF1aXJpbmdSZXJlbmRlcmluZyIsImtTdHlsZXNGb3JFbXB0eUxpc3RDYXB0aW9uIiwiYmFja2dyb3VuZCIsImJvcmRlciIsImJveC1zaGFkb3ciLCJfbm9ybWFsaXplT3B0aW9uRGVjbGFyYXRpb25zIiwib3B0aW9uRGVjbGFyYXRpb25zIiwibm9ybWFsaXplZE9wdGlvbkRlY2xhcmF0aW9ucyIsImlzQXJyYXkiLCJlYWNoIiwidGhpc09wdGlvbkRlY2xhcmF0aW9uIiwidGhpc09wdGlvbk5hbWUiLCJ0aGlzT3B0aW9uUmVxdWlyZWQiLCJ0aGlzT3B0aW9uRGVmYXVsdFZhbHVlIiwiaXNTdHJpbmciLCJpc09iamVjdCIsImZpcnN0Iiwia2V5cyIsImlzRnVuY3Rpb24iLCJjbG9uZSIsInJlcXVpcmVkIiwiaXNVbmRlZmluZWQiLCJkZWZhdWx0VmFsdWUiLCJDb2xsZWN0aW9uVmlldyIsImV4dGVuZCIsInRhZ05hbWUiLCJldmVudHMiLCJtb3VzZWRvd24gPiBsaSwgdGJvZHkgPiB0ciA+IHRkIiwiZGJsY2xpY2sgPiBsaSwgdGJvZHkgPiB0ciA+IHRkIiwiY2xpY2siLCJjbGljayB1bC5jb2xsZWN0aW9uLXZpZXcsIHRhYmxlLmNvbGxlY3Rpb24tdmlldyIsImtleWRvd24iLCJzcGF3bk1lc3NhZ2VzIiwiZm9jdXMiLCJwYXNzTWVzc2FnZXMiLCIqIiwiaW5pdGlhbGl6YXRpb25PcHRpb25zIiwiY29sbGVjdGlvbiIsIm1vZGVsVmlldyIsIm1vZGVsVmlld09wdGlvbnMiLCJpdGVtVGVtcGxhdGUiLCJpdGVtVGVtcGxhdGVGdW5jdGlvbiIsInNlbGVjdGFibGUiLCJjbGlja1RvU2VsZWN0Iiwic2VsZWN0YWJsZU1vZGVsc0ZpbHRlciIsInZpc2libGVNb2RlbHNGaWx0ZXIiLCJzb3J0YWJsZU1vZGVsc0ZpbHRlciIsInNlbGVjdE11bHRpcGxlIiwiY2xpY2tUb1RvZ2dsZSIsInByb2Nlc3NLZXlFdmVudHMiLCJzb3J0YWJsZSIsInNvcnRhYmxlT3B0aW9ucyIsInJldXNlTW9kZWxWaWV3cyIsImRldGFjaGVkUmVuZGVyaW5nIiwiZW1wdHlMaXN0Q2FwdGlvbiIsImluaXRpYWxpemUiLCJvcHRpb25zIiwiVmlld09wdGlvbnMiLCJhZGQiLCJzZXRPcHRpb25zIiwiQ29sbGVjdGlvbiIsIl9oYXNCZWVuUmVuZGVyZWQiLCJfaXNCYWNrYm9uZUNvdXJpZXJBdmFpbGFibGUiLCJDb3VyaWVyIiwiJGVsIiwiZGF0YSIsImFkZENsYXNzIiwiYXR0ciIsInNlbGVjdGVkSXRlbXMiLCJfdXBkYXRlSXRlbVRlbXBsYXRlIiwiX3JlZ2lzdGVyQ29sbGVjdGlvbkV2ZW50cyIsInZpZXdNYW5hZ2VyIiwiQ2hpbGRWaWV3Q29udGFpbmVyIiwiX29uT3B0aW9uc0NoYW5nZWQiLCJjaGFuZ2VkT3B0aW9ucyIsIm9yaWdpbmFsT3B0aW9ucyIsIl90aGlzIiwicmVyZW5kZXIiLCJjaGFuZ2VkT3B0aW9uS2V5IiwibmV3VmFsIiwib2xkVmFsIiwic3RvcExpc3RlbmluZyIsInNldFNlbGVjdGVkTW9kZWwiLCJieSIsInNldFNlbGVjdGVkTW9kZWxzIiwicmVtb3ZlQXR0ciIsIl9zZXR1cFNvcnRhYmxlIiwicmVhcHBseUZpbHRlciIsInZpZXciLCJyZW1vdmUiLCJjb250YWlucyIsInJlbmRlciIsInNldE9wdGlvbiIsIm9wdGlvbk5hbWUiLCJvcHRpb25WYWx1ZSIsIm9wdGlvbkhhc2giLCJnZXRTZWxlY3RlZE1vZGVsIiwiZ2V0U2VsZWN0ZWRNb2RlbHMiLCJyZWZlcmVuY2VCeSIsIml0ZW1zIiwiaXRlbSIsImdldCIsImN1ckxpbmVOdW1iZXIiLCJfZ2V0VmlzaWJsZUl0ZW1FbHMiLCJpcyIsImZpbmRCeU1vZGVsIiwibmV3U2VsZWN0ZWRJdGVtcyIsInNpbGVudCIsIm5ld1NlbGVjdGVkQ2lkcyIsInRoaXNNb2RlbCIsImNpZCIsInBsdWNrIiwibW9kZWwiLCJ0aGlzSXRlbUVsIiwib2xkU2VsZWN0ZWRNb2RlbHMiLCJvbGRTZWxlY3RlZENpZHMiLCJfY29udmVydFN0cmluZ3NUb0ludHMiLCJfdmFsaWRhdGVTZWxlY3Rpb24iLCJuZXdTZWxlY3RlZE1vZGVscyIsIl9jb250YWluU2FtZUVsZW1lbnRzIiwiX2FkZFNlbGVjdGVkQ2xhc3NUb1NlbGVjdGVkSXRlbXMiLCJzcGF3biIsInNlbGVjdGVkTW9kZWxzIiwidHJpZ2dlciIsInVwZGF0ZURlcGVuZGVudENvbnRyb2xzIiwibmV3U2VsZWN0ZWRJdGVtIiwiZ2V0VmlldyIsInJlZmVyZW5jZSIsIml0ZW1FbGVtZW50cyIsIm1vZGVsVmlld0NvbnRhaW5lckVsIiwiX3NhdmVTZWxlY3Rpb24iLCJfZ2V0Q29udGFpbmVyRWwiLCJmcmFnbWVudENvbnRhaW5lciIsIm9sZFZpZXdNYW5hZ2VyIiwidGhpc01vZGVsVmlldyIsImRldGFjaCIsImVtcHR5IiwiZG9jdW1lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZmluZEJ5TW9kZWxDaWQiLCJfY3JlYXRlTmV3TW9kZWxWaWV3IiwiX2dldE1vZGVsVmlld09wdGlvbnMiLCJfaW5zZXJ0QW5kUmVuZGVyTW9kZWxWaWV3IiwiYXBwZW5kIiwiX3Nob3dFbXB0eUxpc3RDYXB0aW9uSWZBcHByb3ByaWF0ZSIsIl9yZXN0b3JlU2VsZWN0aW9uIiwiZm9yY2VSZXJlbmRlck9uTmV4dFNvcnRFdmVudCIsIl9yZW1vdmVFbXB0eUxpc3RDYXB0aW9uIiwiZW1wdHlMaXN0U3RyaW5nIiwiJGVtcHR5TGlzdENhcHRpb25FbCIsIiR2YXJFbCIsIl9pc1JlbmRlcmVkQXNMaXN0Iiwid3JhcEFsbCIsInBhcmVudCIsImNzcyIsImZpbmQiLCJwYXJlbnRFbE9yRG9jdW1lbnRGcmFnbWVudCIsImF0SW5kZXgiLCJ0aGlzTW9kZWxWaWV3V3JhcHBlZCIsIl93cmFwTW9kZWxWaWV3Iiwibm9kZVR5cGUiLCJhcHBlbmRDaGlsZCIsIm51bWJlck9mTW9kZWxWaWV3c0N1cnJlbnRseUluRE9NIiwiY2hpbGRyZW4iLCJlcSIsImJlZm9yZSIsImhpZGUiLCJoaWRlVGhpc01vZGVsVmlldyIsInRvZ2dsZSIsInRvZ2dsZUNsYXNzIiwid2hpY2hGaWx0ZXIiLCJub3RWaXNpYmxlIiwiX21vZGVsVmlld0hhc1dyYXBwZXJMSSIsImNsb3Nlc3QiLCJub3RTb3J0YWJsZSIsIm5vdFNlbGVjdGFibGUiLCJfcmVtb3ZlTW9kZWxWaWV3IiwiX3ZhbGlkYXRlU2VsZWN0aW9uQW5kUmVuZGVyIiwibGlzdGVuVG8iLCJfaXNSZW5kZXJlZEFzVGFibGUiLCJ0Ym9keSIsIl9nZXRDbGlja2VkSXRlbUlkIiwidGhlRXZlbnQiLCJjbGlja2VkSXRlbUlkIiwiY2xpY2tlZEl0ZW1FbCIsImN1cnJlbnRUYXJnZXQiLCJjbGlja2VkSXRlbSIsImlzTnVtZXJpYyIsInBhcnNlSW50IiwiaXRlbVRlbXBsYXRlSHRtbCIsImh0bWwiLCJ0ZW1wbGF0ZSIsIm1vZGVsUmVmZXJlbmNlSWRzIiwibW9kZWxzIiwiaW50ZXJzZWN0aW9uIiwiZmlsdGVyIiwidGhpc0l0ZW1JZCIsInNhdmVkU2VsZWN0aW9uIiwib2Zmc2V0Iiwib2xkSXRlbXNJZHNXaXRoU2VsZWN0ZWRDbGFzcyIsIml0ZW1zSWRzRnJvbVdoaWNoU2VsZWN0ZWRDbGFzc05lZWRzVG9CZVJlbW92ZWQiLCJ3aXRob3V0IiwicmVtb3ZlQ2xhc3MiLCJpdGVtc0lkc0Zyb21XaGljaFNlbGVjdGVkQ2xhc3NOZWVkc1RvQmVBZGRlZCIsIl9yZW9yZGVyQ29sbGVjdGlvbkJhc2VkT25IVE1MIiwidGhpc01vZGVsQ2lkIiwic29ydCIsImNvbXBhcmF0b3IiLCJfZ2V0TW9kZWxWaWV3Q29uc3RydWN0b3IiLCJtb2RlbFZpZXdDb25zdHJ1Y3RvciIsIm5ld01vZGVsVmlldyIsImNvbGxlY3Rpb25MaXN0VmlldyIsImNvbGxlY3Rpb25WaWV3IiwibW9kZWxWaWV3V3JhcHBlckVsIiwidGhlQXJyYXkiLCJ0aGlzRWwiLCJ0aGlzRWxBc051bWJlciIsImFycmF5QSIsImFycmF5QiIsInRvTG93ZXJDYXNlIiwiX2NoYXJDb2RlcyIsInVwQXJyb3ciLCJkb3duQXJyb3ciLCJheGlzIiwiZGlzdGFuY2UiLCJmb3JjZVBsYWNlaG9sZGVyU2l6ZSIsInN0YXJ0IiwiYmluZCIsIl9zb3J0U3RhcnQiLCJjaGFuZ2UiLCJfc29ydENoYW5nZSIsInN0b3AiLCJfc29ydFN0b3AiLCJyZWNlaXZlIiwiX3JlY2VpdmUiLCJvdmVyIiwiX292ZXIiLCJyZXN1bHQiLCJldmVudCIsInVpIiwibW9kZWxCZWluZ1NvcnRlZCIsIm5ld0luZGV4Iiwic2VuZGVyQ29sbGVjdGlvbkxpc3RWaWV3Iiwic2VuZGVyIiwibW9kZWxSZWNlaXZlZCIsImF0IiwiX29uS2V5ZG93biIsInRyYXAiLCJjdXJyZW50T2Zmc2V0Iiwid2hpY2giLCJfbGlzdEl0ZW1fb25Nb3VzZWRvd24iLCJjbGlja2VkTW9kZWwiLCJtZXRhS2V5UHJlc3NlZCIsImN0cmxLZXkiLCJtZXRhS2V5IiwidGhpc01ldGhvZCIsInNoaWZ0S2V5IiwiZmlyc3RTZWxlY3RlZEl0ZW1JbmRleCIsInRoaXNJdGVtTW9kZWwiLCJjbGlja2VkSXRlbUluZGV4Iiwic2hpZnRLZXlSb290U2VsZWN0ZWRJdGVtSW5kZXgiLCJtaW5TZWxlY3RlZEl0ZW1JbmRleCIsIk1hdGgiLCJtaW4iLCJtYXhTZWxlY3RlZEl0ZW1JbmRleCIsIm1heCIsInRoaXNJbmRleCIsInNlbGVjdGlvbiIsIndpbmRvdyIsImdldFNlbGVjdGlvbiIsInNlbCIsInJlbW92ZUFsbFJhbmdlcyIsInVuaW9uIiwiX2xpc3RJdGVtX29uRG91YmxlQ2xpY2siLCJfbGlzdEJhY2tncm91bmRfb25DbGljayIsInRhcmdldCIsInNldERlZmF1bHRNb2RlbFZpZXdDb25zdHJ1Y3RvciIsInRoZUNvbnN0cnVjdG9yIiwib3B0aW9uc0RlY2xhcmF0aW9uc1Byb3BlcnR5Iiwib3B0aW9uc1RoYXRXZXJlQ2hhbmdlZCIsIm9wdGlvbnNUaGF0V2VyZUNoYW5nZWRQcmV2aW91c1ZhbHVlcyIsInRoaXNPcHRpb25Qcm9wZXJ0aWVzIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsIm9uT3B0aW9uc0NoYW5nZWQiLCJnZXRPcHRpb25zIiwib3B0aW9uc05hbWVzIiwicGljayIsIkNvbnRhaW5lciIsInZpZXdzIiwiX3ZpZXdzIiwiX2luZGV4QnlNb2RlbCIsIl9pbmRleEJ5Q3VzdG9tIiwiX3VwZGF0ZUxlbmd0aCIsImN1c3RvbUluZGV4Iiwidmlld0NpZCIsIm1vZGVsQ2lkIiwiZmluZEJ5Q2lkIiwiZmluZEJ5Q3VzdG9tIiwiZmluZEJ5SW5kZXgiLCJ2YWx1ZXMiLCJmaW5kSW5kZXhCeUNpZCIsImFueSIsImtleSIsIm1ldGhvZCIsInRhaWwiLCJzaXplIiwidG9BcnJheSIsIlplcHRvIiwiZm5OYW1lIiwicHJvbXB0IiwicmVzdCIsImZuIiwiX3Vuc2F2ZWRDb25maWciLCJpc0Jvb2xlYW4iLCJIaXN0b3J5IiwibmF2aWdhdGUiLCJ3cmFwIiwib2xkTmF2IiwiZnJhZ21lbnQiLCJjb25maXJtIiwib25iZWZvcmV1bmxvYWQiLCJNb2RlbCIsInVuc2F2ZWQiLCJfdHJhY2tpbmdDaGFuZ2VzIiwiX29yaWdpbmFsQXR0cnMiLCJfdW5zYXZlZENoYW5nZXMiLCJzdGFydFRyYWNraW5nIiwidW5sb2FkUm91dGVyUHJvbXB0IiwidW5sb2FkV2luZG93UHJvbXB0IiwiX3Jlc2V0VHJhY2tpbmciLCJfdHJpZ2dlclVuc2F2ZWRDaGFuZ2VzIiwic3RvcFRyYWNraW5nIiwicmVzdGFydFRyYWNraW5nIiwicmVzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInVuc2F2ZWRBdHRyaWJ1dGVzIiwiYXR0cnMiLCJpc0VtcHR5IiwidmFsIiwiY2hhbmdlZCIsIm9sZCIsImlzRXF1YWwiLCJtIiwiZmluZFdoZXJlIiwic2V0Iiwib2xkU2V0Iiwic3luYyIsIm9sZFN5bmMiLCJzdWNjZXNzIiwib2xkU3VjY2VzcyIsInRleHRTdGF0dXMiLCJqcVhIUiIsImRlZmF1bHRzIiwiZW5hYmxlZCIsInNyYyIsInJlbGF0aW9uc2hpcF9kZWZhdWx0cyIsInJlbGF0aW9uc2hpcHMiLCJpbml0X3JlbGF0aW9uc2hpcHMiLCJyZWxzIiwiZ2V0X3JlbGF0aW9uc2hpcHMiLCJzZXRfcGFyZW50IiwiY2hpbGRfZGF0YSIsImNoaWxkX2tleSIsImNvbmRpdGlvbmFsIiwiY2hpbGQiLCJjaGlsZF92YWwiLCJsb29rdXAiLCJ0eXBlIiwibGxtc19idWlsZGVyIiwiY29uc3RydWN0IiwiZ2V0X21vZGVsIiwiY2xhc3MiLCJnZXRfY29sbGVjdGlvbiIsIl9tYXliZV9zZXRfcGFyZW50X3JlZmVyZW5jZSIsImNoaWxkX21vZGVsIiwiZ2V0X2NoaWxkX3Byb3BzIiwicHJvcHMiLCJnZXRfcGFyZW50IiwiSW1hZ2UiLCJSZWxhdGlvbnNoaXBzIiwiY2hvaWNlIiwidW5pcXVlSWQiLCJjaG9pY2VfdHlwZSIsImNvcnJlY3QiLCJtYXJrZXIiLCJxdWVzdGlvbl9pZCIsImdldF90cmFzaF9pZCIsImlzX3NlbGVjdGFibGUiLCJnZXRfY2hvaWNlX3NlbGVjdGFibGUiLCJvbiIsInVwZGF0ZV9vcmRlciIsInVwZGF0ZV9jb3JyZWN0IiwiY291bnRfY29ycmVjdCIsImdldF9jb3JyZWN0Iiwic2libGluZ3MiLCJxdWVzdGlvbiIsInNlbGYiLCJnZXRfY2hvaWNlX21hcmtlcnMiLCJjaG9pY2VzIiwiY2xhcmlmaWNhdGlvbnMiLCJkZWZhdWx0X2Nob2ljZXMiLCJkZXNjcmlwdGlvbiIsImljb24iLCJpbWFnZSIsImtleXdvcmRzIiwicGxhY2Vob2xkZXIiLCJwb2ludHMiLCJ2aWRlbyIsImdldF9rZXl3b3JkcyIsIl9nZXRfY2hvaWNlX29wdGlvbiIsImdldF9jaG9pY2VfdHlwZSIsImdldF9taW5fY2hvaWNlcyIsImdldF9tYXhfY2hvaWNlcyIsImdldF9tdWx0aV9jaG9pY2VzIiwib3B0aW9uIiwiUXVlc3Rpb25zIiwiUXVlc3Rpb25DaG9pY2VzIiwiUXVlc3Rpb25UeXBlIiwicXVlc3Rpb25zIiwicXVlc3Rpb25fdHlwZSIsImNvbnRlbnQiLCJkZXNjcmlwdGlvbl9lbmFibGVkIiwibXVsdGlfY2hvaWNlcyIsIm1lbnVfb3JkZXIiLCJwYXJlbnRfaWQiLCJ0aXRsZSIsInZpZGVvX2VuYWJsZWQiLCJ2aWRlb19zcmMiLCJfZXhwYW5kZWQiLCJfZW5zdXJlX21pbl9jaG9pY2VzIiwiZGVsYXkiLCJ1cGRhdGVfcG9pbnRzIiwiYWRkX2Nob2ljZSIsInB1YlN1YiIsImJlZm9yZV9zYXZlIiwiYXR0cyIsInN5bmNfdHlwZSIsImdldF90eXBlX2luZGV4IiwiY3Vycl90eXBlIiwiZ2V0X3R5cGVfaXRlcmF0b3IiLCJnZXRfcWlkIiwiZ2V0X3BhcmVudF9xdWVzdGlvbiIsImlzX2luX2dyb3VwIiwiZ2V0X3BhcmVudF9xdWl6IiwiZ2V0X3BvaW50cyIsImdldF9wb2ludHNfcGVyY2VudGFnZSIsInRvdGFsIiwidG9GaXhlZCIsInVwZGF0ZV9wYXJlbnQiLCJmaWVsZHMiLCJnZXRfZWRpdF9wb3N0X2xpbmsiLCJoYXNfdGVtcF9pZCIsImFkbWluX3VybCIsImdldF9zZXR0aW5nc19maWVsZHMiLCJzY2hlbWEiLCJzY2hlbWFzIiwiaXNOdW1iZXIiLCJpbml0X2N1c3RvbV9zY2hlbWEiLCJncm91cHMiLCJncm91cCIsImZsYXR0ZW4iLCJmaWVsZCIsImF0dHJpYnV0ZSIsImN1c3RvbXMiLCJzd2l0Y2hfYXR0cmlidXRlIiwiYXR0cmlidXRlX3ByZWZpeCIsImRlZmF1bHQiLCJMTE1TIiwibDEwbiIsInRyYW5zbGF0ZSIsInRvZ2dsZWFibGUiLCJsYWJlbCIsInRpcCIsIkxlc3NvbiIsIlF1ZXN0aW9uIiwiVXRpbGl0aWVzIiwiUXVpelNjaGVtYSIsImxlc3Nvbl9pZCIsInN0YXR1cyIsImFsbG93ZWRfYXR0ZW1wdHMiLCJsaW1pdF9hdHRlbXB0cyIsImxpbWl0X3RpbWUiLCJwYXNzaW5nX3BlcmNlbnQiLCJyYW5kb21fYW5zd2VycyIsInRpbWVfbGltaXQiLCJzaG93X2NvcnJlY3RfYW5zd2VyIiwiX3BvaW50cyIsInBlcm1hbGluayIsIl9zaG93X3NldHRpbmdzIiwiX3F1ZXN0aW9uc19sb2FkZWQiLCJnZXRfdG90YWxfcG9pbnRzIiwiYWRkX3F1ZXN0aW9uIiwiZ2V0X2wxMG5fdHlwZSIsInBsdXJhbCIsImxvYWRfcXVlc3Rpb25zIiwiY2IiLCJBamF4IiwiYWN0aW9uIiwiYWN0aW9uX3R5cGUiLCJjb3Vyc2VfaWQiLCJDb3Vyc2VNb2RlbCIsImxvYWRfaWQiLCJlcnJvciIsInhociIsImNvbnNvbGUiLCJsb2ciLCJkZWJ1ZyIsInJlcyIsImNvbmRpdGlvbiIsImFzc2lnbm1lbnRzIiwiaXNfZmlyc3RfaW5fY291cnNlIiwiZ2V0X2F2YWlsYWJsZV9wcmVyZXFfb3B0aW9ucyIsImdldF9jb3Vyc2UiLCJkYXRlX2Zvcm1hdCIsInRpbWVwaWNrZXIiLCJkYXRlcGlja2VyIiwiUXVpeiIsIkxlc3NvblNjaGVtYSIsInBhcmVudHMiLCJxdWl6Iiwib3JkZXIiLCJwYXJlbnRfY291cnNlIiwiY291cnNlIiwicGFyZW50X3NlY3Rpb24iLCJlZGl0X3VybCIsInZpZXdfdXJsIiwiYXVkaW9fZW1iZWQiLCJoYXNfcHJlcmVxdWlzaXRlIiwicmVxdWlyZV9wYXNzaW5nX2dyYWRlIiwicmVxdWlyZV9hc3NpZ25tZW50X3Bhc3NpbmdfZ3JhZGUiLCJ2aWRlb19lbWJlZCIsImZyZWVfbGVzc29uIiwiYXNzaWdubWVudCIsImFzc2lnbm1lbnRfZW5hYmxlZCIsInF1aXpfZW5hYmxlZCIsIl9mb3JjZVN5bmMiLCJtYXliZV9pbml0X2Fzc2lnbm1lbnRzIiwicGFyZW50X3NlY3Rpb25faW5kZXgiLCJsZXNzb25faW5kZXhfaW5fc2VjdGlvbiIsInNlY3Rpb24iLCJjdXJyX3NlY19pbmRleCIsIiUxJGQiLCIlMiRzIiwibGVzc29uIiwiY3Vycl9sZXNfaW5kZXgiLCJhZGRfcXVpeiIsIiUxJHMiLCJvbl9yZW9yZGVyIiwidmFsaWRhdGVfcHJlcmVxcyIsInByZXJlcXVpc2l0ZSIsIkxlc3NvbnMiLCJsZXNzb25zIiwiX3NlbGVjdGVkIiwiYWRkX2xlc3NvbiIsImdldF9uZXh0IiwiY2lyY3VsYXIiLCJfZ2V0X3NpYmxpbmciLCJnZXRfcHJldiIsImRpcmVjdGlvbiIsInNpYmxpbmdfaW5kZXgiLCJsYXN0IiwiUXVlc3Rpb25UeXBlcyIsIlNlY3Rpb25zIiwic2VjdGlvbnMiLCJhZGRfc2VjdGlvbiIsImFkZF9leGlzdGluZ19sZXNzb24iLCJnZXRfc2VsZWN0ZWRfc2VjdGlvbiIsInNlbGVjdGVkIiwiQWJzdHJhY3QiLCJDb3Vyc2UiLCJRdWVzdGlvbkNob2ljZSIsIlNlY3Rpb24iLCJjbGljayBhW2hyZWY9XCIjbGxtcy1kZXRhY2gtbW9kZWxcIl0iLCJkZXRhY2hfbW9kZWwiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIm1zZyIsIiVzIiwibWVkaWFfbGliIiwiY2xpY2sgLmxsbXMtYWRkLWltYWdlIiwiY2xpY2sgYVtocmVmPVwiI2xsbXMtZWRpdC1zbHVnXCJdIiwiY2xpY2sgYVtocmVmPVwiI2xsbXMtcmVtb3ZlLWltYWdlXCJdIiwiY2hhbmdlIC5sbG1zLWVkaXRhYmxlLXNlbGVjdCBzZWxlY3QiLCJjaGFuZ2UgLmxsbXMtc3dpdGNoIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSIsImNoYW5nZSAubGxtcy1lZGl0YWJsZS1yYWRpbyBpbnB1dCIsImZvY3VzaW4gLmxsbXMtaW5wdXQiLCJmb2N1c291dCAubGxtcy1pbnB1dCIsImtleWRvd24gLmxsbXMtaW5wdXQiLCJpbnB1dCAubGxtcy1pbnB1dFt0eXBlPVwibnVtYmVyXCJdIiwicGFzdGUgLmxsbXMtaW5wdXRbZGF0YS1mb3JtYXR0aW5nXSIsImdldF9hbGxvd2VkX3RhZ3MiLCJ0YWciLCJ0cmltIiwiZ2V0X2NvbnRlbnQiLCJoYXNDbGFzcyIsInN0cmlwRm9ybWF0dGluZyIsInRleHQiLCJoYXNfY2hhbmdlZCIsImlzX3ZhbGlkIiwiX3ZhbGlkYXRlX3VybCIsInNsdWciLCJiZWZvcmVTZW5kIiwiU3Bpbm5lciIsInIiLCJpbml0X2RhdGVwaWNrZXJzIiwiZGF0ZXRpbWVwaWNrZXIiLCJmb3JtYXQiLCJvbkNsb3NlIiwiY3VycmVudF90aW1lIiwiJGlucHV0IiwiYmx1ciIsImluaXRfZm9ybWF0dGluZ19lbHMiLCJmb3JtYXR0aW5nIiwiZWQiLCJRdWlsbCIsIm1vZHVsZXMiLCJ0b29sYmFyIiwia2V5Ym9hcmQiLCJiaW5kaW5ncyIsInRhYiIsImhhbmRsZXIiLCJyYW5nZSIsImNvbnRleHQiLCIxMyIsInRoZW1lIiwiZGVsdGEiLCJvbGREZWx0YSIsInNvdXJjZSIsImluaXRfc2VsZWN0cyIsImxsbXNTZWxlY3QyIiwid2lkdGgiLCJvbl9ibHVyIiwic2F2ZV9lZGl0cyIsInJldmVydF9lZGl0cyIsIm9uX2ZvY3VzIiwib25fcGFzdGUiLCJvcmlnaW5hbEV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJleGVjQ29tbWFuZCIsIm9uX3NlbGVjdCIsIm11bHRpIiwiJHNlbGVjdGVkIiwib25fcmFkaW9fc2VsZWN0Iiwib25fa2V5ZG93biIsImtleUNvZGUiLCJzaGlmdCIsIm9wZW5fbWVkaWFfbGliIiwidXBsb2FkZXIiLCJwYXJhbSIsIndwIiwibWVkaWEiLCJmcmFtZXMiLCJmaWxlX2ZyYW1lIiwiYnV0dG9uIiwibXVsdGlwbGUiLCJ1cmwiLCJhdHRhY2htZW50Iiwic3RhdGUiLCJ0b0pTT04iLCJzaXplcyIsIm9wZW4iLCJyZW1vdmVfaW1hZ2UiLCJ0b2dnbGVfc3dpdGNoIiwiaW5pdF9lZGl0b3IiLCJzZXR0aW5ncyIsImVkaXRvciIsImdldERlZmF1bHRTZXR0aW5ncyIsIm1lZGlhQnV0dG9ucyIsInRpbnltY2UiLCJ0b29sYmFyMSIsInRvb2xiYXIyIiwic2V0dXAiLCJvbl9lZGl0b3JfcmVhZHkiLCJtYWtlX3NsdWdfZWRpdGFibGUiLCIkYnRuIiwiJGxpbmsiLCJwcmV2QWxsIiwicHJldiIsImZ1bGxfdXJsIiwic2hvcnRfdXJsIiwiY29sb3IiLCJwb2ludGVyLWV2ZW50cyIsInRleHQtZGVjb3JhdGlvbiIsInNob3ciLCIkZWQiLCIkcGFyZW50IiwiJGxhYmVsIiwicHJlcGVuZFRvIiwiZ2V0Q29udGVudCIsInN0ciIsImEiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImhvc3QiLCJsb2NhdGlvbiIsImhlbHBlciIsIm1heWJlX2hpZGVfc2hpZnRhYmxlX2J1dHRvbnMiLCJvbGRfaW5kZXgiLCJuZXdfaW5kZXgiLCJzaGlmdF9kb3duIiwic2hpZnRfdXAiLCJzdWJzY3JpcHRpb25zIiwiZ2V0X3N1YnZpZXciLCJldmVudHNfc3Vic2NyaWJlIiwiZnVuYyIsImV2ZW50c191bnN1YnNjcmliZSIsIm9mZiIsInJlbW92ZV9zdWJ2aWV3IiwiaW5zdGFuY2UiLCJyZW1vdmVfc3Vidmlld3MiLCJ1bmRlbGVnYXRlRXZlbnRzIiwicmVuZGVyX3N1YnZpZXdzIiwidmlld19kYXRhIiwicmVuZGVyX3N1YnZpZXciLCJzZXRfc3RhdGUiLCJjbGljayBhW2hyZWY9XCIjbGxtcy10cmFzaC1tb2RlbFwiXSIsInRyYXNoX21vZGVsIiwiRGV0YWNoYWJsZSIsIkVkaXRhYmxlIiwiUmVjZWl2YWJsZSIsIlNoaWZ0YWJsZSIsIlN1YnZpZXciLCJUcmFzaGFibGUiLCJDb2xsZWN0aW9ucyIsIk1vZGVscyIsIlZpZXdzIiwiZXh0ZW5kX3ZpZXciLCJjbGFzc25hbWUiLCJyZWdpc3Rlcl9jb2xsZWN0aW9uIiwicmVnaXN0ZXJfbW9kZWwiLCJkaXNhYmxlIiwiZW5hYmxlIiwiY3VzdG9tX3NjaGVtYXMiLCJjdXN0b20iLCJtb2RlbF90eXBlIiwic2F2aW5nIiwiYXV0b3NhdmUiLCJjaGVja19pbnRlcnZhbCIsImNoZWNrX2ludGVydmFsX21zIiwiZGV0YWNoZWQiLCJ0cmFzaGVkIiwiYWRkX2Vycm9yX21zZyIsImVyciIsIm1lc3NhZ2UiLCJjaGVja19mb3JfY2hhbmdlcyIsImNoYW5nZXMiLCJnZXRfdW5zYXZlZF9jaGFuZ2VzIiwiaGFzX3Vuc2F2ZWRfY2hhbmdlcyIsImdldF9jaGFuZ2VzX3RvX29iamVjdCIsIm9iamVjdCIsImNoYW5nZWRfYXR0cyIsImV4Y2x1ZGUiLCJvbWl0IiwiZ2V0X2NoYW5nZWRfYXR0cmlidXRlcyIsIm1vZGVsX2NoYW5nZXMiLCJtYXliZV9yZXN0YXJ0X3RyYWNraW5nIiwidW5zZXQiLCJwcm9jZXNzX3JlbW92YWxzIiwicmVtb3ZhbHMiLCJ0cmFzaCIsImNvbGwiLCJlcnJvcnMiLCJpbmZvIiwicHJvY2Vzc191cGRhdGVzIiwidXBkYXRlcyIsInByb2Nlc3Nfb2JqZWN0X3VwZGF0ZXMiLCJtYWluX2RhdGEiLCJvcmlnX2lkIiwic2F2ZV9ub3ciLCJoZWFydGJlYXQiLCJjb25uZWN0Tm93IiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlVGV4dCIsImRvX2FqYXhfc2F2ZSIsInNldF9jaGVja19pbnRlcnZhbCIsIm1zIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwic3RhdHVzVGV4dCIsImRhdGEtaWQiLCJkYXRhLXNlY3Rpb24taWQiLCJjbGFzc05hbWUiLCJjbGljayAuZWRpdC1sZXNzb24iLCJjbGljayAuZWRpdC1xdWl6IiwiY2xpY2sgLmVkaXQtYXNzaWdubWVudCIsImNsaWNrIC5zZWN0aW9uLXByZXYiLCJjbGljayAuc2VjdGlvbi1uZXh0IiwiY2xpY2sgLnNoaWZ0LXVwLS1sZXNzb24iLCJjbGljayAuc2hpZnQtZG93bi0tbGVzc29uIiwib3Blbl9hc3NpZ25tZW50X2VkaXRvciIsIm9wZW5fbGVzc29uX2VkaXRvciIsIm9wZW5fcXVpel9lZGl0b3IiLCJzZWN0aW9uX25leHQiLCJfbW92ZV90b19zZWN0aW9uIiwic2VjdGlvbl9wcmV2IiwidG9fc2VjdGlvbiIsImZyb21fY29sbCIsIkxlc3NvblZpZXciLCJjb25uZWN0V2l0aCIsImN1cnNvciIsImhhbmRsZSIsInNvcnRhYmxlX3N0YXJ0Iiwic29ydGFibGVfc3RvcCIsIkxlc3Nvbkxpc3RWaWV3IiwiY2xpY2sgLmV4cGFuZCIsImNsaWNrIC5jb2xsYXBzZSIsImNsaWNrIC5zaGlmdC11cC0tc2VjdGlvbiIsImNsaWNrIC5zaGlmdC1kb3duLS1zZWN0aW9uIiwibW91c2VlbnRlciAubGxtcy1sZXNzb25zIiwidG9nZ2xlX2V4cGFuZGVkIiwibGVzc29uTGlzdFZpZXciLCJvbl9sZXNzb25fYWRkIiwiZHJhZ1RpbWVvdXQiLCJleHBhbmQiLCJjb2xsYXBzZSIsImVsIiwiYWN0aXZlX2xlc3Nvbl9jaGFuZ2UiLCJtYXliZV9oaWRlX3RyYXNoX2J1dHRvbiIsImN1cnJlbnQiLCJwcmV2aW91cyIsInVwZGF0ZSIsIm9uX21vdXNlZW50ZXIiLCJTZWN0aW9uVmlldyIsIm1vdXNlZG93biA+IGxpLmxsbXMtc2VjdGlvbiA+IC5sbG1zLWJ1aWxkZXItaGVhZGVyIC5sbG1zLWhlYWRsaW5lIiwiY2xpY2sgdWwuY29sbGVjdGlvbi12aWV3IiwiU2VjdGlvbkxpc3RWaWV3Iiwic2VjdGlvbkxpc3RWaWV3IiwiYWN0aXZlX3NlY3Rpb25fY2hhbmdlIiwib25fc2VjdGlvbl9hZGQiLCJvbl9zZWN0aW9uX3RvZ2dsZSIsImV4cGFuZF9zZWN0aW9uIiwiY2xpY2sgLmxsbXMtc2V0dGluZ3MtZ3JvdXAtdG9nZ2xlIiwiZ2V0X2VkaXRvcl9maWVsZHMiLCJpc19lZGl0b3JfZmllbGQiLCJnZXRfZ3JvdXBzIiwiaXNfZ3JvdXBfaGlkZGVuIiwiZ3JvdXBfaWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZ2V0X3N3aXRjaF9hdHRyaWJ1dGUiLCJoYXNfc3dpdGNoIiwiaXNfZGVmYXVsdF9maWVsZCIsImlzX3N3aXRjaF9jb25kaXRpb25fbWV0Iiwic3dpdGNoX29uIiwicmVuZGVyX2VkaXRvciIsInJlbmRlcl9zZWxlY3Rfb3B0aW9ucyIsIm9wdGlvbl9odG1sIiwic2V0dXBfZmllbGQiLCJvcmlnX2ZpZWxkIiwiZmllbGRfaW5kZXgiLCJjbGFzc2VzIiwiaW5wdXRfdHlwZSIsInRpcF9wb3NpdGlvbiIsIm9yaWdfc2V0dGluZ3MiLCJzd2l0Y2hfb2ZmIiwiZGVlcENsb25lIiwiaGFzX2ltYWdlcyIsInNob3VsZF9yZXJlbmRlcl9vbl90b2dnbGUiLCJmaWVsZF90eXBlIiwidG9nZ2xlX2dyb3VwIiwiJGdyb3VwIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJTZXR0aW5nc0ZpZWxkcyIsInBsYWNlbWVudCIsInN0eWxlIiwiYW5pbWF0aW9uIiwiY2xvc2VhYmxlIiwiYmFja2Ryb3AiLCJvblNob3ciLCJvbkhpZGUiLCJjb250YWluZXIiLCJ3ZWJ1aVBvcG92ZXIiLCJzZWxlY3QyOnNlbGVjdCIsInBvc3RfdHlwZSIsInNlYXJjaGluZ19tZXNzYWdlIiwiYWRkX3Bvc3QiLCJwYXJhbXMiLCJhamF4IiwiZGF0YVR5cGUiLCJhamF4dXJsIiwidGVybSIsInBhZ2UiLCJfYWpheF9ub25jZSIsIndwX2FqYXhfZGF0YSIsIm5vbmNlIiwiZHJvcGRvd25QYXJlbnQiLCJlc2NhcGVNYXJrdXAiLCJtYXJrdXAiLCJ0ZW1wbGF0ZVJlc3VsdCIsInJlbmRlcl9yZXN1bHQiLCIkaHRtbCIsImxvYWRpbmciLCIkc2lkZSIsIiRtYWluIiwiY2xpY2sgLmxsbXMtYWRkLXF1ZXN0aW9uIiwiUXVlc3Rpb25WaWV3IiwiY2hhbmdlIGlucHV0W25hbWU9XCJjb3JyZWN0XCJdIiwiY2xpY2sgLmxsbXMtYWN0aW9uLWljb25baHJlZj1cIiNsbG1zLWFkZC1jaG9pY2VcIl0iLCJjbGljayAubGxtcy1hY3Rpb24taWNvbltocmVmPVwiI2xsbXMtZGVsLWNob2ljZVwiXSIsIm1heWJlX2Rpc2FibGVfYnV0dG9ucyIsImRlbF9jaG9pY2UiLCJ0b2dnbGVfY29ycmVjdCIsIkNob2ljZVZpZXciLCJDaG9pY2VMaXN0VmlldyIsImNsaWNrIC5jbG9uZS0tcXVlc3Rpb24iLCJjbGljayAuZGVsZXRlLS1xdWVzdGlvbiIsImNsaWNrIC5leHBhbmQtLXF1ZXN0aW9uIiwiY2xpY2sgLmNvbGxhcHNlLS1xdWVzdGlvbiIsImNoYW5nZSBpbnB1dFtuYW1lPVwicXVlc3Rpb25fcG9pbnRzXCJdIiwicmVuZGVyX3BvaW50c19wZXJjZW50YWdlIiwibXVsdGlfY2hvaWNlc190b2dnbGUiLCJjaG9pY2VMaXN0VmlldyIsInF1ZXN0aW9uTGlzdFZpZXciLCJnZXRfcXVlc3Rpb25fbGlzdCIsIl9nZXRfcXVlc3Rpb25fY2xvbmUiLCJjaG9pY2VfY2xvbmUiLCJkZWxldGUiLCJzZWxlY3RvciIsIlF1aXpNb2RlbCIsIlBvcG92ZXIiLCJQb3N0U2VhcmNoIiwiUXVlc3Rpb25CYW5rIiwiUXVlc3Rpb25MaXN0IiwiYmFuayIsImxpc3QiLCJjbGljayAjbGxtcy1leGlzdGluZy1xdWl6IiwiY2xpY2sgI2xsbXMtbmV3LXF1aXoiLCJjbGljayAjbGxtcy1zaG93LXF1ZXN0aW9uLWJhbmsiLCJjbGljayAuYnVsay10b2dnbGUiLCJyZW5kZXJfcG9pbnRzIiwib25fdHJhc2hlZCIsImxhc3RfZ3JvdXAiLCJhbGVydCIsIiRxdWVzdGlvbnMiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiYnVsa190b2dnbGUiLCJleHBhbmRlZCIsImFkZF9uZXdfcXVpeiIsImFkZF9leGlzdGluZ19xdWl6IiwicG9zdF9zZWFyY2hfcG9wb3ZlciIsImFkZF9leGlzdGluZ19xdWl6X2NsaWNrIiwiZGlzbWlzc2libGUiLCJvbmNlIiwic2hvd190b29scyIsInBvcCIsImFkZG9uX2V2ZW50cyIsImlzX2FkZG9uX2F2YWlsYWJsZSIsImdldF92aWV3X2V2ZW50cyIsImNsaWNrICNsbG1zLWV4aXN0aW5nLWFzc2lnbm1lbnQiLCJjbGljayAjbGxtcy1uZXctYXNzaWdubWVudCIsImFkZF9uZXdfYXNzaWdubWVudCIsImdldF9hc3NpZ25tZW50Iiwic2hvd19hZF9wb3BvdmVyIiwiYWRkX2V4aXN0aW5nX2Fzc2lnbm1lbnQiLCJhZGRfZXhpc3RpbmdfYXNzaWdubWVudF9jbGljayIsImgzIiwiYnRuIiwiYWRfcG9wb3ZlciIsIkxlc3NvbkVkaXRvciIsIkFzc2lnbm1lbnQiLCJjbGljayAubGxtcy1lZGl0b3ItbmF2IGFbaHJlZj1cIiNsbG1zLWVkaXRvci1jbG9zZVwiXSIsImNsaWNrIC5sbG1zLWVkaXRvci1uYXYgYTpub3QoW2hyZWY9XCIjbGxtcy1lZGl0b3ItY2xvc2VcIl0pIiwiU2lkZWJhclZpZXciLCJjbG9zZV9lZGl0b3IiLCJzd2l0Y2hfdGFiIiwiTGVzc29uU2VhcmNoIiwiY2xpY2sgI2xsbXMtbmV3LXNlY3Rpb24iLCJjbGljayAjbGxtcy1uZXctbGVzc29uIiwiY2xpY2sgI2xsbXMtZXhpc3RpbmctbGVzc29uIiwiQ291cnNlVmlldyIsImRyYWdnYWJsZSIsImFwcGVuZFRvIiwiY2FuY2VsIiwiY29ubmVjdFRvU29ydGFibGUiLCJhZGRfbmV3X3NlY3Rpb24iLCJhZGRfbmV3X2xlc3NvbiIsIiRlbHMiLCJjbGljayAjbGxtcy1jb2xsYXBzZS1hbGwiLCJjbGljayAjbGxtcy1leHBhbmQtYWxsIiwiY29sbGFwc2VfYWxsIiwiZXhwYW5kX2FsbCIsIkVkaXRvciIsIkVsZW1lbnRzIiwiZWxlbWVudHMiLCJ1dGlsaXRpZXMiLCJjbGljayAjbGxtcy1zYXZlLWJ1dHRvbiIsImNsaWNrICNsbG1zLWV4aXQtYnV0dG9uIiwiY2xpY2sgLmxsbXMtYnVpbGRlci1lcnJvciIsImNoYW5nZXNfbWFkZSIsImhlYXJ0YmVhdF9zZW5kIiwiaGVhcnRiZWF0X3RpY2siLCJvbl9sZXNzb25fc2VsZWN0Iiwib25fZWRpdG9yX2Nsb3NlIiwiJHNhdmVCdXR0b24iLCJhZGRfZXJyb3IiLCIkZXJyIiwicHJlcGVuZCIsImNsZWFyX2Vycm9ycyIsImV4aXRfbm93IiwiZGF0YS1zdGF0dXMiLCJkaXNhYmxlZCIsInR4dCIsImlzX2VkaXRvcl9hY3RpdmUiLCJsZXNzb25fbW9kZWwiLCJDViIsIlRyYWNrSXQiLCJDb25zdHJ1Y3QiLCJEZWJ1ZyIsIlNjaGVtYXMiLCJTeW5jIiwidmFsdWVfY29tcGFyZSIsImV4cGVjdGVkIiwiYWN0dWFsIiwibWl4aW4iLCJjaGVja2VkIiwiYWxsb3dlZF90YWdzIiwibm90IiwicmVwbGFjZVdpdGgiLCJpbm5lckhUTUwiLCJFdmVudHMiLCJTaWRlYmFyIiwic2lkZWJhciJdLCJtYXBwaW5ncyI6IkNBQUMsU0FBU0EsR0FTVixJQUFJQyxFQUFXQyxFQUFTQyxFQWtkWkMsRUFBTUMsRUFpM0NiQyxFQW1CQUMsR0FyMURKLFNBQVVDLEdBQ1YsSUFBSUMsRUFBTUMsRUFBS0MsRUFBU0MsRUFDdkJDLEVBQVUsR0FDVkMsRUFBVSxHQUNWQyxFQUFTLEdBQ1RDLEVBQVcsR0FDWEMsRUFBU0MsT0FBT0MsVUFBVUMsZUFDMUJDLEVBQU0sR0FBR0MsTUFDVEMsRUFBaUIsUUFFbEIsU0FBU0MsRUFBUUMsRUFBS0MsR0FDckIsT0FBT1QsRUFBT1UsS0FBS0YsRUFBS0MsR0FXekIsU0FBU0UsRUFBVUMsRUFBTUMsR0FDeEIsSUFBSUMsRUFBV0MsRUFBYUMsRUFBVUMsRUFBVUMsRUFDL0NDLEVBQVFDLEVBQWNDLEVBQU9DLEVBQUdDLEVBQUdDLEVBQ25DQyxFQUFZWixHQUFZQSxFQUFTYSxNQUFNLEtBQ3ZDQyxFQUFNN0IsRUFBTzZCLElBQ2JDLEVBQVdELEdBQU9BLEVBQUksTUFBUyxHQUdoQyxHQUFJZixFQUFNLENBd0JULElBdEJBTSxHQURBTixFQUFPQSxFQUFLYyxNQUFNLE1BQ0RHLE9BQVMsRUFNdEIvQixFQUFPZ0MsY0FBZ0J4QixFQUFleUIsS0FBS25CLEVBQUtNLE1BQ25ETixFQUFLTSxHQUFhTixFQUFLTSxHQUFXYyxRQUFRMUIsRUFBZ0IsS0FJakMsTUFBdEJNLEVBQUssR0FBR3FCLE9BQU8sSUFBY1IsSUFPaENiLEVBRHNCYSxFQUFVcEIsTUFBTSxFQUFHb0IsRUFBVUksT0FBUyxHQUNqQ0ssT0FBT3RCLElBSTlCVSxFQUFJLEVBQUdBLEVBQUlWLEVBQUtpQixPQUFRUCxJQUU1QixHQUFhLE9BRGJFLEVBQU9aLEVBQUtVLElBRVhWLEVBQUt1QixPQUFPYixFQUFHLEdBQ2ZBLEdBQUssT0FDQyxHQUFhLE9BQVRFLEVBQWUsQ0FNekIsR0FBVSxJQUFORixHQUFrQixJQUFOQSxHQUF1QixPQUFaVixFQUFLLElBQWdDLE9BQWhCQSxFQUFLVSxFQUFJLEdBQ3hELFNBQ2MsRUFBSkEsSUFDVlYsRUFBS3VCLE9BQU9iLEVBQUksRUFBRyxHQUNuQkEsR0FBSyxHQU1SVixFQUFPQSxFQUFLd0IsS0FBSyxLQUlsQixJQUFLWCxHQUFhRyxJQUFZRCxFQUFLLENBR2xDLElBQUtMLEdBRkxSLEVBQVlGLEVBQUtjLE1BQU0sTUFFSkcsT0FBWSxFQUFKUCxFQUFPQSxHQUFLLEVBQUcsQ0FHekMsR0FGQVAsRUFBY0QsRUFBVVQsTUFBTSxFQUFHaUIsR0FBR2MsS0FBSyxLQUVyQ1gsRUFHSCxJQUFLRixFQUFJRSxFQUFVSSxPQUFZLEVBQUpOLEVBQU9BLEdBQUssRUFLdEMsSUFKQVAsRUFBV1csRUFBSUYsRUFBVXBCLE1BQU0sRUFBR2tCLEdBQUdhLEtBQUssU0FLekNwQixFQUFXQSxFQUFTRCxJQUNOLENBRWJFLEVBQVdELEVBQ1hHLEVBQVNHLEVBQ1QsTUFNSixHQUFJTCxFQUNILE9BTUlHLEdBQWdCUSxHQUFXQSxFQUFRYixLQUN2Q0ssRUFBZVEsRUFBUWIsR0FDdkJNLEVBQVFDLElBSUxMLEdBQVlHLElBQ2hCSCxFQUFXRyxFQUNYRCxFQUFTRSxHQUdOSixJQUNISCxFQUFVcUIsT0FBTyxFQUFHaEIsRUFBUUYsR0FDNUJMLEVBQU9FLEVBQVVzQixLQUFLLE1BSXhCLE9BQU94QixFQUdSLFNBQVN5QixFQUFZQyxFQUFTQyxHQUM3QixPQUFPLFdBSU4sSUFBSUMsRUFBT3BDLEVBQUlNLEtBQUsrQixVQUFXLEdBUS9CLE1BSHVCLGlCQUFaRCxFQUFLLElBQW1DLElBQWhCQSxFQUFLWCxRQUN2Q1csRUFBS0UsS0FBSyxNQUVKakQsRUFBSWtELE1BQU1wRCxFQUFPaUQsRUFBS04sT0FBTyxDQUFDSSxFQUFTQyxNQVVoRCxTQUFTSyxFQUFTQyxHQUNqQixPQUFPLFNBQVVDLEdBQ2hCbEQsRUFBUWlELEdBQVdDLEdBSXJCLFNBQVNDLEVBQVFuQyxHQUNoQixHQUFJTCxFQUFRVixFQUFTZSxHQUFPLENBQzNCLElBQUk0QixFQUFPM0MsRUFBUWUsVUFDWmYsRUFBUWUsR0FDZmIsRUFBU2EsSUFBUSxFQUNqQnBCLEVBQUttRCxNQUFNcEQsRUFBT2lELEdBR25CLElBQUtqQyxFQUFRWCxFQUFTZ0IsS0FBVUwsRUFBUVIsRUFBVWEsR0FDakQsTUFBTSxJQUFJb0MsTUFBTSxNQUFRcEMsR0FFekIsT0FBT2hCLEVBQVFnQixHQU1oQixTQUFTcUMsRUFBWXJDLEdBQ3BCLElBQUlzQyxFQUNIQyxFQUFRdkMsRUFBT0EsRUFBS3dDLFFBQVEsTUFBUSxFQUtyQyxPQUphLEVBQVRELElBQ0hELEVBQVN0QyxFQUFLeUMsVUFBVSxFQUFHRixHQUMzQnZDLEVBQU9BLEVBQUt5QyxVQUFVRixFQUFRLEVBQUd2QyxFQUFLaUIsU0FFaEMsQ0FBQ3FCLEVBQVF0QyxHQUtqQixTQUFTMEMsRUFBYWhCLEdBQ3JCLE9BQU9BLEVBQVVXLEVBQVlYLEdBQVcsR0FRekM1QyxFQUFVLFNBQVVrQixFQUFNMkMsR0FDekIsSUFBSUMsRUFuRGtCbEIsRUFvRHJCbUIsRUFBUVIsRUFBWXJDLEdBQ3BCc0MsRUFBU08sRUFBTSxHQUNmQyxFQUFrQkgsRUFBUyxHQTJCNUIsT0F6QkEzQyxFQUFPNkMsRUFBTSxHQUVUUCxJQUVITSxFQUFTVCxFQURURyxFQUFTdkMsRUFBVXVDLEVBQVFRLEtBS3hCUixFQUVGdEMsRUFERzRDLEdBQVVBLEVBQU83QyxVQUNiNkMsRUFBTzdDLFVBQVVDLEdBbEVKMEIsRUFrRXdCb0IsRUFqRXZDLFNBQVU5QyxHQUNoQixPQUFPRCxFQUFVQyxFQUFNMEIsTUFrRWYzQixFQUFVQyxFQUFNOEMsSUFLeEJSLEdBREFPLEVBQVFSLEVBRFJyQyxFQUFPRCxFQUFVQyxFQUFNOEMsS0FFUixHQUNmOUMsRUFBTzZDLEVBQU0sR0FDVFAsSUFDSE0sRUFBU1QsRUFBUUcsS0FLWixDQUNOUyxFQUFHVCxFQUFTQSxFQUFTLElBQU10QyxFQUFPQSxFQUNsQ2dELEVBQUdoRCxFQUNIaUQsR0FBSVgsRUFDSlksRUFBR04sSUFVTDdELEVBQVcsQ0FDVlYsUUFBUyxTQUFVMkIsR0FDbEIsT0FBT3lCLEVBQVl6QixJQUVwQm1ELFFBQVMsU0FBVW5ELEdBQ2xCLElBQUlvRCxFQUFJcEUsRUFBUWdCLEdBQ2hCLFlBQWlCLElBQU5vRCxFQUNIQSxFQUVDcEUsRUFBUWdCLEdBQVEsSUFHMUJxRCxPQUFRLFNBQVVyRCxHQUNqQixNQUFPLENBQ05zRCxHQUFJdEQsRUFDSnVELElBQUssR0FDTEosUUFBU25FLEVBQVFnQixHQUNqQmQsUUF2QmlCYyxFQXVCRUEsRUF0QmQsV0FDTixPQUFRZCxHQUFVQSxFQUFPQSxRQUFVQSxFQUFPQSxPQUFPYyxJQUFVLE1BRjdELElBQW9CQSxJQTRCcEJwQixFQUFPLFNBQVVvQixFQUFNd0QsRUFBTUMsRUFBVS9CLEdBQ3RDLElBQUlnQyxFQUFXekIsRUFBUzBCLEVBQUs1QyxFQUFLTCxFQUFHaUMsRUFHcENpQixFQUZBaEMsRUFBTyxHQUNQaUMsU0FBc0JKLEVBUXZCLEdBSEFkLEVBQVdELEVBRFhoQixFQUFVQSxHQUFXMUIsR0FJQSxjQUFqQjZELEdBQWlELGFBQWpCQSxFQUE2QixDQUtoRSxJQURBTCxHQUFRQSxFQUFLdkMsUUFBVXdDLEVBQVN4QyxPQUFTLENBQUMsVUFBVyxVQUFXLFVBQVl1QyxFQUN2RTlDLEVBQUksRUFBR0EsRUFBSThDLEVBQUt2QyxPQUFRUCxHQUFLLEVBS2pDLEdBQWdCLGFBSGhCdUIsR0FEQWxCLEVBQU1qQyxFQUFRMEUsRUFBSzlDLEdBQUlpQyxJQUNUSSxHQUlibkIsRUFBS2xCLEdBQUszQixFQUFTVixRQUFRMkIsUUFDckIsR0FBZ0IsWUFBWmlDLEVBRVZMLEVBQUtsQixHQUFLM0IsRUFBU29FLFFBQVFuRCxHQUMzQjRELEdBQWUsT0FDVCxHQUFnQixXQUFaM0IsRUFFVnlCLEVBQVk5QixFQUFLbEIsR0FBSzNCLEVBQVNzRSxPQUFPckQsUUFDaEMsR0FBSUwsRUFBUVgsRUFBU2lELElBQ3ZCdEMsRUFBUVYsRUFBU2dELElBQ2pCdEMsRUFBUVIsRUFBVThDLEdBQ3RCTCxFQUFLbEIsR0FBS3lCLEVBQVFGLE9BQ1osQ0FBQSxJQUFJbEIsRUFBSW1DLEVBSWQsTUFBTSxJQUFJZCxNQUFNcEMsRUFBTyxZQUFjaUMsR0FIckNsQixFQUFJbUMsRUFBRVksS0FBSy9DLEVBQUlpQyxFQUFHdkIsRUFBWUMsR0FBUyxHQUFPTSxFQUFTQyxHQUFVLElBQ2pFTCxFQUFLbEIsR0FBSzFCLEVBQVFpRCxHQU1wQjBCLEVBQU1GLEVBQVdBLEVBQVMxQixNQUFNL0MsRUFBUWdCLEdBQU80QixRQUFRbUMsRUFFbkQvRCxJQUlDMEQsR0FBYUEsRUFBVVAsVUFBWXhFLEdBQ3JDK0UsRUFBVVAsVUFBWW5FLEVBQVFnQixHQUMvQmhCLEVBQVFnQixHQUFRMEQsRUFBVVAsUUFDaEJRLElBQVFoRixHQUFVaUYsSUFFNUI1RSxFQUFRZ0IsR0FBUTJELFNBR1IzRCxJQUdWaEIsRUFBUWdCLEdBQVF5RCxJQUlsQnJGLEVBQVlDLEVBQVVRLEVBQU0sU0FBVTJFLEVBQU1DLEVBQVUvQixFQUFTQyxFQUFXcUMsR0FDekUsR0FBb0IsaUJBQVRSLEVBQ1YsT0FBSXpFLEVBQVN5RSxHQUVMekUsRUFBU3lFLEdBQU1DLEdBTWhCdEIsRUFBUXJELEVBQVEwRSxFQUFNZCxFQUFhZSxJQUFXVixHQUMvQyxJQUFLUyxFQUFLakMsT0FBUSxDQU14QixJQUpBckMsRUFBU3NFLEdBQ0VBLE1BQ1YzRSxFQUFJSyxFQUFPc0UsS0FBTXRFLEVBQU91RSxXQUVwQkEsRUFDSixPQUdHQSxFQUFTbEMsUUFHWmlDLEVBQU9DLEVBQ1BBLEVBQVcvQixFQUNYQSxFQUFVLE1BRVY4QixFQUFPN0UsRUE2QlQsT0F4QkE4RSxFQUFXQSxHQUFZLGFBSUEsbUJBQVovQixJQUNWQSxFQUFVQyxFQUNWQSxFQUFZcUMsR0FJVHJDLEVBQ0gvQyxFQUFLRCxFQUFPNkUsRUFBTUMsRUFBVS9CLEdBUTVCdUMsV0FBVyxXQUNWckYsRUFBS0QsRUFBTzZFLEVBQU1DLEVBQVUvQixJQUMxQixHQUdHN0MsR0FPUkEsRUFBSUssT0FBUyxTQUFVZ0YsR0FDdEIsT0FBT3JGLEVBQUlxRixJQU1aOUYsRUFBVStGLFNBQVduRixHQUVyQlYsRUFBUyxTQUFVMEIsRUFBTXdELEVBQU1DLEdBQzlCLEdBQW9CLGlCQUFUekQsRUFDVixNQUFNLElBQUlvQyxNQUFNLDZEQUlab0IsRUFBS2pDLFNBSVRrQyxFQUFXRCxFQUNYQSxFQUFPLElBR0g3RCxFQUFRWCxFQUFTZ0IsSUFBVUwsRUFBUVYsRUFBU2UsS0FDaERmLEVBQVFlLEdBQVEsQ0FBQ0EsRUFBTXdELEVBQU1DLE1BSXhCVyxJQUFNLENBQ1pDLFFBQVEsR0F0YVYsR0EwYUEvRixFQUFPLGdCQUFpQixjQVF4QkEsRUFBUSxhQUFhLEdBQUcsV0FDdkIsT0FBT2dHLElBU1JoRyxFQUFRLFdBQVcsR0FBRyxXQUNyQixPQUFPaUcsV0FTUmpHLEVBQVEsU0FBUyxHQUFHLFdBQ25CLE9BQU8rRixTQVVJOUYsRUFZVGlHLEtBWmVoRyxFQVlULFNBQVU4RixFQUFHQyxFQUFVcEcsR0FDL0IsSUFBSXNHLEVBQStCRixFQUFTRyxLQUV4Q0MsRUFBc0IsUUFFdEJDLEVBQStCLENBQUUsYUFBYyxZQUFhLG1CQUFvQixlQUFnQix1QkFBd0IscUJBRXhIQyxFQUE2QixDQUNoQ0MsV0FBZSxjQUNmQyxPQUFXLE9BQ1hDLGFBQWUsUUE4bkNoQixTQUFTQyxFQUE4QkMsR0FJdEMsSUFBSUMsRUFBK0IsR0FFbkMsSUFBTWIsRUFBRWMsUUFBU0YsR0FBdUIsTUFBTSxJQUFJOUMsTUFBTyx5Q0E2QnpELE9BM0JBa0MsRUFBRWUsS0FBTUgsRUFBb0IsU0FBVUksR0FDckMsSUFBSUMsRUFBZ0JDLEVBQW9CQyxFQUt4QyxHQUhBRCxHQUFxQixFQUNyQkMsT0FBeUIxQixFQUVyQk8sRUFBRW9CLFNBQVVKLEdBQ2ZDLEVBQWlCRCxNQUNiLENBQUEsSUFBSWhCLEVBQUVxQixTQUFVTCxHQU9oQixNQUFNLElBQUlsRCxNQUFPLHVGQU5yQm1ELEVBQWlCakIsRUFBRXNCLE1BQU90QixFQUFFdUIsS0FBTVAsSUFFakNHLEVBREduQixFQUFFd0IsV0FBWVIsRUFBdUJDLElBQ2ZELEVBQXVCQyxHQUV2QmpCLEVBQUV5QixNQUFPVCxFQUF1QkMsSUFJUCxNQUFoREEsRUFBZ0JBLEVBQWV0RSxPQUFTLEtBQzNDdUUsR0FBcUIsRUFDckJELEVBQWlCQSxFQUFlOUYsTUFBTyxFQUFHOEYsRUFBZXRFLE9BQVMsSUFHbkVrRSxFQUE4QkksR0FBbUJKLEVBQThCSSxJQUFvQixHQUNuR0osRUFBOEJJLEdBQWlCUyxTQUFXUixFQUNwRGxCLEVBQUUyQixZQUFhUixLQUEyQk4sRUFBOEJJLEdBQWlCVyxhQUFlVCxLQUd4R04sRUE0S1IsT0ExMENBWixFQUFTNEIsZUFBaUI1QixFQUFTRyxLQUFLMEIsT0FBUSxDQUUvQ0MsUUFBVSxLQUVWQyxPQUFTLENBQ1JDLGtDQUFvQyx3QkFDcENDLGlDQUFtQywwQkFDbkNDLE1BQVUsMEJBQ1ZDLGtEQUFvRCwwQkFDcERDLFFBQVksY0FJYkMsY0FBZ0IsQ0FDZkMsTUFBVSxTQUlYQyxhQUFlLENBQUVDLElBQU0sS0FHdkJDLHNCQUF3QixDQUN2QixDQUFFQyxXQUFlLE1BQ2pCLENBQUVDLFVBQWMsTUFDaEIsQ0FBRUMsaUJBQXFCLElBQ3ZCLENBQUVDLGFBQWlCLE1BQ25CLENBQUVDLHFCQUF5QixNQUMzQixDQUFFQyxZQUFlLEdBQ2pCLENBQUVDLGVBQWtCLEdBQ3BCLENBQUVDLHVCQUEyQixNQUM3QixDQUFFQyxvQkFBd0IsTUFDMUIsQ0FBRUMscUJBQXlCLE1BQzNCLENBQUVDLGdCQUFtQixHQUNyQixDQUFFQyxlQUFrQixHQUNwQixDQUFFQyxrQkFBcUIsR0FDdkIsQ0FBRUMsVUFBYSxHQUNmLENBQUVDLGdCQUFvQixNQUN0QixDQUFFQyxpQkFBb0IsR0FDdEIsQ0FBRUMsbUJBQXNCLEdBQ3hCLENBQUVDLGlCQUFxQixPQUd4QkMsV0FBYSxTQUFVQyxHQUN0QjdELEVBQVM4RCxZQUFZQyxJQUFLOUQsS0FBTSx5QkFDaENBLEtBQUsrRCxXQUFZSCxHQUVYNUQsS0FBS3lDLGFBQWF6QyxLQUFLeUMsV0FBYSxJQUFJMUMsRUFBU2lFLFlBRXZEaEUsS0FBS2lFLGtCQUFtQixFQUVwQmpFLEtBQUtrRSwrQkFDUm5FLEVBQVNvRSxRQUFRTCxJQUFLOUQsTUFHdkJBLEtBQUtvRSxJQUFJQyxLQUFNLE9BQVFyRSxNQUN2QkEsS0FBS29FLElBQUlFLFNBQVUsbUNBQ2Z0RSxLQUFLOEMsWUFBYTlDLEtBQUtvRSxJQUFJRSxTQUFVLGNBRXJDdEUsS0FBSzhDLFlBQWM5QyxLQUFLcUQsa0JBQzNCckQsS0FBS29FLElBQUlHLEtBQU0sV0FBWSxHQUU1QnZFLEtBQUt3RSxjQUFnQixHQUVyQnhFLEtBQUt5RSxzQkFFRHpFLEtBQUt5QyxZQUNSekMsS0FBSzBFLDRCQUVOMUUsS0FBSzJFLFlBQWMsSUFBSUMsb0JBR3hCQyxrQkFBb0IsU0FBVUMsRUFBZ0JDLEdBQzdDLElBQUlDLEVBQVFoRixLQUNSaUYsR0FBVyxFQUVmbkYsRUFBRWUsS0FBTWYsRUFBRXVCLEtBQU15RCxHQUFrQixTQUFVSSxHQUMzQyxJQUFJQyxFQUFTTCxFQUFnQkksR0FDekJFLEVBQVNMLEVBQWlCRyxHQUM5QixPQUFRQSxHQUNQLElBQUssYUFDQ0MsSUFBV0MsSUFDZkosRUFBTUssY0FBZUQsR0FDckJKLEVBQU1OLDZCQUVQLE1BQ0QsSUFBSyxrQkFDRVMsR0FBdUMsRUFBN0JILEVBQU1SLGNBQWMvSCxRQUNuQ3VJLEVBQU1NLGlCQUFrQnhGLEVBQUVzQixNQUFPNEQsRUFBTVIsZUFBaUIsQ0FBRWUsR0FBSyxRQUNoRSxNQUNELElBQUssY0FDRUosR0FBdUMsRUFBN0JILEVBQU1SLGNBQWMvSCxRQUNuQ3VJLEVBQU1RLGtCQUFtQixJQUV0QkwsR0FBVW5GLEtBQUtxRCxpQkFBbUIyQixFQUFNWixJQUFJRyxLQUFNLFdBQVksR0FDN0RTLEVBQU1aLElBQUlxQixXQUFZLFdBQVksR0FDdkMsTUFDRCxJQUFLLFdBQ0pYLEVBQWV4QixTQUFXMEIsRUFBTVUsaUJBQW1CVixFQUFNWixJQUFJZCxTQUFVLFdBQ3ZFLE1BQ0QsSUFBSyx5QkFDSjBCLEVBQU1XLGNBQWUsb0JBQ3JCLE1BQ0QsSUFBSyxrQkFDSlgsRUFBTVosSUFBSWQsU0FBVSxXQUNwQjBCLEVBQU1VLGlCQUNOLE1BQ0QsSUFBSyx1QkFDSlYsRUFBTVcsY0FBZSxrQkFDckIsTUFDRCxJQUFLLHNCQUNKWCxFQUFNVyxjQUFlLGlCQUNyQixNQUNELElBQUssZUFDSlgsRUFBTVAsc0JBQ04sTUFDRCxJQUFLLG1CQUNBVSxHQUFVbkYsS0FBSzhDLFdBQWFrQyxFQUFNWixJQUFJRyxLQUFNLFdBQVksR0FDdkRTLEVBQU1aLElBQUlxQixXQUFZLFdBQVksR0FDdkMsTUFDRCxJQUFLLFlBRUpULEVBQU1MLFlBQVk5RCxLQUFNLFNBQVUrRSxHQUNqQ1osRUFBTUwsWUFBWWtCLE9BQVFELEdBRTFCQSxFQUFLQyxXQUlKL0YsRUFBRWdHLFNBQVUxRixFQUE4QjhFLEtBQXFCRCxHQUFXLEtBRzNFakYsS0FBS2lFLGtCQUFvQmdCLEdBQzVCakYsS0FBSytGLFVBSVBDLFVBQVksU0FBVUMsRUFBWUMsR0FDakMsSUFBSUMsRUFBYSxHQUNqQkEsRUFBWUYsR0FBZUMsRUFDM0JsRyxLQUFLK0QsV0FBWW9DLElBR2xCQyxpQkFBbUIsU0FBVXhDLEdBQzVCLE9BQU81RCxLQUFLd0UsY0FBYy9ILE9BQVNxRCxFQUFFc0IsTUFBT3BCLEtBQUtxRyxrQkFBbUJ6QyxJQUFjLE1BR25GeUMsa0JBQW9CLFNBQVd6QyxHQUM5QixJQUFJb0IsRUFBUWhGLEtBTVJzRyxHQUpKMUMsRUFBVTlELEVBQUU4QixPQUFRLEdBQUksQ0FDdkIyRCxHQUFLcEYsR0FDSHlELElBRXVCMkIsR0FDdEJnQixFQUFRLEdBRVosT0FBUUQsR0FDUCxJQUFLLEtBQ0p4RyxFQUFFZSxLQUFNYixLQUFLd0UsY0FBZSxTQUFXZ0MsR0FDdENELEVBQU1qSixLQUFNMEgsRUFBTXZDLFdBQVdnRSxJQUFLRCxHQUFPMUgsTUFFMUMsTUFDRCxJQUFLLE1BQ0p5SCxFQUFRQSxFQUFNekosT0FBUWtELEtBQUt3RSxlQUMzQixNQUNELElBQUssU0FDSixJQUFJa0MsRUFBZ0IsRUFFRDFHLEtBQUsyRyxxQkFFWDlGLEtBQU0sV0FDRGxILEVBQUdxRyxNQUNMNEcsR0FBSSxjQUNsQkwsRUFBTWpKLEtBQU1vSixHQUNiQSxNQUVELE1BQ0QsSUFBSyxRQUNKNUcsRUFBRWUsS0FBTWIsS0FBS3dFLGNBQWUsU0FBV2dDLEdBQ3RDRCxFQUFNakosS0FBTTBILEVBQU12QyxXQUFXZ0UsSUFBS0QsTUFFbkMsTUFDRCxJQUFLLE9BQ0oxRyxFQUFFZSxLQUFNYixLQUFLd0UsY0FBZSxTQUFXZ0MsR0FDdENELEVBQU1qSixLQUFNMEgsRUFBTUwsWUFBWWtDLFlBQWE3QixFQUFNdkMsV0FBV2dFLElBQUtELE9BRWxFLE1BQ0QsUUFDQyxNQUFNLElBQUk1SSxNQUFPLCtCQUFpQzBJLEdBSXBELE9BQU9DLEdBSVJmLGtCQUFvQixTQUFVc0IsRUFBa0JsRCxHQUMvQyxJQUFNOUQsRUFBRWMsUUFBU2tHLEdBQXFCLEtBQU0sMEJBQzVDLEdBQU05RyxLQUFLOEMsY0FBd0MsRUFBMUJnRSxFQUFpQnJLLFFBQTFDLENBT0EsSUFBSTZKLEdBTEoxQyxFQUFVOUQsRUFBRThCLE9BQVEsR0FBSSxDQUN2Qm1GLFFBQVMsRUFDVHhCLEdBQUtwRixHQUNIeUQsSUFFdUIyQixHQUN0QnlCLEVBQWtCLEdBRXRCLE9BQVFWLEdBQ1AsSUFBSyxNQUNKVSxFQUFrQkYsRUFDbEIsTUFDRCxJQUFLLEtBQ0o5RyxLQUFLeUMsV0FBVzVCLEtBQU0sU0FBVW9HLEdBQzNCbkgsRUFBRWdHLFNBQVVnQixFQUFrQkcsRUFBVW5JLEtBQU9rSSxFQUFnQjFKLEtBQU0ySixFQUFVQyxPQUVwRixNQUNELElBQUssUUFDSkYsRUFBa0JsSCxFQUFFcUgsTUFBT0wsRUFBa0IsT0FDN0MsTUFDRCxJQUFLLE9BQ0poSCxFQUFFZSxLQUFNaUcsRUFBa0IsU0FBVU4sR0FDbkNRLEVBQWdCMUosS0FBTWtKLEVBQUtZLE1BQU1GLE9BRWxDLE1BQ0QsSUFBSyxTQUNKLElBQUlSLEVBQWdCLEVBR0QxRyxLQUFLMkcscUJBQ1g5RixLQUFNLFdBQ2xCLElBQUl3RyxFQUFhMU4sRUFBR3FHLE1BQ2hCRixFQUFFZ0csU0FBVWdCLEVBQWtCSixJQUNqQ00sRUFBZ0IxSixLQUFNK0osRUFBVzlDLEtBQU0sbUJBQ3hDbUMsTUFFRCxNQUNELFFBQ0MsTUFBTSxJQUFJOUksTUFBTywrQkFBaUMwSSxHQUlwRCxJQUFJZ0IsRUFBb0J0SCxLQUFLcUcsb0JBQ3pCa0IsRUFBa0J6SCxFQUFFeUIsTUFBT3ZCLEtBQUt3RSxlQUVwQ3hFLEtBQUt3RSxjQUFnQnhFLEtBQUt3SCxzQkFBdUJSLEdBQ2pEaEgsS0FBS3lILHFCQUVMLElBQUlDLEVBQW9CMUgsS0FBS3FHLG9CQUV2QnJHLEtBQUsySCxxQkFBc0JKLEVBQWlCdkgsS0FBS3dFLGlCQUV0RHhFLEtBQUs0SCxpQ0FBa0NMLEdBRWpDM0QsRUFBUW1ELFNBRVQvRyxLQUFLa0UsOEJBQ1JsRSxLQUFLNkgsTUFBTyxtQkFBb0IsQ0FDL0JDLGVBQWlCSixFQUNqQkosa0JBQW9CQSxJQUVmdEgsS0FBSytILFFBQVMsbUJBQW9CTCxFQUFtQkosSUFHN0R0SCxLQUFLZ0ksNkJBSVAxQyxpQkFBbUIsU0FBVTJDLEVBQWlCckUsR0FDdkNxRSxHQUF1QyxJQUFwQkEsRUFHeEJqSSxLQUFLd0Ysa0JBQW1CLENBQUV5QyxHQUFtQnJFLEdBRjdDNUQsS0FBS3dGLGtCQUFtQixHQUFJNUIsSUFLOUJzRSxRQUFVLFNBQVVDLEVBQVd2RSxHQUs5QixRQUpBQSxFQUFVOUQsRUFBRThCLE9BQVEsR0FBSSxDQUN2QjJELEdBQUtwRixHQUNIeUQsSUFFYTJCLElBQ2YsSUFBSyxLQUNMLElBQUssTUFDSixJQUFJNkIsRUFBUXBILEtBQUt5QyxXQUFXZ0UsSUFBSzBCLElBQWUsS0FDaEQsT0FBT2YsR0FBU3BILEtBQUsyRSxZQUFZa0MsWUFBYU8sR0FFL0MsSUFBSyxTQUNKLElBQUlnQixFQUFlcEksS0FBSzJHLHFCQUN4QixPQUFPaE4sRUFBR3lPLEVBQWEzQixJQUFLMEIsSUFFN0IsSUFBSyxRQUNKLE9BQU9uSSxLQUFLMkUsWUFBWWtDLFlBQWFzQixHQUV0QyxRQUNDLE1BQU0sSUFBSXZLLE1BQU8sK0JBQWlDMEksZUFLckRQLE9BQVMsV0FDUixJQU1Jc0MsRUFKSnJJLEtBQUtpRSxrQkFBbUIsRUFFcEJqRSxLQUFLOEMsWUFBYTlDLEtBQUtzSSxpQkFNM0JELEVBQXVCckksS0FBS3VJLGtCQUU1QixJQWdCSUMsRUFoQkFDLEVBQWlCekksS0FBSzJFLFlBQzFCM0UsS0FBSzJFLFlBQWMsSUFBSUMsbUJBTXZCNkQsRUFBZTVILEtBQU0sU0FBVTZILEdBRzFCMUksS0FBS3dELGlCQUFtQnhELEtBQUt5QyxXQUFXZ0UsSUFBS2lDLEVBQWN0QixNQUFNRixLQUNwRXdCLEVBQWN0RSxJQUFJdUUsU0FDWkQsRUFBYzdDLFVBQ25CN0YsTUFFSHFJLEVBQXFCTyxRQUdqQjVJLEtBQUt5RCxvQkFDUitFLEVBQW9CSyxTQUFTQywwQkFFOUI5SSxLQUFLeUMsV0FBVzVCLEtBQU0sU0FBVW9HLEdBQy9CLElBQUl5QixFQUFnQkQsRUFBZU0sZUFBZ0I5QixFQUFVQyxLQUN2RGxILEtBQUt3RCxrQkFBbUIxRCxFQUFFMkIsWUFBYWlILEtBRzVDQSxFQUFnQjFJLEtBQUtnSixvQkFBcUIvQixFQUFXakgsS0FBS2lKLHFCQUFzQmhDLEtBR2pGakgsS0FBS2tKLDBCQUEyQlIsRUFBZUYsR0FBcUJILElBQ2xFckksTUFFQ0EsS0FBS3lELG1CQUNSNEUsRUFBcUJjLE9BQVFYLEdBRTFCeEksS0FBS3NELFVBQVd0RCxLQUFLMEYsaUJBRXpCMUYsS0FBS29KLHFDQUVEcEosS0FBS2tFLDhCQUNSbEUsS0FBSzZILE1BQU8sVUFDUjdILEtBQUsrSCxRQUFTLFVBRWYvSCxLQUFLOEMsYUFDUjlDLEtBQUtxSixvQkFDTHJKLEtBQUtnSSwyQkFHTmhJLEtBQUtzSiw4QkFBK0IsR0FHckNGLG1DQUFxQyxXQUdwQyxJQUZBcEosS0FBS3VKLDBCQUVEdkosS0FBSzBELG1CQUdrQixJQUZUMUQsS0FBSzJHLHFCQUVQbEssT0FBZSxDQUM3QixJQUFJK00sRUFPQUMsRUFKSEQsRUFERzFKLEVBQUV3QixXQUFZdEIsS0FBSzBELGtCQUNKMUQsS0FBSzBELG1CQUVMMUQsS0FBSzBELGlCQUd4QixJQUFJZ0csRUFBUy9QLEVBQUcsbUNBQXFDNlAsRUFBa0IsVUFJdEVDLEVBREd6SixLQUFLMkosb0JBQ2NELEVBQU9FLFFBQVMsa0NBQW1DQyxTQUFTQyxJQUFLekosR0FFakVxSixFQUFPRSxRQUFTLDBEQUEyREMsU0FBU0EsU0FBU0MsSUFBS3pKLEdBRXpITCxLQUFLdUksa0JBQWtCWSxPQUFRTSxLQUtsQ0Ysd0JBQTBCLFdBQ3JCdkosS0FBSzJKLG9CQUNSM0osS0FBS3VJLGtCQUFrQndCLEtBQU0saUNBQWtDRixTQUFTaEUsU0FFeEU3RixLQUFLdUksa0JBQWtCd0IsS0FBTSxzQ0FBdUNGLFNBQVNBLFNBQVNoRSxVQUt4RnFELDBCQUE0QixTQUFVeEcsRUFBV3NILEVBQTRCQyxHQUM1RSxJQUFJQyxFQUF1QmxLLEtBQUttSyxlQUFnQnpILEdBRWhELEdBQTRDLEtBQXhDc0gsRUFBMkJJLFNBQzlCSixFQUEyQkssWUFBYUgsRUFBcUJ6RCxJQUFLLFFBQzlELENBQ0osSUFBSTZELEVBQW1DTixFQUEyQk8sV0FBVzlOLFFBQ3ZFcUQsRUFBRTJCLFlBQWF3SSxJQUF3QixHQUFYQSxHQUFnQkEsRUFBVUssRUFFM0ROLEVBQTJCTyxXQUFXQyxHQUFJUCxHQUFVUSxPQUFRUCxLQU10RHBLLEVBQUUyQixZQUFhd0ksSUFBdUJLLEVBQVZMLElBQTZDakssS0FBS3NKLDhCQUErQixHQUVuSFUsRUFBMkJiLE9BQVFlLElBSXJDbEssS0FBSzJFLFlBQVliLElBQUtwQixJQVNELElBSEZBLEVBQVVxRCxXQUk1Qm1FLEVBQXFCUSxPQUNyQlIsRUFBcUI1RixTQUFVLGdCQUdoQyxJQUFJcUcsR0FBb0IsRUFDcEI3SyxFQUFFd0IsV0FBWXRCLEtBQUtpRCx1QkFDdEIwSCxHQUFzQjNLLEtBQUtpRCxvQkFBcUJQLEVBQVUwRSxRQUVaLElBQTNDOEMsRUFBcUJLLFdBQVc5TixPQUNuQ3lOLEVBQXFCVSxRQUFVRCxHQUMzQmpJLEVBQVUwQixJQUFJd0csUUFBVUQsR0FFN0JULEVBQXFCVyxZQUFhLGNBQWVGLElBRTNDQSxHQUFxQjNLLEtBQUswRCxrQkFBbUIxRCxLQUFLdUosMkJBR3pEdkIsd0JBQTBCLFdBQ3JCaEksS0FBS2tFLDhCQUNSbEUsS0FBSzZILE1BQU8sMEJBQTJCLENBQ3RDQyxlQUFpQjlILEtBQUtxRyxzQkFFakJyRyxLQUFLK0gsUUFBUywwQkFBMkIvSCxLQUFLcUcsc0JBSXREUixPQUFTLFdBQ1I3RixLQUFLMkUsWUFBWTlELEtBQU0sU0FBVStFLEdBQ2hDQSxFQUFLQyxXQUdOOUYsRUFBU0csS0FBS3BGLFVBQVUrSyxPQUFPdEksTUFBT3lDLEtBQU0zQyxZQUc3Q3NJLGNBQWdCLFNBQVVtRixHQUN6QixJQUFJOUYsRUFBUWhGLEtBRVosSUFBTUYsRUFBRWdHLFNBQVUsQ0FBRSxtQkFBb0IsaUJBQWtCLGlCQUFtQmdGLEdBQzVFLE1BQU0sSUFBSWxOLE1BQU8sd0RBQTBEa04sR0FHNUUsT0FBUUEsR0FDUCxJQUFLLGdCQUNKOUYsRUFBTUwsWUFBWTlELEtBQU0sU0FBVTZILEdBQ2pDLElBQUlxQyxFQUFhL0YsRUFBTS9CLHNCQUF5QitCLEVBQU0vQixvQkFBb0IzSCxLQUFNMEosRUFBTzBELEVBQWN0QixPQUVyR3NCLEVBQWN0RSxJQUFJeUcsWUFBYSxjQUFlRSxHQUMxQy9GLEVBQU1nRyx1QkFBd0J0QyxHQUNqQ0EsRUFBY3RFLElBQUk2RyxRQUFTLE1BQU9KLFlBQWEsY0FBZUUsR0FBYUgsUUFBVUcsR0FDL0VyQyxFQUFjdEUsSUFBSXdHLFFBQVVHLEtBR3BDL0ssS0FBS29KLHFDQUNMLE1BQ0QsSUFBSyxpQkFDSnBFLEVBQU1aLElBQUlkLFNBQVUsV0FFcEIwQixFQUFNTCxZQUFZOUQsS0FBTSxTQUFVNkgsR0FDakMsSUFBSXdDLEVBQWNsRyxFQUFNOUIsdUJBQTBCOEIsRUFBTTlCLHFCQUFxQjVILEtBQU0wSixFQUFPMEQsRUFBY3RCLE9BRXhHc0IsRUFBY3RFLElBQUl5RyxZQUFhLGVBQWdCSyxHQUMzQ2xHLEVBQU1nRyx1QkFBd0J0QyxJQUNqQ0EsRUFBY3RFLElBQUk2RyxRQUFTLE1BQU9KLFlBQWEsZUFBZ0JLLEtBSWpFbEcsRUFBTVUsaUJBQ04sTUFDRCxJQUFLLG1CQUNKVixFQUFNTCxZQUFZOUQsS0FBTSxTQUFVNkgsR0FDakMsSUFBSXlDLEVBQWdCbkcsRUFBTWhDLHlCQUE0QmdDLEVBQU1oQyx1QkFBdUIxSCxLQUFNMEosRUFBTzBELEVBQWN0QixPQUU5R3NCLEVBQWN0RSxJQUFJeUcsWUFBYSxpQkFBa0JNLEdBQzdDbkcsRUFBTWdHLHVCQUF3QnRDLElBQ2pDQSxFQUFjdEUsSUFBSTZHLFFBQVMsTUFBT0osWUFBYSxpQkFBa0JNLEtBSW5FbkcsRUFBTXlDLHVCQU1UMkQsaUJBQW1CLFNBQVUxSSxHQUN4QjFDLEtBQUs4QyxZQUFhOUMsS0FBS3NJLGlCQUUzQnRJLEtBQUsyRSxZQUFZa0IsT0FBUW5ELEdBQ3JCMUMsS0FBS2dMLHVCQUF3QnRJLElBQWNBLEVBQVUwQixJQUFJeUYsU0FBU2hFLFNBQ3RFbkQsRUFBVW1ELFNBRU43RixLQUFLOEMsWUFBYTlDLEtBQUtxSixvQkFFM0JySixLQUFLb0osc0NBR05pQyw0QkFBOEIsV0FDN0JyTCxLQUFLeUgscUJBQ0x6SCxLQUFLK0YsVUFHTnJCLDBCQUE0QixXQUUzQjFFLEtBQUtzTCxTQUFVdEwsS0FBS3lDLFdBQVksTUFBTyxTQUFVMkUsR0FDaEQsSUFBSTFFLEVBQ0ExQyxLQUFLaUUsbUJBQ1J2QixFQUFZMUMsS0FBS2dKLG9CQUFxQjVCLEVBQU9wSCxLQUFLaUoscUJBQXNCN0IsSUFDeEVwSCxLQUFLa0osMEJBQTJCeEcsRUFBVzFDLEtBQUt1SSxrQkFBbUJ2SSxLQUFLeUMsV0FBV3pFLFFBQVNvSixLQUd6RnBILEtBQUtrRSw4QkFDUmxFLEtBQUs2SCxNQUFPLE1BQU9uRixHQUNmMUMsS0FBSytILFFBQVMsTUFBT3JGLEtBRzNCMUMsS0FBS3NMLFNBQVV0TCxLQUFLeUMsV0FBWSxTQUFVLFNBQVUyRSxHQUNuRCxJQUFJMUUsRUFFQTFDLEtBQUtpRSxtQkFDUnZCLEVBQVkxQyxLQUFLMkUsWUFBWW9FLGVBQWdCM0IsRUFBTUYsS0FDbkRsSCxLQUFLb0wsaUJBQWtCMUksSUFHcEIxQyxLQUFLa0UsOEJBQ1JsRSxLQUFLNkgsTUFBTyxVQUNSN0gsS0FBSytILFFBQVMsWUFHcEIvSCxLQUFLc0wsU0FBVXRMLEtBQUt5QyxXQUFZLFFBQVMsV0FDcEN6QyxLQUFLaUUsa0JBQW1CakUsS0FBSytGLFNBQzdCL0YsS0FBS2tFLDhCQUNSbEUsS0FBSzZILE1BQU8sU0FDUjdILEtBQUsrSCxRQUFTLFdBYXBCL0gsS0FBS3NMLFNBQVV0TCxLQUFLeUMsV0FBWSxPQUFRLFNBQVVBLEVBQVltQixHQUN6RDVELEtBQUtpRSxvQkFBc0MsSUFBaEJMLEVBQVFFLEtBQWdCOUQsS0FBS3NKLCtCQUFpQ3RKLEtBQUsrRixTQUM5Ri9GLEtBQUtrRSw4QkFDUmxFLEtBQUs2SCxNQUFPLFFBQ1I3SCxLQUFLK0gsUUFBUyxXQUlyQlEsZ0JBQWtCLFdBQ2pCLEdBQUt2SSxLQUFLdUwscUJBQXVCLENBRWhDLElBQUlDLEVBQVF4TCxLQUFLb0UsSUFBSTJGLEtBQU0sV0FDM0IsR0FBb0IsRUFBZnlCLEVBQU0vTyxPQUNWLE9BQU8rTyxFQUVULE9BQU94TCxLQUFLb0UsS0FHYnFILGtCQUFvQixTQUFVQyxHQUM3QixJQUFJQyxFQUFnQixLQUloQkMsRUFBZ0JqUyxFQUFHK1IsRUFBU0csZUFDaEMsR0FBSUQsRUFBY1gsUUFBUyxvQkFBcUJ4RSxJQUFJLEtBQU96RyxLQUFLb0UsSUFBSXFDLElBQUksR0FBeEUsQ0FNQSxJQUFJcUYsRUFBY0YsRUFBY1gsUUFBUyxvQkFPekMsT0FOeUIsRUFBckJhLEVBQVlyUCxTQUVma1AsRUFBZ0JHLEVBQVl2SCxLQUFNLGtCQUM5QjVLLEVBQUVvUyxVQUFXSixLQUFrQkEsRUFBZ0JLLFNBQVVMLEVBQWUsTUFHdEVBLElBR1JsSCxvQkFBc0IsV0FDckIsSUFBSXdILEVBQ0osR0FBSWpNLEtBQUs0QyxhQUNULENBQ0MsR0FBc0MsSUFBbENqSixFQUFHcUcsS0FBSzRDLGNBQWVuRyxPQUMxQixLQUFNLCtDQUFpRHVELEtBQUs0QyxhQUU3RHFKLEVBQW1CdFMsRUFBR3FHLEtBQUs0QyxjQUFlc0osWUFHMUNELEVBQW1Cak0sS0FBS3JHLEVBQUcsa0JBQW1CdVMsT0FFM0NELElBQW1Cak0sS0FBSzZDLHFCQUF1Qi9DLEVBQUVxTSxTQUFVRixLQUloRXhFLG1CQUFxQixXQUdwQixJQUFJMkUsRUFBb0J0TSxFQUFFcUgsTUFBT25ILEtBQUt5QyxXQUFXNEosT0FBUSxPQUN6RHJNLEtBQUt3RSxjQUFnQjFFLEVBQUV3TSxhQUFjRixFQUFtQnBNLEtBQUt3RSxlQUV6RDFFLEVBQUV3QixXQUFZdEIsS0FBS2dELDBCQUV0QmhELEtBQUt3RSxjQUFnQjFFLEVBQUV5TSxPQUFRdk0sS0FBS3dFLGNBQWUsU0FBVWdJLEdBQzVELE9BQU94TSxLQUFLZ0QsdUJBQXVCMUgsS0FBTTBFLEtBQU1BLEtBQUt5QyxXQUFXZ0UsSUFBSytGLEtBQ2xFeE0sUUFJTHNJLGVBQWlCLFdBRWhCLElBQU10SSxLQUFLOEMsV0FBYSxLQUFNLG1EQUM5QjlDLEtBQUt5TSxlQUFpQixDQUNyQmxHLE1BQVF6RyxFQUFFeUIsTUFBT3ZCLEtBQUt3RSxlQUN0QmtJLE9BQVMxTSxLQUFLb0csaUJBQWtCLENBQUViLEdBQUssYUFJekM4RCxrQkFBb0IsV0FDbkIsSUFBTXJKLEtBQUt5TSxlQUFpQixLQUFNLGdFQUtsQ3pNLEtBQUt3RixrQkFBbUIsR0FBSSxDQUFFdUIsUUFBUyxJQUVBLEVBQW5DL0csS0FBS3lNLGVBQWVsRyxNQUFNOUosU0FHN0J1RCxLQUFLd0Ysa0JBQW1CeEYsS0FBS3lNLGVBQWVsRyxNQUFPLENBQUVoQixHQUFLLE1BQU93QixRQUFTLElBTXhDLElBQTlCL0csS0FBS3dFLGNBQWMvSCxRQUN0QnVELEtBQUtzRixpQkFBa0J0RixLQUFLeU0sZUFBZUMsT0FBUSxDQUFFbkgsR0FBSyxXQUd2RHZGLEtBQUt3RSxjQUFjL0gsU0FBV3VELEtBQUt5TSxlQUFlbEcsTUFBTTlKLFNBRXZEdUQsS0FBS2tFLDhCQUNSbEUsS0FBSzZILE1BQU8sbUJBQW9CLENBQy9CQyxlQUFpQjlILEtBQUtxRyxvQkFDdEJpQixrQkFBb0IsS0FFZnRILEtBQUsrSCxRQUFTLG1CQUFvQi9ILEtBQUtxRyxvQkFBcUIsT0FLdEV1QixpQ0FBbUMsU0FBVStFLEdBQ3hDN00sRUFBRTJCLFlBQWFrTCxLQUFpQ0EsRUFBK0IsSUFLbkYsSUFBSUMsRUFBaURELEVBQ3JEQyxFQUFpRDlNLEVBQUUrTSxRQUFTRCxFQUFnRDVNLEtBQUt3RSxlQUVqSDFFLEVBQUVlLEtBQU0rTCxFQUFnRCxTQUFVSixHQUNqRXhNLEtBQUt1SSxrQkFBa0J3QixLQUFNLG1CQUFxQnlDLEVBQWEsS0FBTU0sWUFBYSxZQUU5RTlNLEtBQUsySixxQkFDUjNKLEtBQUt1SSxrQkFBa0J3QixLQUFNLHFCQUF1QnlDLEVBQWEsU0FBVU0sWUFBYSxhQUV2RjlNLE1BRUgsSUFBSStNLEVBQStDL00sS0FBS3dFLGNBQ3hEdUksRUFBK0NqTixFQUFFK00sUUFBU0UsRUFBOENKLEdBRXhHN00sRUFBRWUsS0FBTWtNLEVBQThDLFNBQVVQLEdBQy9EeE0sS0FBS3VJLGtCQUFrQndCLEtBQU0sbUJBQXFCeUMsRUFBYSxLQUFNbEksU0FBVSxZQUUzRXRFLEtBQUsySixxQkFDUjNKLEtBQUt1SSxrQkFBa0J3QixLQUFNLHFCQUF1QnlDLEVBQWEsU0FBVWxJLFNBQVUsYUFFcEZ0RSxPQUdKZ04sOEJBQWdDLFdBRS9CLElBQUloSSxFQUFRaEYsS0FFWkEsS0FBS3VJLGtCQUFrQmdDLFdBQVcxSixLQUFNLFdBQ3ZDLElBQUlvTSxFQUFldFQsRUFBR3FHLE1BQU91RSxLQUFNLGtCQUVuQyxHQUFJMEksRUFDSixDQUdDLElBQUloRyxFQUFZakMsRUFBTXZDLFdBQVdnRSxJQUFLd0csR0FDbENoRyxJQUVIakMsRUFBTXZDLFdBQVdvRCxPQUFRb0IsRUFBVyxDQUFFRixRQUFTLElBQy9DL0IsRUFBTXZDLFdBQVdxQixJQUFLbUQsRUFBVyxDQUFFRixRQUFTLEVBQU1tRyxNQUFTbEksRUFBTXZDLFdBQVcwSyxpQkFLM0VuTixLQUFLa0UsOEJBQWdDbEUsS0FBSzZILE1BQU8sV0FDaEQ3SCxLQUFLeUMsV0FBV3NGLFFBQVMsV0FFMUIvSCxLQUFLeUMsV0FBVzBLLFlBQWFuTixLQUFLeUMsV0FBV3lLLFFBSWxERSx5QkFBMkIsU0FBVW5HLEdBQ3BDLE9BQU9qSCxLQUFLMEMsV0FBYXpDLEdBRzFCZ0oscUJBQXVCLFNBQVVoQyxHQUNoQyxJQUFJdEUsRUFBbUIzQyxLQUFLMkMsaUJBRzVCLE9BRkk3QyxFQUFFd0IsV0FBWXFCLEtBQXFCQSxFQUFtQkEsRUFBa0JzRSxJQUVyRW5ILEVBQUU4QixPQUFRLENBQUV3RixNQUFRSCxHQUFhdEUsSUFHekNxRyxvQkFBc0IsU0FBVTVCLEVBQU96RSxHQUN0QyxJQUFJMEssRUFBdUJyTixLQUFLb04seUJBQTBCaEcsR0FDMUQsR0FBSXRILEVBQUUyQixZQUFhNEwsR0FBeUIsS0FBTSxpREFFbEQsSUFBSUMsRUFBZSxJQUFHLEVBQTBCM0ssR0FHaEQsT0FGQTJLLEVBQWFDLG1CQUFxQkQsRUFBYUUsZUFBaUJ4TixLQUV6RHNOLEdBR1JuRCxlQUFpQixTQUFVekgsR0FDMUIsSUFJSStLLEVBOEJKLE9BNUJJek4sS0FBS3VMLHNCQUVSa0MsRUFBcUIvSyxFQUFVMEIsSUFDL0IxQixFQUFVMEIsSUFBSUcsS0FBTSxpQkFBa0I3QixFQUFVMEUsTUFBTUYsTUFFOUNsSCxLQUFLMkosc0JBR1RqSCxFQUFVMEIsSUFBSXdDLEdBQUksT0FDckI2RyxFQUFxQi9LLEVBQVUwQixJQUMvQjFCLEVBQVUwQixJQUFJRyxLQUFNLGlCQUFrQjdCLEVBQVUwRSxNQUFNRixNQUV0RHVHLEVBQXFCL0ssRUFBVTBCLElBQUl3RixRQUFTLHVCQUF5QmxILEVBQVUwRSxNQUFNRixJQUFNLFdBQVkyQyxVQUlyRy9KLEVBQUV3QixXQUFZdEIsS0FBS2tELHdCQUNoQmxELEtBQUtrRCxxQkFBcUI1SCxLQXZCckIwRSxLQXVCa0MwQyxFQUFVMEUsU0FDdERxRyxFQUFtQm5KLFNBQVUsZ0JBQzdCNUIsRUFBVTBCLElBQUlFLFNBQVUsb0JBR3RCeEUsRUFBRXdCLFdBQVl0QixLQUFLZ0QsMEJBQ2hCaEQsS0FBS2dELHVCQUF1QjFILEtBN0J2QjBFLEtBNkJvQzBDLEVBQVUwRSxTQUN4RHFHLEVBQW1CbkosU0FBVSxrQkFDN0I1QixFQUFVMEIsSUFBSUUsU0FBVSxvQkFHbkJtSixHQUdSakcsc0JBQXdCLFNBQVVrRyxHQUNqQyxPQUFPNU4sRUFBRXZELElBQUttUixFQUFVLFNBQVVDLEdBQ2pDLElBQU03TixFQUFFb0IsU0FBVXlNLEdBQVcsT0FBT0EsRUFDcEMsSUFBSUMsRUFBaUI1QixTQUFVMkIsRUFBUSxJQUN2QyxPQUFRQyxHQUFrQkQsRUFBU0MsRUFBaUJELEtBSXREaEcscUJBQXVCLFNBQVVrRyxFQUFRQyxHQUN4QyxPQUFJRCxFQUFPcFIsUUFBVXFSLEVBQU9yUixRQUNMcUQsRUFBRXdNLGFBQWN1QixFQUFRQyxHQUFTclIsUUFDN0JvUixFQUFPcFIsUUFHbkM4TyxtQkFBcUIsV0FDcEIsTUFBb0QsVUFBN0N2TCxLQUFLb0UsSUFBSS9JLEtBQU0sV0FBWTBTLGVBR25DcEUsa0JBQW9CLFdBQ25CLE9BQVMzSixLQUFLdUwsc0JBR2ZQLHVCQUF5QixTQUFVdEksR0FDbEMsT0FBTzFDLEtBQUsySixzQkFBeUJqSCxFQUFVMEIsSUFBSXdDLEdBQUksT0FReERELG1CQUFxQixXQUlwQixPQUZlM0csS0FBS3VJLGtCQUFrQndCLEtBQU0seUNBSzdDaUUsV0FBYSxDQUNaQyxRQUFVLEdBQ1ZDLFVBQVksSUFHYmhLLDRCQUE4QixXQUM3QixPQUFRcEUsRUFBRTJCLFlBQWExQixFQUFTb0UsVUFHakN1QixlQUFpQixXQUNoQixJQUFJbkMsRUFBa0J6RCxFQUFFOEIsT0FBUSxDQUMvQnVNLEtBQU8sSUFDUEMsU0FBVyxHQUNYQyxzQkFBdUIsRUFDdkI5SCxNQUFRdkcsS0FBS3VMLHFCQUF1QixrQ0FBb0MsMEJBQ3hFK0MsTUFBUXhPLEVBQUV5TyxLQUFNdk8sS0FBS3dPLFdBQVl4TyxNQUNqQ3lPLE9BQVMzTyxFQUFFeU8sS0FBTXZPLEtBQUswTyxZQUFhMU8sTUFDbkMyTyxLQUFPN08sRUFBRXlPLEtBQU12TyxLQUFLNE8sVUFBVzVPLE1BQy9CNk8sUUFBVS9PLEVBQUV5TyxLQUFNdk8sS0FBSzhPLFNBQVU5TyxNQUNqQytPLEtBQU9qUCxFQUFFeU8sS0FBTXZPLEtBQUtnUCxNQUFPaFAsT0FDekJGLEVBQUVtUCxPQUFRalAsS0FBTSxvQkFFbkJBLEtBQUtvRSxJQUFNcEUsS0FBS29FLElBQUlkLFNBQVVDLElBSS9CaUwsV0FBYSxTQUFVVSxFQUFPQyxHQUM3QixJQUFJQyxFQUFtQnBQLEtBQUt5QyxXQUFXZ0UsSUFBSzBJLEVBQUczSSxLQUFLakMsS0FBTSxtQkFDdER2RSxLQUFLa0UsOEJBQ1JsRSxLQUFLNkgsTUFBTyxZQUFhLENBQUV1SCxpQkFBbUJBLElBQzFDcFAsS0FBSytILFFBQVMsWUFBYXFILElBR2pDVixZQUFjLFNBQVVRLEVBQU9DLEdBQzlCLElBQUlDLEVBQW1CcFAsS0FBS3lDLFdBQVdnRSxJQUFLMEksRUFBRzNJLEtBQUtqQyxLQUFNLG1CQUV0RHZFLEtBQUtrRSw4QkFDUmxFLEtBQUs2SCxNQUFPLGFBQWMsQ0FBRXVILGlCQUFtQkEsSUFDM0NwUCxLQUFLK0gsUUFBUyxhQUFjcUgsSUFHbENSLFVBQVksU0FBVU0sRUFBT0MsR0FDNUIsSUFBSUMsRUFBbUJwUCxLQUFLeUMsV0FBV2dFLElBQUswSSxFQUFHM0ksS0FBS2pDLEtBQU0sbUJBRXREOEssRUFEdUJyUCxLQUFLdUksa0JBQ0lnQyxXQUFXeE0sTUFBT29SLEVBQUczSSxPQUV4QyxHQUFiNkksR0FBa0JELEdBR3JCcFAsS0FBS3lDLFdBQVdvRCxPQUFRdUosR0FHbkJBLElBRU5wUCxLQUFLZ04sZ0NBQ0xoTixLQUFLZ0ksMEJBRURoSSxLQUFLa0UsOEJBQ1JsRSxLQUFLNkgsTUFBTyxXQUFZLENBQUV1SCxpQkFBbUJBLEVBQWtCQyxTQUFXQSxJQUN0RXJQLEtBQUsrSCxRQUFTLFdBQVlxSCxFQUFrQkMsS0FHbERQLFNBQVcsU0FBVUksRUFBT0MsR0FFM0IsSUFDSUcsRUFEZUgsRUFBR0ksT0FDc0JsTCxLQUFNLFFBQ2xELEdBQU1pTCxHQUE4QkEsRUFBeUI3TSxXQUE3RCxDQUVBLElBQUk0TSxFQUFXclAsS0FBS3VJLGtCQUFrQmdDLFdBQVd4TSxNQUFPb1IsRUFBRzNJLE1BQ3ZEZ0osRUFBZ0JGLEVBQXlCN00sV0FBV2dFLElBQUswSSxFQUFHM0ksS0FBS2pDLEtBQU0sbUJBQzNFK0ssRUFBeUI3TSxXQUFXb0QsT0FBUTJKLEdBQzVDeFAsS0FBS3lDLFdBQVdxQixJQUFLMEwsRUFBZSxDQUFFQyxHQUFLSixJQUMzQ0csRUFBYy9NLFdBQWF6QyxLQUFLeUMsV0FDaEN6QyxLQUFLc0YsaUJBQWtCa0ssS0FHeEJSLE1BQVEsU0FBVUUsRUFBT0MsR0FHeEJuUCxLQUFLdUksa0JBQWtCd0IsS0FBTSw0QkFBNkJXLFFBRzNEZ0YsV0FBYSxTQUFVUixHQUN0QixJQUFNbFAsS0FBS3FELGlCQUFtQixPQUFPLEVBRXJDLElBQUlzTSxHQUFPLEVBRVgsR0FBMEQsR0FBdEQzUCxLQUFLcUcsa0JBQW1CLENBQUVkLEdBQUssV0FBYTlJLE9BQ2hELENBSUMsSUFBSW1ULEVBQWdCNVAsS0FBS29HLGlCQUFrQixDQUFFYixHQUFLLFdBQzlDMkosRUFBTVcsUUFBVTdQLEtBQUtnTyxXQUFXQyxTQUE2QixJQUFsQjJCLEdBRTlDNVAsS0FBS3NGLGlCQUFrQnNLLEVBQWdCLEVBQUcsQ0FBRXJLLEdBQUssV0FDakRvSyxHQUFPLEdBRUNULEVBQU1XLFFBQVU3UCxLQUFLZ08sV0FBV0UsV0FBYTBCLElBQWtCNVAsS0FBS3lDLFdBQVdoRyxPQUFTLElBRWhHdUQsS0FBS3NGLGlCQUFrQnNLLEVBQWdCLEVBQUcsQ0FBRXJLLEdBQUssV0FDakRvSyxHQUFPLEdBSVQsT0FBU0EsR0FHVkcsc0JBQXdCLFNBQVVwRSxHQUNqQyxJQUFJQyxFQUFnQjNMLEtBQUt5TCxrQkFBbUJDLEdBRTVDLEdBQUlDLEVBQWdCLENBQ25CLElBQUlvRSxFQUFlL1AsS0FBS3lDLFdBQVdnRSxJQUFLa0YsR0FDeEMsR0FBSTNMLEtBQUtrRSw4QkFBZ0MsQ0FDeEMsSUFBSUcsRUFBTyxDQUNWMEwsYUFBZUEsRUFDZkMsZUFBaUJ0RSxFQUFTdUUsU0FBV3ZFLEVBQVN3RSxTQUcvQ3BRLEVBQUVlLEtBQU0sQ0FBRSxpQkFBa0Isa0JBQW1CLDRCQUE4QixTQUFVc1AsR0FDdEY5TCxFQUFNOEwsR0FBZSxXQUNwQnpFLEVBQVV5RSxRQUlablEsS0FBSzZILE1BQU8sUUFBU3hELFFBRWpCckUsS0FBSytILFFBQVMsUUFBU2dJLEdBRzdCLEdBQU0vUCxLQUFLOEMsWUFBZ0I5QyxLQUFLK0MsY0FFaEMsR0FBSTRJLEVBQ0osQ0FFQyxHQUFJN0wsRUFBRXdCLFdBQVl0QixLQUFLZ0QsMEJBQ3BCaEQsS0FBS2dELHVCQUF1QjFILEtBQU0wRSxLQUFNQSxLQUFLeUMsV0FBV2dFLElBQUtrRixJQUUvRCxPQUlELEdBQUkzTCxLQUFLbUQsZ0JBQWtCdUksRUFBUzBFLFNBQ3BDLENBQ0MsSUFBSUMsR0FBMEIsRUFFRSxFQUE1QnJRLEtBQUt3RSxjQUFjL0gsUUFFdEJ1RCxLQUFLeUMsV0FBV3NILEtBQU0sU0FBVXVHLEdBSS9CLE9BSEFELElBR092USxFQUFFZ0csU0FBVTlGLEtBQUt3RSxjQUFlOEwsRUFBY3BKLE1BQ25EbEgsTUFHSixJQUFJdVEsR0FBb0IsRUFDeEJ2USxLQUFLeUMsV0FBV3NILEtBQU0sU0FBVXVHLEdBSS9CLE9BSEFDLElBR09ELEVBQWNwSixLQUFPeUUsR0FDMUIzTCxNQU9ILElBTEEsSUFBSXdRLEdBQTJELEdBQTNCSCxFQUErQkUsRUFBbUJGLEVBQ2xGSSxFQUF1QkMsS0FBS0MsSUFBS0osRUFBa0JDLEdBQ25ESSxFQUF1QkYsS0FBS0csSUFBS04sRUFBa0JDLEdBRW5EMUosRUFBbUIsR0FDZGdLLEVBQVlMLEVBQXNCSyxHQUFhRixFQUFzQkUsSUFDN0VoSyxFQUFpQnhKLEtBQU0wQyxLQUFLeUMsV0FBV2dOLEdBQUlxQixHQUFZNUosS0FLeEQsR0FKQWxILEtBQUt3RixrQkFBbUJzQixFQUFrQixDQUFFdkIsR0FBSyxRQUk3Q3NELFNBQVNrSSxXQUFhbEksU0FBU2tJLFVBQVVuSSxNQUM1Q0MsU0FBU2tJLFVBQVVuSSxhQUNmLEdBQUdvSSxPQUFPQyxhQUFjLENBQzVCLElBQUlDLEVBQU1GLE9BQU9DLGVBQ2JDLEdBQU9BLEVBQUlDLGlCQUNkRCxFQUFJQyx3QkFHSW5SLEtBQUttRCxnQkFBa0JyRCxFQUFFZ0csU0FBVTlGLEtBQUt3RSxjQUFlbUgsTUFBdUIzTCxLQUFLb0QsZUFBaUJzSSxFQUFTd0UsU0FBV3hFLEVBQVN1RSxTQUV2SW5RLEVBQUVnRyxTQUFVOUYsS0FBS3dFLGNBQWVtSCxHQUNuQzNMLEtBQUt3RixrQkFBbUIxRixFQUFFK00sUUFBUzdNLEtBQUt3RSxjQUFlbUgsR0FBaUIsQ0FBRXBHLEdBQUssUUFDM0V2RixLQUFLd0Ysa0JBQW1CMUYsRUFBRXNSLE1BQU9wUixLQUFLd0UsY0FBZSxDQUFDbUgsSUFBa0IsQ0FBRXBHLEdBQUssUUFHcEZ2RixLQUFLd0Ysa0JBQW1CLENBQUVtRyxHQUFpQixDQUFFcEcsR0FBSyxhQUluRHZGLEtBQUt3RixrQkFBbUIsS0FJMUI2TCx3QkFBMEIsU0FBVTNGLEdBRW5DLElBQUlDLEVBQWdCM0wsS0FBS3lMLGtCQUFtQkMsR0FFNUMsR0FBSUMsRUFDSixDQUNDLElBQUlvRSxFQUFlL1AsS0FBS3lDLFdBQVdnRSxJQUFLa0YsR0FFcEMzTCxLQUFLa0UsOEJBQ1JsRSxLQUFLNkgsTUFBTyxjQUFlLENBQUVrSSxhQUFlQSxFQUFjQyxlQUFpQnRFLEVBQVN1RSxTQUFXdkUsRUFBU3dFLFVBQ3BHbFEsS0FBSytILFFBQVMsY0FBZWdJLEtBSXBDdUIsd0JBQTBCLFNBQVU1RixHQUM3QjFMLEtBQUs4QyxZQUFnQjlDLEtBQUsrQyxlQUMxQnBKLEVBQUcrUixFQUFTNkYsUUFBUzNLLEdBQUkscUJBRS9CNUcsS0FBS3dGLGtCQUFtQixNQUd2QixDQUNGZ00sK0JBQWlDLFNBQVVDLEdBQzFDeFIsRUFBK0J3UixLQVdqQzFSLEVBQVM4RCxZQUFjLEdBRXZCOUQsRUFBUzhELFlBQVlDLElBQU0sU0FBVThCLEVBQU04TCxHQUN0QzVSLEVBQUUyQixZQUFhaVEsS0FBZ0NBLEVBQThCLFdBSWpGOUwsRUFBSzdCLFdBQWEsU0FBVUgsR0FDM0IsSUFBSW9CLEVBQVFoRixLQUNSMlIsRUFBeUIsR0FDekJDLEVBQXVDLEdBRXZDbFIsRUFBcUJaLEVBQUVtUCxPQUFRalAsS0FBTTBSLEdBRXpDLElBQU01UixFQUFFMkIsWUFBYWYsR0FBdUIsQ0FDM0MsSUFBSUMsRUFBK0JGLEVBQThCQyxHQUVqRVosRUFBRWUsS0FBTUYsRUFBOEIsU0FBVWtSLEVBQXNCOVEsR0FDckUsSUFBSUMsRUFBcUI2USxFQUFxQnJRLFNBQzFDUCxFQUF5QjRRLEVBQXFCblEsYUFFbEQsR0FBSVYsRUFBcUIsQ0FJeEIsS0FBUTRDLElBQWE5RCxFQUFFZ0csU0FBVWhHLEVBQUV1QixLQUFNdUMsR0FBVzdDLEtBQXNCakIsRUFBRTJCLFlBQWF1RCxFQUFPakUsSUFDL0YsTUFBTSxJQUFJbkQsTUFBTyxvQkFBdUJtRCxFQUFpQix1QkFFMUQsR0FBSTZDLEdBQVc5RCxFQUFFZ0csU0FBVWhHLEVBQUV1QixLQUFNdUMsR0FBVzdDLElBQW9CakIsRUFBRTJCLFlBQWFtQyxFQUFTN0MsSUFDekYsTUFBTSxJQUFJbkQsTUFBTyxvQkFBdUJtRCxFQUFpQixrQ0FJM0QsR0FBSTZDLEdBQVc3QyxLQUFrQjZDLElBQWE5RCxFQUFFMkIsWUFBYW1DLEVBQVM3QyxJQUFxQixDQUMxRixJQUFJK1EsRUFBVzlNLEVBQU9qRSxHQUNsQmdSLEVBQVduTyxFQUFTN0MsR0FHbEJqQixFQUFFMkIsWUFBYXFRLElBQWNBLElBQWFDLElBQy9DSCxFQUFzQzdRLEdBQW1CK1EsRUFDekRILEVBQXdCNVEsR0FBbUJnUixHQUU1Qy9NLEVBQU9qRSxHQUFtQmdSLE9BSWxCalMsRUFBRTJCLFlBQWF1RCxFQUFPakUsTUFFOUJpRSxFQUFPakUsR0FBbUJFLEtBS2lCLEVBQTFDbkIsRUFBRXVCLEtBQU1zUSxHQUF5QmxWLFNBQ2hDcUQsRUFBRXdCLFdBQVkwRCxFQUFNZ04sa0JBQ3ZCaE4sRUFBTWdOLGlCQUFrQkwsRUFBd0JDLEdBQ3hDOVIsRUFBRXdCLFdBQVkwRCxFQUFNSCxvQkFDNUJHLEVBQU1ILGtCQUFtQjhNLEVBQXdCQyxLQUlwRGhNLEVBQUtxTSxXQUFhLFdBQ2pCLElBQUl2UixFQUFxQlosRUFBRW1QLE9BQVFqUCxLQUFNMFIsR0FDekMsR0FBSTVSLEVBQUUyQixZQUFhZixHQUF1QixNQUFPLEdBRWpELElBQUlDLEVBQStCRixFQUE4QkMsR0FDN0R3UixFQUFlcFMsRUFBRXVCLEtBQU1WLEdBRTNCLE9BQU9iLEVBQUVxUyxLQUFNblMsS0FBTWtTLEtBNER2QnROLG1CQUFxQixTQUFVN0UsRUFBVUQsR0FLeEMsSUFBSXNTLEVBQVksU0FBU0MsR0FDeEJyUyxLQUFLc1MsT0FBUyxHQUNkdFMsS0FBS3VTLGNBQWdCLEdBQ3JCdlMsS0FBS3dTLGVBQWlCLEdBQ3RCeFMsS0FBS3lTLGdCQUVMM1MsRUFBRWUsS0FBS3dSLEVBQU9yUyxLQUFLOEQsSUFBSzlELE9BTXpCRixFQUFFOEIsT0FBT3dRLEVBQVV0WCxVQUFXLENBTTdCZ0osSUFBSyxTQUFTOEIsRUFBTThNLEdBQ25CLElBQUlDLEVBQVUvTSxFQUFLc0IsS0FHbkJsSCxLQUFLc1MsT0FBT0ssR0FBVy9NLEdBR2R3QixRQUNScEgsS0FBS3VTLGNBQWMzTSxFQUFLd0IsTUFBTUYsS0FBT3lMLEdBSWxDRCxJQUNIMVMsS0FBS3dTLGVBQWVFLEdBQWVDLEdBR3BDM1MsS0FBS3lTLGlCQUtONUwsWUFBYSxTQUFTTyxHQUNyQixPQUFPcEgsS0FBSytJLGVBQWUzQixFQUFNRixNQU1sQzZCLGVBQWdCLFNBQVM2SixHQUN4QixJQUFJRCxFQUFVM1MsS0FBS3VTLGNBQWNLLEdBQ2pDLE9BQU81UyxLQUFLNlMsVUFBVUYsSUFJdkJHLGFBQWMsU0FBUy9VLEdBQ3RCLElBQUk0VSxFQUFVM1MsS0FBS3dTLGVBQWV6VSxHQUNsQyxPQUFPaUMsS0FBSzZTLFVBQVVGLElBS3ZCSSxZQUFhLFNBQVNoVixHQUNyQixPQUFPK0IsRUFBRWtULE9BQU9oVCxLQUFLc1MsUUFBUXZVLElBSTlCOFUsVUFBVyxTQUFTM0wsR0FDbkIsT0FBT2xILEtBQUtzUyxPQUFPcEwsSUFHcEIrTCxlQUFpQixTQUFVL0wsR0FDMUIsSUFBSW5KLEdBQVMsRUFNYixPQUxXK0IsRUFBRWlLLEtBQU0vSixLQUFLc1MsT0FBUSxTQUFXMU0sR0FFMUMsR0FEQTdILElBQ0k2SCxFQUFLd0IsTUFBTUYsS0FBT0EsRUFDckIsT0FBT3RCLElBRVM3SCxHQUFTLEdBSTVCOEgsT0FBUSxTQUFTRCxHQUNoQixJQUFJK00sRUFBVS9NLEVBQUtzQixJQUdmdEIsRUFBS3dCLGNBQ0RwSCxLQUFLdVMsY0FBYzNNLEVBQUt3QixNQUFNRixLQUl0Q3BILEVBQUVvVCxJQUFJbFQsS0FBS3dTLGVBQWdCLFNBQVN0TCxFQUFLaU0sR0FDeEMsR0FBSWpNLElBQVF5TCxFQUVYLGNBRE8zUyxLQUFLd1MsZUFBZVcsSUFDcEIsR0FFTm5ULGFBR0lBLEtBQUtzUyxPQUFPSyxHQUduQjNTLEtBQUt5UyxpQkFNTm5YLEtBQU0sU0FBUzhYLEdBQ2RwVCxLQUFLekMsTUFBTTZWLEVBQVF0VCxFQUFFdVQsS0FBS2hXLGFBTTNCRSxNQUFPLFNBQVM2VixFQUFRaFcsR0FDdkIwQyxFQUFFZSxLQUFLYixLQUFLc1MsT0FBUSxTQUFTMU0sR0FDeEI5RixFQUFFd0IsV0FBV3NFLEVBQUt3TixLQUNyQnhOLEVBQUt3TixHQUFRN1YsTUFBTXFJLEVBQU14SSxHQUFRLE9BTXBDcVYsY0FBZSxXQUNkelMsS0FBS3ZELE9BQVNxRCxFQUFFd1QsS0FBS3RULEtBQUtzUyxXQXVCNUIsT0FUQXhTLEVBQUVlLEtBTFksQ0FBQyxVQUFXLE9BQVEsTUFBTyxPQUFRLFNBQVUsU0FDbkQsU0FBVSxTQUFVLFFBQVMsTUFBTyxPQUFRLE1BQU8sVUFDbkQsV0FBWSxTQUFVLFVBQVcsUUFBUyxVQUFXLE9BQ3JELE9BQVEsVUFBVyxVQUFXLFNBRXRCLFNBQVN1UyxHQUN4QmhCLEVBQVV0WCxVQUFVc1ksR0FBVSxXQUM3QixJQUNJaFcsRUFBTyxDQURDMEMsRUFBRWtULE9BQU9oVCxLQUFLc1MsU0FDUHhWLE9BQU9nRCxFQUFFeVQsUUFBUWxXLFlBQ3BDLE9BQU95QyxFQUFFc1QsR0FBUTdWLE1BQU11QyxFQUFHMUMsTUFLckJnVixFQXRKYSxDQXVKbEJyUyxFQUFVRCxHQUVOQyxFQUFTNEIsZ0JBajJDTyxtQkFBWDdILEdBQXlCQSxFQUFPOEYsSUFFM0M5RixFQUFRLGlDQUFpQyxDQUFFLGFBQWMsV0FBWSxVQUFZRSxHQUNuRCxvQkFBWjJFLFFBRWxCRSxPQUFPRixRQUFVM0UsRUFBU0gsRUFBUSxjQUFnQkEsRUFBUyxZQUFjQSxFQUFTLFlBQWFGLEdBRy9GSyxFQUFTRCxFQUFLK0YsRUFBRy9GLEVBQUtnRyxTQUFZaEcsRUFBSzhGLFFBQVU5RixFQUFLeVosT0FBU3paLEVBQUtKLEdBdTJDakVNLEVBQWdCLEdBbUJoQkMsRUFBWSxTQUFTdVosR0FDeEIsSUFBSUMsRUFBUXRXLEVBQU8wQyxFQUFFNlQsS0FBS3RXLFdBVzFCLE9BSkF5QyxFQUFFZSxLQUFLNUcsRUFBZSxTQUFTbU4sR0FKVCxJQUFTQSxFQUFPd00sR0FLaENGLElBTGdDRSxHQUFQeE0sRUFLQ0EsR0FBYXlNLGVBQWVKLEdBSnZEM1QsRUFBRWdVLFVBQVVGLEdBQVlBLEdBQ3BCOVQsRUFBRW9CLFNBQVMwUyxHQUFNeE0sRUFBTXdNLEdBQU1BLEdBQUlyVyxNQUFNNkosRUFBT2hLLE1BSXJEc1csRUFBU3RNLEVBQU15TSxlQUFlSCxVQUV6QkEsR0FNUjNULFNBQVNnVSxRQUFRalosVUFBVWtaLFNBQVdsVSxFQUFFbVUsS0FBS2xVLFNBQVNnVSxRQUFRalosVUFBVWtaLFNBQVUsU0FBU0UsRUFBUUMsRUFBVXZRLEdBQzVHLElBQUk4UCxFQUFTeFosRUFBVSxxQkFBc0JpYSxFQUFVdlEsR0FDbkQ4UCxFQUNDVSxRQUFRVixFQUFTLG1EQUNwQlEsRUFBTzVZLEtBQUswRSxLQUFNbVUsRUFBVXZRLEdBRzdCc1EsRUFBTzVZLEtBQUswRSxLQUFNbVUsRUFBVXZRLEtBTTlCb04sT0FBT3FELGVBQWlCLFNBQVN6VixHQUNoQyxPQUFPMUUsRUFBVSxxQkFBc0IwRSxJQU14Q2tCLEVBQUU4QixPQUFPN0IsU0FBU3VVLE1BQU14WixVQUFXLENBRWxDeVosUUFBUyxHQUNUQyxrQkFBa0IsRUFDbEJDLGVBQWdCLEdBQ2hCQyxnQkFBaUIsR0FJakJDLGNBQWUsV0FTZCxPQVJBM1UsS0FBSzZULGVBQWlCL1QsRUFBRThCLE9BQU8sR0FBSSxDQUNsQzhSLE9BQVEsNEJBQ1JrQixvQkFBb0IsRUFDcEJDLG9CQUFvQixHQUNsQjdVLEtBQUt1VSxTQUFXLElBQ25CdlUsS0FBS3dVLGtCQUFtQixFQUN4QnhVLEtBQUs4VSxpQkFDTDlVLEtBQUsrVSx5QkFDRS9VLE1BS1JnVixhQUFjLFdBS2IsT0FKQWhWLEtBQUt3VSxrQkFBbUIsRUFDeEJ4VSxLQUFLeVUsZUFBaUIsR0FDdEJ6VSxLQUFLMFUsZ0JBQWtCLEdBQ3ZCMVUsS0FBSytVLHlCQUNFL1UsTUFLUmlWLGdCQUFpQixXQUdoQixPQUZBalYsS0FBSzhVLGlCQUNMOVUsS0FBSytVLHlCQUNFL1UsTUFNUmtWLGdCQUFpQixXQUNoQixHQUFLbFYsS0FBS3dVLGlCQUlWLE9BSEF4VSxLQUFLbVYsV0FBYW5WLEtBQUt5VSxlQUN2QnpVLEtBQUs4VSxpQkFDTDlVLEtBQUsrVSx5QkFDRS9VLE1BU1JvVixrQkFBbUIsU0FBU0MsR0FDM0IsSUFBS0EsRUFBTyxPQUFPdlYsRUFBRXdWLFFBQVF0VixLQUFLMFUsa0JBQTJCNVUsRUFBRXlCLE1BQU12QixLQUFLMFUsaUJBQzFFLElBQUlhLEVBQUtDLEdBQVUsRUFBT0MsRUFBTXpWLEtBQUswVSxnQkFDckMsSUFBSyxJQUFJblEsS0FBUThRLEVBQ1p2VixFQUFFNFYsUUFBUUQsRUFBSWxSLEdBQVFnUixFQUFNRixFQUFNOVEsT0FDckNpUixJQUFZQSxFQUFVLEtBQUtqUixHQUFRZ1IsR0FFckMsT0FBT0MsR0FHUlYsZUFBZ0IsV0FDZjlVLEtBQUt5VSxlQUFpQjNVLEVBQUV5QixNQUFNdkIsS0FBS21WLFlBQ25DblYsS0FBSzBVLGdCQUFrQixJQU14QkssdUJBQXdCLFdBL0hDLElBQVMzTixFQWdJakNwSCxLQUFLK0gsUUFBUSxrQkFBbUJqSSxFQUFFd1YsUUFBUXRWLEtBQUswVSxpQkFBa0I1VSxFQUFFeUIsTUFBTXZCLEtBQUswVSxrQkFDMUUxVSxLQUFLdVUsVUFqSXdCbk4sRUFpSUtwSCxLQWhJbENGLEVBQUV3VixRQUFRbE8sRUFBTXNOLGlCQUdwQnphLEVBQWdCNkYsRUFBRXlNLE9BQU90UyxFQUFlLFNBQVMwYixHQUFLLE9BQU92TyxFQUFNRixLQUFPeU8sRUFBRXpPLE1BRnZFcEgsRUFBRThWLFVBQVUzYixFQUFlLENBQUNpTixJQUFJRSxFQUFNRixPQUFPak4sRUFBY3FELEtBQUs4SixPQXFJdkVySCxTQUFTdVUsTUFBTXhaLFVBQVUrYSxJQUFNL1YsRUFBRW1VLEtBQUtsVSxTQUFTdVUsTUFBTXhaLFVBQVUrYSxJQUFLLFNBQVNDLEVBQVEzQyxFQUFLb0MsRUFBSzNSLEdBQzlGLElBQUl5UixFQUFPbFcsRUFDWCxPQUFXLE1BQVBnVSxFQUFvQm5ULE1BRUwsaUJBQVJtVCxHQUNWa0MsRUFBUWxDLEVBQ1J2UCxFQUFVMlIsSUFFVEYsRUFBUSxJQUFJbEMsR0FBT29DLEVBRXJCM1IsSUFBWUEsRUFBVSxJQUd0QnpFLEVBQU0yVyxFQUFPeGEsS0FBSzBFLEtBQU1xVixFQUFPelIsR0FFM0I1RCxLQUFLd1UsbUJBQXFCNVEsRUFBUW1ELFNBQ3JDakgsRUFBRWUsS0FBS3dVLEVBQU92VixFQUFFeU8sS0FBSyxTQUFTZ0gsRUFBS3BDLEdBQzlCclQsRUFBRTRWLFFBQVExVixLQUFLeVUsZUFBZXRCLEdBQU1vQyxVQUNoQ3ZWLEtBQUswVSxnQkFBZ0J2QixHQUU1Qm5ULEtBQUswVSxnQkFBZ0J2QixHQUFPb0MsR0FDM0J2VixPQUNIQSxLQUFLK1UsMEJBRUM1VixLQUtSWSxTQUFTZ1csS0FBT2pXLEVBQUVtVSxLQUFLbFUsU0FBU2dXLEtBQU0sU0FBU0MsRUFBUzVDLEVBQVFoTSxFQUFPeEQsR0FjdEUsT0FiQUEsSUFBWUEsRUFBVSxJQUVSLFVBQVZ3UCxJQUNIeFAsRUFBUXFTLFFBQVVuVyxFQUFFbVUsS0FBS3JRLEVBQVFxUyxRQUFTblcsRUFBRXlPLEtBQUssU0FBUzJILEVBQVk3UixFQUFNOFIsRUFBWUMsR0FDdkYsSUFBSWpYLEVBTUosT0FMSStXLElBQVkvVyxFQUFNK1csRUFBVzVhLEtBQUswRSxLQUFNcUUsRUFBTThSLEVBQVlDLElBQzFEaFAsRUFBTW9OLG1CQUNUcE4sRUFBTTBOLGlCQUNOMU4sRUFBTTJOLDBCQUVBNVYsR0FDTGEsUUFFR2dXLEVBQVE1QyxFQUFRaE0sRUFBT3hELEtBSWhDOUosRUFBTywwQkFBMkIsY0FPbENBLEVBQVEsZUFBZSxHQUFJLFdBRTFCLE9BQU9pRyxTQUFTdVUsTUFBTTFTLE9BQVEsQ0FFN0J5VSxTQUFVLENBQ1RDLFFBQVMsS0FDVHhYLEdBQUksR0FDSndVLEtBQU0sT0FDTmlELElBQUssSUFHTjVTLFdBQVksV0FDWDNELEtBQUsyVSxxQkFXUjdhLEVBQVEsd0JBQXdCLEdBQUksV0FFbkMsTUFBTyxDQU1OMGMsc0JBQXVCLENBQ3RCM00sT0FBUSxHQUNSVSxTQUFVLElBUVhrTSxjQUFlLEdBUWZDLG1CQUFvQixTQUFVOVMsR0FFN0IsSUFBSStTLEVBQU8zVyxLQUFLNFcsb0JBSVhELEVBQUs5TSxRQUFVakcsR0FBV0EsRUFBUWlHLFFBQ3RDN0osS0FBSzZXLFdBQVlqVCxFQUFRaUcsUUFJMUIvSixFQUFFZSxLQUFNOFYsRUFBS3BNLFNBQVUsU0FBVXVNLEVBQVlDLEdBRTVDLElBQU9ELEVBQVdFLGNBQWUsSUFBU0YsRUFBV0UsWUFBYWhYLE1BQVMsQ0FFMUUsSUFDQ2lYLEVBREdDLEVBQVlsWCxLQUFLeUcsSUFBS3NRLEdBR3JCRCxFQUFXSyxPQUNmRixFQUFRSCxFQUFXSyxPQUFRRCxHQUNoQixVQUFZSixFQUFXTSxLQUNsQ0gsRUFBUWpHLE9BQU9xRyxhQUFhQyxVQUFVQyxVQUFXVCxFQUFXVSxNQUFPTixHQUN4RCxlQUFpQkosRUFBV00sT0FDdkNILEVBQVFqRyxPQUFPcUcsYUFBYUMsVUFBVUcsZUFBZ0JYLEVBQVdVLE1BQU9OLElBR3pFbFgsS0FBSzZWLElBQUtrQixFQUFXRSxHQUdoQixVQUFZSCxFQUFXTSxLQUMzQnBYLEtBQUswWCw0QkFBNkJULEdBR3ZCLGVBQWlCSCxFQUFXTSxPQUV2Q0gsRUFBTXBOLE9BQVM3SixLQUNmaVgsRUFBTXBXLEtBQU0sU0FBVThXLEdBRXJCM1gsS0FBSzBYLDRCQUE2QkMsSUFFaEMzWCxTQU1IQSxPQVVKNFgsZ0JBQWlCLFdBRWhCLElBQUlDLEVBQVEsR0FVWixPQVJBL1gsRUFBRWUsS0FBTWIsS0FBSzRXLG9CQUFvQnJNLFNBQVUsU0FBVWxHLEVBQU04TyxHQUVuRDlPLEVBQUsyUyxjQUFlLElBQVMzUyxFQUFLMlMsWUFBYWhYLE9BQ3JENlgsRUFBTXZhLEtBQU02VixJQUdYblQsTUFFSTZYLEdBVVJDLFdBQVksV0FFWCxJQUFJbkIsRUFBTzNXLEtBQUs0VyxvQkFFaEIsUUFBS0QsRUFBSzlNLFFBQ0Y4TSxFQUFLOU0sT0FBTzFCLFdBY3JCeU8sa0JBQW1CLFdBRWxCLE9BQU9qZCxFQUFFaUksUUFBUSxFQUFNNUIsS0FBS3lXLGNBQWV6VyxLQUFLd1csd0JBV2pESyxXQUFZLFNBQVV6YixHQUNyQjRFLEtBQUt5VyxjQUFjNU0sT0FBTzFCLFVBQVkvTSxHQVV2Q3NjLDRCQUE2QixTQUFVdFEsR0FFdEMsR0FBT0EsR0FBV0EsRUFBTXdQLGtCQUF4QixDQUdBLElBQUlELEVBQU92UCxFQUFNd1Asb0JBQ1pELEVBQUs5TSxRQUFVOE0sRUFBSzlNLE9BQU96QyxRQUFVcEgsS0FBS3lHLElBQUssU0FDbkRXLEVBQU15UCxXQUFZN1csV0FjdEJsRyxFQUFRLHdCQUF3QixDQUFFLGVBQWdCLHlCQUEyQixTQUFVaWUsRUFBT0MsR0FFN0YsT0FBT2pZLFNBQVN1VSxNQUFNMVMsT0FBUTlCLEVBQUV1VyxTQUFVLENBTXpDSSxjQUFlLENBQ2Q1TSxPQUFRLENBQ1B6QyxNQUFPLGdCQUNQZ1EsS0FBTSxTQUVQN00sU0FBVSxDQUNUME4sT0FBUSxDQUNQakIsWUFBYSxTQUFVNVAsR0FDdEIsTUFBUyxVQUFZQSxFQUFNWCxJQUFLLGdCQUVqQytRLE1BQU8sUUFDUHBRLE1BQU8sUUFDUGdRLEtBQU0sV0FXVGYsU0FBVSxXQUNULE1BQU8sQ0FDTnZYLEdBQUlnQixFQUFFb1ksU0FBVSxTQUNoQkQsT0FBUSxHQUNSRSxZQUFhLE9BQ2JDLFNBQVMsRUFDVEMsT0FBUSxJQUNSQyxZQUFhLEdBQ2JsQixLQUFNLFdBWVJ6VCxXQUFZLFNBQVVVLEVBQU1ULEdBRTNCNUQsS0FBSzJVLGdCQUNMM1UsS0FBSzBXLG1CQUFvQjlTLElBVTFCa1UsV0FBWSxXQUNYLE9BQU85WCxLQUFLeUMsV0FBV29ILFFBU3hCME8sYUFBYyxXQUNiLE9BQU92WSxLQUFLeUcsSUFBSyxlQUFrQixJQUFNekcsS0FBS3lHLElBQUssT0FVcEQrUixjQUFlLFdBQ2QsT0FBT3hZLEtBQUs4WCxhQUFhclIsSUFBSyxpQkFBa0JnUywwQkFHL0NULE1BU0psZSxFQUFRLDhCQUE4QixDQUFFLHlCQUEyQixTQUFVc04sR0FFNUUsT0FBT3JILFNBQVNpRSxXQUFXcEMsT0FBUSxDQU1sQ3dGLE1BQU9BLEVBRVB6RCxXQUFZLFdBR1gzRCxLQUFLMFksR0FBSSxVQUFXMVksS0FBSzJZLGNBR3pCM1ksS0FBSzBZLEdBQUksTUFBTzFZLEtBQUsyWSxjQUNyQjNZLEtBQUswWSxHQUFJLFNBQVUxWSxLQUFLMlksY0FHeEIzWSxLQUFLMFksR0FBSSxNQUFPMVksS0FBSzRZLGdCQUNyQjVZLEtBQUswWSxHQUFJLFNBQVUxWSxLQUFLNFksZ0JBR3hCNVksS0FBSzBZLEdBQUksaUJBQWtCMVksS0FBSzRZLGlCQVVqQ0MsY0FBZSxXQUVkLE9BQU8vWSxFQUFFd1QsS0FBTXRULEtBQUs4WSxnQkFVckJBLFlBQWEsV0FDWixPQUFPOVksS0FBS3VNLE9BQVEsU0FBVTBMLEdBQzdCLE9BQU9BLEVBQU94UixJQUFLLGNBV3JCbVMsZUFBZ0IsU0FBVVgsR0FFekIsR0FBT2pZLEtBQUs2SixPQUFPcEQsSUFBSyxpQkFBa0JnUyx3QkFBMUMsQ0FJQSxJQUFJTSxFQUFXL1ksS0FBSzZNLFFBQVNvTCxHQUM1QmUsRUFBV2haLEtBQUs2SixPQVdqQixHQVJLLE9BQVNtUCxFQUFTdlMsSUFBSyxrQkFDM0IzRyxFQUFFZSxLQUFNa1ksRUFBVSxTQUFVM1IsR0FDM0JBLEVBQU15TyxJQUFLLFdBQVcsS0FNbkIsSUFBTTdWLEtBQUs2WSxpQkFBOEMsRUFBM0JHLEVBQVN2UyxJQUFLLFVBQWlCLENBQ2pFLElBQUk0RixFQUFTLElBQU1yTSxLQUFLc1QsT0FBU3RULEtBQUtxTSxPQUFTME0sRUFDL0NqWixFQUFFc0IsTUFBT2lMLEdBQVN3SixJQUFLLFdBQVcsTUFXcEM4QyxhQUFjLFdBRWIsSUFBSU0sRUFBT2paLEtBQ1ZnWixFQUFXaFosS0FBSzZKLE9BRWpCN0osS0FBS2EsS0FBTSxTQUFVb1gsR0FDcEJBLEVBQU9wQyxJQUFLLFNBQVVtRCxFQUFTdlMsSUFBSyxpQkFBa0J5UyxxQkFBc0JELEVBQUtqYixRQUFTaWEsWUFjOUZuZSxFQUFRLHNCQUFzQixHQUFJLFdBRWpDLE9BQU9pRyxTQUFTdVUsTUFBTTFTLE9BQVEsQ0FRN0J5VSxTQUFVLFdBQ1QsTUFBTyxDQUNOOEMsU0FBUyxFQUNUQyxnQkFBZ0IsRUFDaEJDLGdCQUFpQixHQUNqQkMsYUFBYSxFQUNiQyxLQUFNLFdBQ056YSxHQUFJLFVBQ0owYSxPQUFPLEVBQ1BDLFNBQVUsR0FDVmplLEtBQU0sVUFDTmtlLFlBQWEsR0FDYkMsUUFBUSxFQUNSQyxPQUFPLElBV1RDLGFBQWMsV0FFYixJQUFJcmUsRUFBT3dFLEtBQUt5RyxJQUFLLFFBR3JCLE1BRlMsQ0FBRWpMLEdBRUVzQixPQUFRa0QsS0FBS3lHLElBQUssYUFBZTNKLE9BQVF0QixFQUFLYyxNQUFPLE9BVW5FNGMsbUJBQW9CLFdBRW5CLE9BQU9sWixLQUFLOFosbUJBQW9CLFlBVWpDckIsc0JBQXVCLFdBRXRCLE9BQU96WSxLQUFLOFosbUJBQW9CLGVBVWpDQyxnQkFBaUIsV0FFaEIsT0FBTy9aLEtBQUs4WixtQkFBb0IsU0FVakNFLGdCQUFpQixXQUVoQixPQUFPaGEsS0FBSzhaLG1CQUFvQixRQVVqQ0csZ0JBQWlCLFdBRWhCLE9BQU9qYSxLQUFLOFosbUJBQW9CLFFBVWpDSSxrQkFBbUIsV0FJbEIsUUFGY2xhLEtBQUt5RyxJQUFLLFlBTWpCekcsS0FBSzhaLG1CQUFvQixVQVlqQ0EsbUJBQW9CLFNBQVVLLEdBRTdCLElBQUloQixFQUFVblosS0FBS3lHLElBQUssV0FFeEIsU0FBTzBTLElBQWFBLEVBQVNnQixLQUl0QmhCLEVBQVNnQixRQWFuQnJnQixFQUFRLGtCQUFrQixDQUN4QixlQUNBLHdCQUNBLDhCQUNBLHNCQUNBLHlCQUNFLFNBQ0ZpZSxFQUNBcUMsRUFDQUMsRUFDQUMsRUFDQXRDLEdBR0QsT0FBT2pZLFNBQVN1VSxNQUFNMVMsT0FBUTlCLEVBQUV1VyxTQUFVLENBTXpDSSxjQUFlLENBQ2Q1TSxPQUFRLENBQ1B6QyxNQUFPLFlBQ1BnUSxLQUFNLFNBRVA3TSxTQUFVLENBQ1Q0TyxRQUFTLENBQ1IzQixNQUFPLGtCQUNQcFEsTUFBTyxTQUNQZ1EsS0FBTSxjQUVQb0MsTUFBTyxDQUNOaEMsTUFBTyxRQUNQcFEsTUFBTyxRQUNQZ1EsS0FBTSxTQUVQbUQsVUFBVyxDQUNWL0MsTUFBTyxZQUNQUixZQUFhLFNBQVU1UCxHQUN0QixJQUFJZ1EsRUFBT2hRLEVBQU1YLElBQUssaUJBRXRCLE1BQVMsV0FERTNHLEVBQUVvQixTQUFVa1csR0FBU0EsRUFBT0EsRUFBSzNRLElBQUssUUFHbERXLE1BQU8sZ0JBQ1BnUSxLQUFNLGNBRVBvRCxjQUFlLENBQ2RoRCxNQUFPLGVBQ1BMLE9BQVEsU0FBVTVCLEdBQ2pCLE9BQUt6VixFQUFFb0IsU0FBVXFVLEdBQ1R2RSxPQUFPcUcsYUFBYWtELFVBQVU5VCxJQUFLOE8sR0FFcENBLEdBRVJuTyxNQUFPLGdCQUNQZ1EsS0FBTSxXQVdUZixTQUFVLFdBQ1QsTUFBTyxDQUNOdlgsR0FBSWdCLEVBQUVvWSxTQUFVLFNBQ2hCaUIsUUFBUyxHQUNUc0IsUUFBUyxHQUNUQyxvQkFBcUIsS0FDckJsQixNQUFPLEdBQ1BtQixjQUFlLEtBQ2ZDLFdBQVksRUFDWmpCLE9BQVEsRUFDUmEsY0FBZSxVQUNmRCxVQUFXLEdBQ1hNLFVBQVcsR0FDWEMsTUFBTyxHQUNQMUQsS0FBTSxnQkFDTjJELGNBQWUsS0FDZkMsVUFBVyxHQUVYQyxXQUFXLElBWWJ0WCxXQUFZLFNBQVVVLEVBQU1ULEdBRTNCLElBQUlxVixFQUFPalosS0FFWEEsS0FBSzJVLGdCQUNMM1UsS0FBSzBXLG1CQUFvQjlTLElBRXBCLElBQVU1RCxLQUFLeUcsSUFBSyxpQkFBa0IwUyxVQUUxQ25aLEtBQUtrYixzQkFHTGxiLEtBQUtzTCxTQUFVdEwsS0FBS3lHLElBQUssV0FBYSxTQUFVLFdBRS9DaEgsV0FBWSxXQUNYd1osRUFBS2lDLHVCQUNILE1BTUVsYixLQUFLeUcsSUFBSyxpQkFBa0JBLElBQUssV0FDdkN6RyxLQUFLNlYsSUFBSyxTQUFVLEdBR3JCL1YsRUFBRXFiLE1BQU8sU0FBVWxDLEdBQ2xCQSxFQUFLUCxHQUFJLGdCQUFpQk8sRUFBS25CLGFBQWFzRCxjQUFlbkMsRUFBS25CLGVBQzlELEVBQUc5WCxPQVdQcWIsV0FBWSxTQUFVaFgsRUFBTVQsR0FFM0IsSUFBSWlOLEVBQU03USxLQUFLeUcsSUFBSyxpQkFBa0J3VCxrQkFDdEMsS0FBS2phLEtBQUt5RyxJQUFLLFdBQVk2TSxRQUFVekMsR0FBckMsQ0FLQWpOLEVBQVVBLEdBQVcsSUFEckJTLEVBQU9BLEdBQVEsSUFHVjhULFlBQWNuWSxLQUFLeUcsSUFBSyxpQkFBa0JzVCxrQkFDL0MxVixFQUFLaVUsWUFBY3RZLEtBQUt5RyxJQUFLLE1BRzdCLElBQUl3UixHQUZKclUsRUFBUWlHLE9BQVM3SixNQUVDeUcsSUFBSyxXQUFZM0MsSUFBS08sRUFBTVQsR0FFOUM3RCxTQUFTdWIsT0FBT3ZULFFBQVMsc0JBQXVCa1EsRUFBUWpZLFFBZXpEdWIsWUFBYSxTQUFVQyxFQUFNQyxHQUk1QixNQUhLLFNBQVdBLElBQ2ZELEVBQUtoQixjQUFnQnhhLEtBQUt5RyxJQUFLLGlCQUFrQkEsSUFBSyxPQUVoRCtVLEdBU1IxRCxXQUFZLFdBRVgsSUFBSW5CLEVBQU8zVyxLQUFLNFcsb0JBRWhCLEdBQUtELEVBQUs5TSxPQUFTLENBQ2xCLEdBQUs3SixLQUFLeUMsWUFBY3pDLEtBQUt5QyxXQUFXb0gsT0FDdkMsT0FBTzdKLEtBQUt5QyxXQUFXb0gsT0FDakIsR0FBSzhNLEVBQUs5TSxPQUFPMUIsVUFDdkIsT0FBT3dPLEVBQUs5TSxPQUFPMUIsVUFJckIsT0FBTyxHQVlSdVQsZUFBZ0IsV0FHZixJQUFJQyxFQUFZM2IsS0FBS3lHLElBQUssaUJBQWtCQSxJQUFLLE1BaUJqRCxPQWRZekcsS0FBS3lDLFdBQVc4SixPQUFRLFNBQVV5TSxHQUU3QyxJQUFJNUIsRUFBTzRCLEVBQVN2UyxJQUFLLGlCQUFrQkEsSUFBSyxNQUdoRCxNQUFtQixZQUFka1YsRUFDSyxZQUFjdkUsRUFJakIsWUFBY0EsSUFJTHBaLFFBQVNnQyxPQVczQjRiLGtCQUFtQixXQUVsQixJQUFJN2QsRUFBUWlDLEtBQUswYixpQkFFakIsT0FBTSxJQUFNM2QsRUFDSixHQUdILFlBQWNpQyxLQUFLeUcsSUFBSyxpQkFBa0JBLElBQUssTUFLN0MxSSxFQUFRLEVBSkMsNkJBQTZCekIsTUFBTyxJQUNsQ3lCLElBUW5COGQsUUFBUyxXQUVSLElBQUloUyxFQUFTN0osS0FBSzhiLHNCQUNqQmhlLEVBQVMsR0FTVixPQVBLK0wsSUFFSi9MLEVBQVMrTCxFQUFPZ1MsVUFBWSxLQUt0Qi9kLEVBQVNrQyxLQUFLNGIscUJBVXRCRSxvQkFBcUIsV0FFcEIsUUFBSzliLEtBQUsrYixlQUVGL2IsS0FBS3lDLFdBQVdvSCxRQWN6Qm1TLGdCQUFpQixXQUNoQixPQUFPaGMsS0FBSzhYLGNBVWJtRSxXQUFZLFdBRVgsT0FBT2pjLEtBQUt5RyxJQUFLLGlCQUFrQkEsSUFBSyxVQUlqQ3pHLEtBQUt5RyxJQUFLLFVBSFQsR0FhVHlWLHNCQUF1QixXQUV0QixJQUFJQyxFQUFRbmMsS0FBSzhYLGFBQWFyUixJQUFLLFdBQ2xDa1QsRUFBUzNaLEtBQUt5RyxJQUFLLFVBRXBCLE9BQUssSUFBTTBWLEVBQ0gsTUFHR3hDLEVBQVN3QyxFQUFVLEtBQU1DLFFBQVMsR0FBTSxLQVVwREwsWUFBYSxXQUVaLE1BQVMsYUFBZS9iLEtBQUt5QyxXQUFXb0gsT0FBT3BELElBQUssU0FJckR5VSxvQkFBcUIsV0FHcEIsSUFEQSxJQUFJL0IsRUFBVW5aLEtBQUt5RyxJQUFLLFdBQ2hCMFMsRUFBUTdGLE9BQVN0VCxLQUFLeUcsSUFBSyxpQkFBa0J1VCxtQkFDcERoYSxLQUFLcWIsZUFLTHJELE1BU0psZSxFQUFRLHdCQUF3QixDQUFFLG1CQUFxQixTQUFVc04sR0FFaEUsT0FBT3JILFNBQVNpRSxXQUFXcEMsT0FBUSxDQU1sQ3dGLE1BQU9BLEVBUVB6RCxXQUFZLFdBR1gzRCxLQUFLMFksR0FBSSxVQUFXMVksS0FBSzJZLGNBR3pCM1ksS0FBSzBZLEdBQUksTUFBTzFZLEtBQUsyWSxjQUNyQjNZLEtBQUswWSxHQUFJLFNBQVUxWSxLQUFLMlksY0FFeEIzWSxLQUFLMFksR0FBSSxNQUFPMVksS0FBS3FjLGdCQVV0QjFELGFBQWMsV0FFYixJQUFJTSxFQUFPalosS0FFWEEsS0FBS2EsS0FBTSxTQUFVbVksR0FFcEJBLEVBQVNuRCxJQUFLLGFBQWNvRCxFQUFLamIsUUFBU2diLEdBQWEsTUFjekRxRCxjQUFlLFNBQVVqVixHQUV4QkEsRUFBTXlPLElBQUssWUFBYTdWLEtBQUs2SixPQUFPcEQsSUFBSyxZQWE1QzNNLEVBQVEsb0JBQW9CLEdBQUksV0FFL0IsTUFBTyxDQUVOd2lCLE9BQVEsR0FRUkMsbUJBQW9CLFdBRW5CLE9BQUt2YyxLQUFLd2MsY0FDRixHQUdEeEwsT0FBT3FHLGFBQWFvRixVQUFZLGlCQUFtQnpjLEtBQUt5RyxJQUFLLE1BQVMsZ0JBVTlFaVcsb0JBQXFCLFdBRXBCLElBQUlDLEVBQVMzYyxLQUFLMmMsUUFBVSxHQUM1QixPQUFPM0wsT0FBT3FHLGFBQWF1RixRQUFRblcsSUFBS2tXLEVBQVEzYyxLQUFLeUcsSUFBSyxRQUFTN0osUUFBUyxRQUFTLElBQU1vRCxPQVU1RndjLFlBQWEsV0FFWixPQUFXMWMsRUFBRStjLFNBQVU3YyxLQUFLeUcsSUFBSyxRQUFZLElBQU16RyxLQUFLeUcsSUFBSyxNQUFPekksUUFBUyxVQVU5RThlLG1CQUFvQixXQUVuQixJQUFJQyxFQUFTamQsRUFBRXlNLE9BQVF2TSxLQUFLMGMsc0JBQXVCLFNBQVVNLEdBQzVELE9BQVNBLEVBQWEsU0FHdkJsZCxFQUFFZSxLQUFNa2MsRUFBUSxTQUFVQyxHQUN6QmxkLEVBQUVlLEtBQU1mLEVBQUVtZCxRQUFVRCxFQUFNVixRQUFVLFNBQVVZLEdBRzdDLElBQUk3YixFQUFPLENBQUU2YixFQUFNQyxXQUNsQkMsRUFBVXBkLEtBQUt5RyxJQUFLLFVBRWhCeVcsRUFBTUcsa0JBQ1ZoYyxFQUFLL0QsS0FBTTRmLEVBQU1HLGtCQUdsQnZkLEVBQUVlLEtBQU1RLEVBQU0sU0FBVThSLEdBQ3ZCLElBQUk1TyxFQUFPMlksRUFBTUksaUJBQW1CSixFQUFNSSxpQkFBbUJuSyxFQUFNQSxFQUM5RGlLLEdBQVdBLEVBQVM3WSxJQUN4QnZFLEtBQUs2VixJQUFLMUMsRUFBS2lLLEVBQVM3WSxHQUFPLEtBRTlCdkUsT0FFREEsT0FDREEsVUFhTmxHLEVBQVEsZUFBZSxHQUFJLFdBRTFCLE1BQU8sQ0FFTnlqQixRQUFTLENBQ1J6QyxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyxvQkFDNUJDLFlBQVksRUFDWnJCLE9BQVEsQ0FDUCxDQUNDLENBQ0NhLFVBQVcsWUFDWHJlLEdBQUksWUFDSnNZLEtBQU0sY0FFTCxDQUNGLENBQ0MrRixVQUFXLFVBQ1hyZSxHQUFJLGNBQ0o4ZSxNQUFPSixLQUFLQyxLQUFLQyxVQUFXLGVBQzVCdEcsS0FBTSxXQUVMLENBQ0YsQ0FDQytGLFVBQVcsa0JBQ1hyZSxHQUFJLGtCQUNKOGUsTUFBT0osS0FBS0MsS0FBS0MsVUFBVyxzQkFDNUIvTSxJQUFLLEVBQ0xFLElBQUssSUFDTGdOLElBQUtMLEtBQUtDLEtBQUtDLFVBQVcsZ0VBQzFCdEcsS0FBTSxVQUVQLENBQ0MrRixVQUFXLG1CQUNYcmUsR0FBSSxtQkFDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsa0JBQzVCTCxpQkFBa0IsaUJBQ2xCUSxJQUFLTCxLQUFLQyxLQUFLQyxVQUFXLGtFQUMxQnRHLEtBQU0saUJBRVAsQ0FDQytGLFVBQVcsYUFDWHJlLEdBQUksYUFDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsY0FDNUIvTSxJQUFLLEVBQ0xFLElBQUssSUFDTHdNLGlCQUFrQixhQUNsQlEsSUFBS0wsS0FBS0MsS0FBS0MsVUFBVywyRUFDMUJ0RyxLQUFNLGtCQUVMLENBQ0YsQ0FDQytGLFVBQVcsc0JBQ1hyZSxHQUFJLHNCQUNKOGUsTUFBT0osS0FBS0MsS0FBS0MsVUFBVyx3QkFDNUJHLElBQUtMLEtBQUtDLEtBQUtDLFVBQVcsc0dBQzFCdEcsS0FBTSxVQUVQLENBQ0MrRixVQUFXLG1CQUNYcmUsR0FBSSxtQkFDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsNEJBQzVCRyxJQUFLTCxLQUFLQyxLQUFLQyxVQUFXLG9IQUMxQnRHLEtBQU0sZ0JBZ0JadGQsRUFBUSxjQUFjLENBQ3BCLHdCQUNBLGdCQUNBLGtCQUNBLHdCQUNBLG9CQUNBLGdCQUNFLFNBQ0ZzZ0IsRUFDQTBELEVBQ0FDLEVBQ0EvRixFQUNBZ0csRUFDQUMsR0FHRCxPQUFPbGUsU0FBU3VVLE1BQU0xUyxPQUFROUIsRUFBRXVXLFNBQVUsQ0FNekNJLGNBQWUsQ0FDZDVNLE9BQVEsQ0FDUHpDLE1BQU8sU0FDUGdRLEtBQU0sU0FFUDdNLFNBQVUsQ0FDVGdRLFVBQVcsQ0FDVi9DLE1BQU8sWUFDUHBRLE1BQU8sZ0JBQ1BnUSxLQUFNLGdCQVNUdUYsT0FBUXNCLEVBUVI1SCxTQUFVLFdBRVQsTUFBTyxDQUNOdlgsR0FBSWdCLEVBQUVvWSxTQUFVLFNBQ2hCNEMsTUFBTzBDLEtBQUtDLEtBQUtDLFVBQVcsWUFDNUJ0RyxLQUFNLFlBQ044RyxVQUFXLEdBRVhDLE9BQVEsUUFHUjFELFFBQVMsR0FDVDJELGlCQUFrQixFQUNsQkMsZUFBZ0IsS0FDaEJDLFdBQVksS0FDWkMsZ0JBQWlCLEdBQ2pCL2lCLEtBQU0sR0FDTmdqQixlQUFnQixLQUNoQkMsV0FBWSxHQUNaQyxvQkFBcUIsS0FFckJuRSxVQUFXLEdBR1hvRSxRQUFTLEVBR1RDLFVBQVcsR0FDWEMsZ0JBQWdCLEVBQ2hCQyxtQkFBbUIsSUFXckJuYixXQUFZLFdBRVgzRCxLQUFLOGMscUJBQ0w5YyxLQUFLMlUsZ0JBQ0wzVSxLQUFLMFcscUJBRUwxVyxLQUFLc0wsU0FBVXRMLEtBQUt5RyxJQUFLLGFBQWUsTUFBT3pHLEtBQUtvYixlQUNwRHBiLEtBQUtzTCxTQUFVdEwsS0FBS3lHLElBQUssYUFBZSxTQUFVekcsS0FBS29iLGVBRXZEcGIsS0FBSzZWLElBQUssVUFBVzdWLEtBQUsrZSxvQkFHMUIvZSxLQUFLMFksR0FBSSxnQkFBaUIsV0FDcEIsWUFBYzFZLEtBQUt5RyxJQUFLLFdBQzVCekcsS0FBSzhYLGFBQWFqQyxJQUFLLGVBQWdCLFVBYTFDbUosYUFBYyxTQUFVM2EsR0FFdkJBLEVBQUt3VyxVQUFZN2EsS0FBS3lHLElBQUssTUFDM0IsSUFBSXVTLEVBQVdoWixLQUFLeUcsSUFBSyxhQUFjM0MsSUFBS08sRUFBTSxDQUNqRHdGLE9BQVE3SixPQUVURCxTQUFTdWIsT0FBT3ZULFFBQVMsb0JBQXFCaVIsRUFBVWhaLE9BV3pEaWYsY0FBZSxTQUFVQyxHQUV4QixPQUFLQSxFQUNHMUIsS0FBS0MsS0FBS0MsVUFBVyxXQUd0QkYsS0FBS0MsS0FBS0MsVUFBVyxTQVM3QnFCLGlCQUFrQixXQUVqQixJQUFJcEYsRUFBUyxFQU1iLE9BSkEzWixLQUFLeUcsSUFBSyxhQUFjNUYsS0FBTSxTQUFVbVksR0FDdkNXLEdBQVVYLEVBQVNpRCxlQUdidEMsR0FXUndGLGVBQWdCLFNBQVVDLEdBRXpCLEdBQUtwZixLQUFLeUcsSUFBSyxxQkFFZDJZLFFBRU0sQ0FFTixJQUFJbkcsRUFBT2paLEtBRVh3ZCxLQUFLNkIsS0FBSy9qQixLQUFNLENBQ2YrSSxLQUFNLENBQ0xpYixPQUFRLGVBQ1JDLFlBQWEsWUFDYkMsVUFBV3hPLE9BQU9xRyxhQUFhb0ksWUFBWWhaLElBQUssTUFDaERpWixRQUFTMWYsS0FBS3lHLElBQUssT0FFcEJrWixNQUFPLFNBQVVDLEVBQUt6QixFQUFRd0IsR0FFN0JFLFFBQVFDLElBQUtGLEVBQUt6QixFQUFRd0IsR0FDMUIzTyxPQUFPcUcsYUFBYTBJLE1BQU1ELElBQUssdUNBQXdDRixFQUFLekIsRUFBUXdCLEVBQU8seUNBQzNGUCxHQUFJLElBR0xuSixRQUFTLFNBQVUrSixHQUNiQSxHQUFPQSxFQUFJekYsV0FDZnRCLEVBQUtwRCxJQUFLLHFCQUFxQixHQUMxQm1LLEVBQUl6RixXQUNSemEsRUFBRWUsS0FBTW1mLEVBQUl6RixVQUFXdEIsRUFBSytGLGFBQWMvRixHQUUzQ21HLEtBRUFBLEdBQUksUUFpQlRoRSxjQUFlLFdBRWRwYixLQUFLNlYsSUFBSyxVQUFXN1YsS0FBSytlLHNCQUl6Qi9HLEVBQWVnRyxNQVNuQmxrQixFQUFRLGlCQUFpQixHQUFJLFdBRTVCLE1BQU8sQ0FFTnlqQixRQUFTLENBQ1J6QyxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyxvQkFDNUJDLFlBQVksRUFDWnJCLE9BQVEsQ0FDUCxDQUNDLENBQ0NhLFVBQVcsWUFDWHJlLEdBQUksWUFDSnNZLEtBQU0sY0FFTCxDQUNGLENBQ0MrRixVQUFXLGNBQ1hyZSxHQUFJLGNBQ0o4ZSxNQUFPSixLQUFLQyxLQUFLQyxVQUFXLG1CQUM1QnRHLEtBQU0sZUFFUCxDQUNDK0YsVUFBVyxjQUNYcmUsR0FBSSxjQUNKOGUsTUFBT0osS0FBS0MsS0FBS0MsVUFBVyxtQkFDNUJ0RyxLQUFNLGdCQUVMLENBQ0YsQ0FDQytGLFVBQVcsY0FDWHJlLEdBQUksY0FDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsZUFDNUJHLElBQUtMLEtBQUtDLEtBQUtDLFVBQVcsb0RBQzFCdEcsS0FBTSxVQUVQLENBQ0MrRixVQUFXLHdCQUNYcmUsR0FBSSx3QkFDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsaUNBQzVCRyxJQUFLTCxLQUFLQyxLQUFLQyxVQUFXLDJGQUMxQnRHLEtBQU0sU0FDTjZJLFVBQVcsV0FDVixNQUFTLFFBQVVqZ0IsS0FBS3lHLElBQUssa0JBRy9CLENBQ0MwVyxVQUFXLG1DQUNYcmUsR0FBSSxtQ0FDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsdUNBQzVCRyxJQUFLTCxLQUFLQyxLQUFLQyxVQUFXLGlHQUMxQnRHLEtBQU0sU0FDTjZJLFVBQVcsV0FDVixNQUFTLGNBQWdCalAsT0FBT3FHLGFBQWE2SSxhQUFlLFFBQVVsZ0IsS0FBS3lHLElBQUsseUJBR2hGLENBQ0YsQ0FDQzBXLFVBQVcsZUFDWDhDLFVBQVcsV0FDVixPQUFTLElBQVVqZ0IsS0FBS21nQixzQkFFekJyaEIsR0FBSSxlQUNKOGUsTUFBT0osS0FBS0MsS0FBS0MsVUFBVyxnQkFDNUJMLGlCQUFrQixtQkFDbEJqRyxLQUFNLGdCQUNOeFQsUUFBUyxXQUNSLE9BQU81RCxLQUFLb2dCLGtDQUdaLENBQ0YsQ0FDQ2pELFVBQVcsY0FDWHJlLEdBQUksY0FDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsZUFDNUJMLGlCQUFrQixjQUNsQmpHLEtBQU0sU0FDTnhULFFBQVMsV0FFUixJQUFJQSxFQUFVLENBQ2IsQ0FDQ3VQLElBQUssR0FDTG9DLElBQUtpSSxLQUFLQyxLQUFLQyxVQUFXLFNBRTNCLENBQ0N2SyxJQUFLLE9BQ0xvQyxJQUFLaUksS0FBS0MsS0FBS0MsVUFBVyx1QkFFM0IsQ0FDQ3ZLLElBQUssYUFDTG9DLElBQUtpSSxLQUFLQyxLQUFLQyxVQUFXLHVDQWtCNUIsT0FkSzFkLEtBQUtxZ0IsYUFBYTVaLElBQUssZUFDM0I3QyxFQUFRdEcsS0FBTSxDQUNiNlYsSUFBSyxRQUNMb0MsSUFBS2lJLEtBQUtDLEtBQUtDLFVBQVcsdUNBSXZCLFFBQVUxZCxLQUFLeUcsSUFBSyxxQkFDeEI3QyxFQUFRdEcsS0FBTSxDQUNiNlYsSUFBSyxlQUNMb0MsSUFBS2lJLEtBQUtDLEtBQUtDLFVBQVcsb0RBSXJCOVosSUFJVCxDQUNDdVosVUFBVyx3QkFDWDhDLFVBQVcsV0FDVixPQUFVLElBQU0sQ0FBRSxhQUFjLFFBQVMsZ0JBQWlCamlCLFFBQVNnQyxLQUFLeUcsSUFBSyxpQkFFOUUzSCxHQUFJLHdCQUNKOGUsTUFBT0osS0FBS0MsS0FBS0MsVUFBVyxhQUM1Qi9NLElBQUssRUFDTHlHLEtBQU0sVUFFUCxDQUNDK0YsVUFBVyxpQkFDWG1ELFlBQWEsUUFDYkwsVUFBVyxXQUNWLE1BQVMsU0FBV2pnQixLQUFLeUcsSUFBSyxnQkFFL0IzSCxHQUFJLGlCQUNKOGUsTUFBT0osS0FBS0MsS0FBS0MsVUFBVyxRQUM1QjZDLFdBQVksUUFDWm5KLEtBQU0sY0FFUCxDQUNDK0YsVUFBVyxpQkFDWDhDLFVBQVcsV0FDVixNQUFTLFNBQVdqZ0IsS0FBS3lHLElBQUssZ0JBRS9CK1osV0FBWSxRQUNaRixZQUFhLFFBQ2J4aEIsR0FBSSxpQkFDSjhlLE1BQU9KLEtBQUtDLEtBQUtDLFVBQVcsUUFDNUJ0RyxLQUFNLG9CQWVadGQsRUFBUSxnQkFBZ0IsQ0FBRSxjQUFlLHdCQUF5QixvQkFBcUIsa0JBQW9CLFNBQVUybUIsRUFBTXpJLEVBQWVnRyxFQUFXMEMsR0FFcEosT0FBTzNnQixTQUFTdVUsTUFBTTFTLE9BQVE5QixFQUFFdVcsU0FBVSxDQU16Q0ksY0FBZSxDQUNka0ssUUFBUyxDQUNSdlosTUFBTyxVQUNQZ1EsS0FBTSxTQUVQN00sU0FBVSxDQUNUcVcsS0FBTSxDQUNMcEosTUFBTyxPQUNQUixZQUFhLFNBQVU1UCxHQUV0QixNQUFTLFFBQVVBLEVBQU1YLElBQUssa0JBQXNCM0csRUFBRXdWLFFBQVNsTyxFQUFNWCxJQUFLLFVBRTNFVyxNQUFPLFlBQ1BnUSxLQUFNLFdBU1R1RixPQUFRK0QsRUFRUnJLLFNBQVUsV0FDVCxNQUFPLENBQ052WCxHQUFJZ0IsRUFBRW9ZLFNBQVUsU0FDaEI0QyxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyxjQUM1QnRHLEtBQU0sU0FDTnlKLE1BQU83Z0IsS0FBS3lDLFdBQWF6QyxLQUFLeUMsV0FBV2hHLE9BQVMsRUFBSSxFQUN0RHFrQixjQUFlOVAsT0FBT3FHLGFBQWEwSixPQUFPamlCLEdBQzFDa2lCLGVBQWdCLEdBR2hCQyxTQUFVLEdBQ1ZDLFNBQVUsR0FHVnpHLFFBQVMsR0FDVDBHLFlBQWEsR0FDYkMsaUJBQWtCLEtBQ2xCQyxzQkFBdUIsTUFDdkJDLGlDQUFrQyxNQUNsQ0MsWUFBYSxHQUNiQyxZQUFhLEdBR2JDLFdBQVksR0FDWkMsbUJBQW9CLEtBRXBCZCxLQUFNLEdBQ05lLGFBQWMsS0FFZEMsWUFBWSxJQVdkamUsV0FBWSxXQUVYM0QsS0FBSzhjLHFCQUNMOWMsS0FBSzJVLGdCQUNMM1UsS0FBSzZoQix5QkFDTDdoQixLQUFLMFcscUJBR0wsSUFBSWtLLEVBQU81Z0IsS0FBS3lHLElBQUssUUFDZDNHLEVBQUV3VixRQUFTc0wsSUFBWUEsRUFBS25hLElBQUssY0FDdkNtYSxFQUFLL0ssSUFBSyxZQUFhN1YsS0FBS3lHLElBQUssUUFXbkM0WixXQUFZLFdBQ1gsT0FBT3JnQixLQUFLOFgsYUFBYUEsY0FVMUJtSCxjQUFlLFNBQVVDLEdBRXhCLE9BQUtBLEVBQ0cxQixLQUFLQyxLQUFLQyxVQUFXLFdBR3RCRixLQUFLQyxLQUFLQyxVQUFXLFdBUzdCNUYsV0FBWSxXQUVYLElBQUluQixFQUFPM1csS0FBSzRXLG9CQUNoQixPQUFLRCxFQUFLOU0sUUFBVThNLEVBQUs5TSxPQUFPMUIsVUFDeEJ3TyxFQUFLOU0sT0FBTzFCLGFBQ1JuSSxLQUFLeUMsYUFBY3pDLEtBQUt5QyxXQUFXb0gsU0FDdkM3SixLQUFLeUMsV0FBV29ILFFBWXpCdVcsNkJBQThCLFdBRTdCLElBQUkwQixFQUF1QjloQixLQUFLOFgsYUFBYXJWLFdBQVd6RSxRQUFTZ0MsS0FBSzhYLGNBQ3JFaUssRUFBMEIvaEIsS0FBS3lDLFdBQVd6RSxRQUFTZ0MsTUFDbkQ0RCxFQUFVLEdBOEJYLE9BNUJBNUQsS0FBS3FnQixhQUFhNVosSUFBSyxZQUFhNUYsS0FBTSxTQUFVbWhCLEVBQVNDLEdBQzVELEdBQUtBLEdBQWtCSCxFQUF1QixDQUM3QyxJQUFJOUUsRUFBUSxDQUVWWSxNQUFPSixLQUFLQyxLQUFLN2dCLFFBQVMscUJBQXNCLENBQy9Dc2xCLE9BQVFGLEVBQVF2YixJQUFLLFNBQ3JCMGIsT0FBUUgsRUFBUXZiLElBQUssV0FFdEI3QyxRQUFTLElBR1hvZSxFQUFRdmIsSUFBSyxXQUFZNUYsS0FBTSxTQUFVdWhCLEVBQVFDLElBQzNDSixJQUFtQkgsR0FBd0JPLEVBQWlCTixJQUVoRS9FLEVBQU1wWixRQUFRdEcsS0FBTSxDQUNuQjZWLElBQUtpUCxFQUFPM2IsSUFBSyxNQUNqQjhPLElBQUtpSSxLQUFLQyxLQUFLN2dCLFFBQVMsb0JBQXFCLENBQzVDc2xCLE9BQVFFLEVBQU8zYixJQUFLLFNBQ3BCMGIsT0FBUUMsRUFBTzNiLElBQUssY0FJckJ6RyxNQUVINEQsRUFBUXRHLEtBQU0wZixLQUViaGQsTUFFSTRELEdBV1IwZSxTQUFVLFNBQVVqZSxJQUVuQkEsRUFBT0EsR0FBUSxJQUVWNlosVUFBWWxlLEtBQUtsQixHQUN0QnVGLEVBQUt5YSxtQkFBb0IsRUFFbEJ6YSxFQUFLeVcsUUFFWHpXLEVBQUt5VyxNQUFRMEMsS0FBS0MsS0FBSzdnQixRQUFTLFlBQWEsQ0FDNUMybEIsT0FBUXZpQixLQUFLeUcsSUFBSyxZQUtwQnpHLEtBQUs2VixJQUFLLE9BQVF4UixHQUNsQnJFLEtBQUswVyxxQkFFTCxJQUFJa0ssRUFBTzVnQixLQUFLeUcsSUFBSyxRQUdyQixPQUZBekcsS0FBSzZWLElBQUssZUFBZ0IsT0FFbkIrSyxHQVVSVCxtQkFBb0IsV0FHbkIsR0FBS25nQixLQUFLeUMsV0FBV3pFLFFBQVNnQyxNQUM3QixPQUFPLEVBSVIsSUFBSWdpQixFQUFVaGlCLEtBQUs4WCxhQUNuQixPQUFLa0ssRUFBUXZmLFdBQVd6RSxRQUFTZ2tCLElBZWxDSCx1QkFBd0IsV0FFaEI3USxPQUFPcUcsYUFBYTZJLGNBSTNCbGdCLEtBQUt5VyxjQUFjbE0sU0FBU2tYLFdBQWEsQ0FDeENqSyxNQUFPLGFBQ1BSLFlBQWEsU0FBVTVQLEdBRXRCLE1BQVMsUUFBVUEsRUFBTVgsSUFBSyx3QkFBNEIzRyxFQUFFd1YsUUFBU2xPLEVBQU1YLElBQUssZ0JBRWpGVyxNQUFPLGtCQUNQZ1EsS0FBTSxZQUtOWSxFQUFlZ0csTUFTbkJsa0IsRUFBUSxzQkFBc0IsQ0FBRSxpQkFBbUIsU0FBVXNOLEdBRTVELE9BQU9ySCxTQUFTaUUsV0FBV3BDLE9BQVEsQ0FNbEN3RixNQUFPQSxFQVFQekQsV0FBWSxXQUdYM0QsS0FBSzBZLEdBQUksVUFBVzFZLEtBQUt3aUIsWUFHekJ4aUIsS0FBSzBZLEdBQUksTUFBTzFZLEtBQUt3aUIsWUFDckJ4aUIsS0FBSzBZLEdBQUksU0FBVTFZLEtBQUt3aUIsYUFjekJBLFdBQVksV0FDWHhpQixLQUFLMlksZUFDTDNZLEtBQUt5aUIsb0JBU045SixhQUFjLFdBRWIzWSxLQUFLYSxLQUFNLFNBQVV1aEIsR0FDcEJBLEVBQU92TSxJQUFLLFFBQVM3VixLQUFLaEMsUUFBU29rQixHQUFXLElBQzVDcGlCLE9BV0p5aUIsaUJBQWtCLFdBRWpCemlCLEtBQUthLEtBQU0sU0FBVXVoQixHQUdmLFFBQVVBLEVBQU8zYixJQUFLLHVCQUVwQixJQURNM0csRUFBRXFILE1BQU9ySCxFQUFFbWQsUUFBU25kLEVBQUVxSCxNQUFPaWIsRUFBT2hDLCtCQUFnQyxZQUFlLE9BQzdFcGlCLFFBQXdDLEVBQS9Cb2tCLEVBQU8zYixJQUFLLGtCQUN0QzJiLEVBQU92TSxJQUFLLENBQ1g2TSxhQUFjLEVBQ2R0QixpQkFBa0IsU0FLbkJwaEIsV0FhTmxHLEVBQVEsNEJBQTRCLENBQUUsdUJBQXlCLFNBQVVzTixHQUV4RSxPQUFPckgsU0FBU2lFLFdBQVdwQyxPQUFRLENBTWxDd0YsTUFBT0EsRUFRUHpELFdBQVksV0FFWDNELEtBQUswWSxHQUFJLE1BQU8xWSxLQUFLbU4sWUFDckJuTixLQUFLMFksR0FBSSxTQUFVMVksS0FBS21OLGFBV3pCQSxXQUFZLFNBQVUvRixHQUVyQixPQUFPQSxFQUFNWCxJQUFLLFNBQVVvYSxXQWEvQi9tQixFQUFRLGlCQUFpQixDQUFFLHNCQUF1Qix5QkFBMkIsU0FBVTZvQixFQUFTM0ssR0FFL0YsT0FBT2pZLFNBQVN1VSxNQUFNMVMsT0FBUTlCLEVBQUV1VyxTQUFVLENBRXpDSSxjQUFlLENBQ2Q1TSxPQUFRLENBQ1B6QyxNQUFPLFNBQ1BnUSxLQUFNLFNBRVA3TSxTQUFVLENBQ1RxWSxRQUFTLENBQ1JwTCxNQUFPLFVBQ1BwUSxNQUFPLFNBQ1BnUSxLQUFNLGdCQVdUZixTQUFVLFdBQ1QsTUFBTyxDQUNOdlgsR0FBSWdCLEVBQUVvWSxTQUFVLFNBQ2hCMEssUUFBUyxHQUNUL0IsTUFBTzdnQixLQUFLeUMsV0FBYXpDLEtBQUt5QyxXQUFXaEcsT0FBUyxFQUFJLEVBQ3REcWtCLGNBQWU5UCxPQUFPcUcsYUFBYTBKLE9BQU9qaUIsR0FDMUNnYyxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyxlQUM1QnRHLEtBQU0sVUFFTjZELFdBQVcsRUFDWDRILFdBQVcsSUFVYmxmLFdBQVksV0FFWDNELEtBQUsyVSxnQkFDTDNVLEtBQUswVyxzQkFhTm9NLFdBQVksU0FBVXplLEVBQU1ULEdBWTNCLE9BVEFBLEVBQVVBLEdBQVcsSUFEckJTLEVBQU9BLEdBQVEsY0FHTXRFLFNBQVN1VSxPQUM3QmpRLEVBQUt3UixJQUFLLGlCQUFrQjdWLEtBQUt5RyxJQUFLLE9BQ3RDcEMsRUFBS3dTLFdBQVk3VyxPQUVqQnFFLEVBQUsyYyxlQUFpQmhoQixLQUFLeUcsSUFBSyxNQUcxQnpHLEtBQUt5RyxJQUFLLFdBQVkzQyxJQUFLTyxFQUFNVCxJQVd6Q3FiLGNBQWUsU0FBVUMsR0FFeEIsT0FBS0EsRUFDRzFCLEtBQUtDLEtBQUtDLFVBQVcsWUFHdEJGLEtBQUtDLEtBQUtDLFVBQVcsWUFZN0JxRixTQUFVLFNBQVVDLEdBQ25CLE9BQU9oakIsS0FBS2lqQixhQUFjLE9BQVFELElBWW5DRSxTQUFVLFNBQVVGLEdBQ25CLE9BQU9oakIsS0FBS2lqQixhQUFjLE9BQVFELElBYW5DQyxhQUFjLFNBQVVFLEVBQVdILEdBRWxDQSxFQUFhLGNBQWdCQSxHQUFvQkEsRUFFakQsSUFFQ0ksRUFGR3ZTLEVBQU03USxLQUFLeUMsV0FBVzZRLE9BQVMsRUFDbEN2VixFQUFRaUMsS0FBS3lDLFdBQVd6RSxRQUFTZ0MsTUFVbEMsR0FQSyxTQUFXbWpCLEVBQ2ZDLEVBQWdCcmxCLEVBQVEsRUFDYixTQUFXb2xCLElBQ3RCQyxFQUFnQnJsQixFQUFRLEdBSXBCcWxCLEdBQWlCdlMsR0FBT3VTLEdBQWlCLEVBRTdDLE9BQU9wakIsS0FBS3lDLFdBQVdnTixHQUFJMlQsR0FFckIsR0FBS0osRUFBVyxDQUV0QixHQUFLLFNBQVdHLEVBQ2YsT0FBT25qQixLQUFLeUMsV0FBV3JCLFFBQ2pCLEdBQUssU0FBVytoQixFQUN0QixPQUFPbmpCLEtBQUt5QyxXQUFXNGdCLE9BS3pCLE9BQU8sSUFJTnJMLE1BU0psZSxFQUFRLHVCQUF1QixDQUFFLGtCQUFvQixTQUFVc04sR0FFOUQsT0FBT3JILFNBQVNpRSxXQUFXcEMsT0FBUSxDQU1sQ3dGLE1BQU9BLEVBUVB6RCxXQUFZLFdBS1gzRCxLQUFLMFksR0FBSSxVQUFXMVksS0FBSzJZLGNBR3pCM1ksS0FBSzBZLEdBQUksTUFBTzFZLEtBQUsyWSxjQUNyQjNZLEtBQUswWSxHQUFJLFNBQVUxWSxLQUFLMlksZUFVekJBLGFBQWMsV0FFYixJQUFJTSxFQUFPalosS0FFWEEsS0FBS2EsS0FBTSxTQUFVbWhCLEdBRXBCQSxFQUFRbk0sSUFBSyxRQUFTb0QsRUFBS2piLFFBQVNna0IsR0FBWSxVQWVwRGxvQixFQUFRLHFCQUFxQixDQUMzQixzQkFDQSw4QkFDQSx3QkFDQSw0QkFDQSx3QkFDRSxTQUNGNm9CLEVBQ0F0SSxFQUNBRCxFQUNBa0osRUFDQUMsR0FHRCxNQUFPLENBQ05aLFFBQVNBLEVBQ1R0SSxnQkFBaUJBLEVBQ2pCRCxVQUFXQSxFQUNYa0osY0FBZUEsRUFDZkMsU0FBVUEsS0FVWnpwQixFQUFRLGtCQUFrQixDQUFFLHdCQUF5QixxQkFBdUIsU0FBVWtlLEVBQWVnRyxHQUVwRyxPQUFPamUsU0FBU3VVLE1BQU0xUyxPQUFROUIsRUFBRXVXLFNBQVUsR0FBSTJCLEVBQWVnRyxNQVM5RGxrQixFQUFRLGdCQUFnQixDQUFFLHVCQUF3Qix3QkFBeUIscUJBQXVCLFNBQVV5cEIsRUFBVXZMLEVBQWVnRyxHQUVwSSxPQUFPamUsU0FBU3VVLE1BQU0xUyxPQUFROUIsRUFBRXVXLFNBQVUsQ0FFekNJLGNBQWUsQ0FDZGxNLFNBQVUsQ0FDVGlaLFNBQVUsQ0FDVGhNLE1BQU8sV0FDUHBRLE1BQU8sVUFDUGdRLEtBQU0sZ0JBV1RmLFNBQVUsV0FDVCxNQUFPLENBQ040SyxTQUFVLEdBQ1Z1QyxTQUFVLEdBQ1YxSSxNQUFPLGFBQ1AxRCxLQUFNLFNBQ044SixTQUFVLEtBVVp2ZCxXQUFZLFdBRVgzRCxLQUFLMlUsZ0JBQ0wzVSxLQUFLMFcscUJBR0wzVyxTQUFTdWIsT0FBTzVDLEdBQUksa0JBQW1CMVksS0FBS3lqQixZQUFhempCLE1BR3pERCxTQUFTdWIsT0FBTzVDLEdBQUksaUJBQWtCMVksS0FBSzhpQixXQUFZOWlCLE1BRXZERCxTQUFTdWIsT0FBTzVDLEdBQUksdUJBQXdCMVksS0FBSzBqQixvQkFBcUIxakIsT0FZdkUwakIsb0JBQXFCLFNBQVV0QixHQUU5QixJQUFJL2QsRUFBTytkLEVBQU8vZCxLQUViLFVBQVkrZCxFQUFPOUMsZUFFaEJqYixFQUFLdkYsR0FDUHVGLEVBQUt1YyxjQUNGdmMsRUFBS3VjLEtBQ1p2YyxFQUFLc2QsYUFBZSxPQUtyQnRkLEVBQUt1ZCxZQUFhLFNBSVp2ZCxFQUFLd2MsYUFDTHhjLEVBQUt5YyxxQkFDTHpjLEVBQUsyYyxlQUVaaGhCLEtBQUs4aUIsV0FBWXplLElBV2xCeWUsV0FBWSxTQUFVemUsR0FHckIsSUFDQzJkLEdBRkQzZCxFQUFPQSxHQUFRLElBSUgyYyxlQU1YZ0IsRUFBVWhpQixLQUFLeUcsSUFBSyxZQUFhQSxJQUFLcEMsRUFBSzJjLGlCQUwzQ2dCLEVBQVVoaUIsS0FBSzJqQiwwQkFFZDNCLEVBQVVoaUIsS0FBS3lHLElBQUssWUFBYTRjLFFBTW5DaGYsRUFBS3dlLFdBQVksRUFFakJ4ZSxFQUFLeWMsY0FBZ0I5Z0IsS0FBS3lHLElBQUssTUFFL0IsSUFBSTJiLEVBQVNKLEVBQVFjLFdBQVl6ZSxFQWhCbkIsSUFzQmQsT0FMQXRFLFNBQVN1YixPQUFPdlQsUUFBUyxtQkFBb0JxYSxHQUc3Q0osRUFBUW5NLElBQUssYUFBYSxHQUVuQnVNLEdBV1JxQixZQUFhLFNBQVVwZixHQUV0QkEsRUFBT0EsR0FBUSxHQUNmLElBQUltZixFQUFXeGpCLEtBQUt5RyxJQUFLLFlBQ3hCN0MsRUFBVSxHQUNWZ2dCLEVBQVc1akIsS0FBSzJqQix1QkFHWkMsSUFDSmhnQixFQUFRNkwsR0FBSytULEVBQVN4bEIsUUFBUzRsQixHQUFhLEdBRzdDSixFQUFTMWYsSUFBS08sRUFBTVQsSUFVckIrZixxQkFBc0IsV0FFckIsT0FBTzNqQixLQUFLeUcsSUFBSyxZQUFhc0QsS0FBTSxTQUFVM0MsR0FDN0MsT0FBT0EsRUFBTVgsSUFBSyxpQkFLbEJ1UixFQUFlZ0csTUFVbkJsa0IsRUFBUSxnQkFBZ0IsQ0FDdEIsa0JBQ0EsZ0JBQ0EsZUFDQSxnQkFDQSxrQkFDQSx3QkFDQSxzQkFDQSxjQUNBLGtCQUVELFNBQ0MrcEIsRUFDQUMsRUFDQS9MLEVBQ0ErRixFQUNBQyxFQUNBZ0csRUFDQXpKLEVBQ0FtRyxFQUNBdUQsR0FHRCxNQUFPLENBQ05ILFNBQVVBLEVBQ1ZDLE9BQVFBLEVBQ1IvTCxNQUFPQSxFQUNQK0YsT0FBUUEsRUFDUkMsU0FBVUEsRUFDVmdHLGVBQWdCQSxFQUNoQnpKLGFBQWNBLEVBQ2RtRyxLQUFNQSxFQUNOdUQsUUFBU0EsS0FXWGxxQixFQUFRLG9CQUFvQixHQUFJLFdBRS9CLE1BQU8sQ0FRTmdJLE9BQVEsQ0FDUG1pQixxQ0FBc0MsZ0JBVXZDQyxhQUFjLFNBQVVoVixHQUVsQkEsSUFDSkEsRUFBTWlWLGlCQUNOalYsRUFBTWtWLG1CQUdQLElBQUlDLEVBQU03RyxLQUFLQyxLQUFLN2dCLFFBQVMsMkNBQTRDLENBQ3hFMG5CLEtBQU10a0IsS0FBS29ILE1BQU02WCxrQkFHYmpPLE9BQU9vRCxRQUFTaVEsS0FFZnJrQixLQUFLb0gsTUFBTTNFLFlBQ2Z6QyxLQUFLb0gsTUFBTTNFLFdBQVdvRCxPQUFRN0YsS0FBS29ILE9BSXBDckgsU0FBU3ViLE9BQU92VCxRQUFTLGlCQUFrQi9ILEtBQUtvSCxPQUdoRHBILEtBQUsrSCxRQUFTLGdCQUFpQi9ILEtBQUtvSCxZQWtCeEN0TixFQUFRLGtCQUFrQixHQUFJLFdBRTdCLE1BQU8sQ0FFTnlxQixVQUFXLEtBUVh6aUIsT0FBUSxDQUNQMGlCLHdCQUF5QixpQkFDekJDLGtDQUFtQyxxQkFDbkNDLHFDQUFzQyxlQUN0Q0Msc0NBQXVDLFlBQ3ZDQyw2Q0FBOEMsZ0JBQzlDQyxvQ0FBcUMsa0JBQ3JDQyxzQkFBdUIsV0FDdkJDLHVCQUF3QixVQUN4QkMsc0JBQXVCLGFBQ3ZCQyxtQ0FBb0MsVUFDcENDLHFDQUFzQyxZQVV2Q0MsaUJBQWtCLFNBQVUvZ0IsR0FFM0IsT0FBS0EsRUFBSUcsS0FBTSxtQkFDUHpFLEVBQUV2RCxJQUFLNkgsRUFBSUcsS0FBTSxtQkFBb0JqSSxNQUFPLEtBQU8sU0FBVThvQixHQUNuRSxPQUFPQSxFQUFJQyxTQUlOLENBQUUsSUFBSyxJQUFLLElBQUssU0FBVSxPQVduQ0MsWUFBYSxTQUFVbGhCLEdBRXRCLE1BQUssVUFBWUEsRUFBSSxHQUFHdkMsUUFDaEJ1QyxFQUFJbVIsTUFHTG5SLEVBQUlHLEtBQU0sb0JBQXlCSCxFQUFJbWhCLFNBQVUsYUFJakR6bEIsRUFBRTBsQixnQkFBaUJwaEIsRUFBSThILE9BQVFsTSxLQUFLbWxCLGlCQUFrQi9nQixJQUhyREEsRUFBSXFoQixRQWNiQyxZQUFhLFNBQVV4VyxHQUN0QixJQUFJOUssRUFBTXpLLEVBQUd1VixFQUFNcUMsUUFDbkIsT0FBU25OLEVBQUlHLEtBQU0sMkJBQThCdkUsS0FBS3NsQixZQUFhbGhCLElBVXBFdWhCLFNBQVUsU0FBVXpXLEdBRW5CLElBQUkrSixFQUFPalosS0FDVm9FLEVBQU16SyxFQUFHdVYsRUFBTXFDLFFBQ2ZrSixFQUFVemEsS0FBS3NsQixZQUFhbGhCLEdBQzVCZ1QsRUFBT2hULEVBQUlHLEtBQU0sYUFFbEIsSUFBT0gsRUFBSUcsS0FBTSxhQUFnQkgsRUFBSUcsS0FBTSxtQkFBdUJrVyxFQUFRaGUsT0FBUyxFQUNsRixPQUFPLEVBR1IsR0FBSyxRQUFVMmEsR0FBUSxVQUFZQSxHQUNsQyxJQUFPcFgsS0FBSzRsQixjQUFlNWxCLEtBQUtzbEIsWUFBYWxoQixJQUM1QyxPQUFPLE1BR0csY0FBZ0JnVCxHQUUzQm9HLEtBQUs2QixLQUFLL2pCLEtBQU0sQ0FDZitJLEtBQU0sQ0FDTGliLE9BQVEsZUFDUkMsWUFBYSxnQkFDYkMsVUFBV3hPLE9BQU9xRyxhQUFhb0ksWUFBWWhaLElBQUssTUFDaEQzSCxHQUFJbWEsRUFBSzdSLE1BQU1YLElBQUssTUFDcEJxVSxNQUFPN0IsRUFBSzdSLE1BQU1YLElBQUssU0FDdkJvZixLQUFNcEwsR0FFUHFMLFdBQVksV0FDWHRJLEtBQUt1SSxRQUFRelgsTUFBT2xLLEVBQUk2RyxRQUFTLCtCQUFpQyxVQUVuRWdMLFFBQVMsU0FBVStQLEdBRWJBLEVBQUVwSCxXQUFhb0gsRUFBRUgsT0FDckI1TSxFQUFLN1IsTUFBTXlPLElBQUssWUFBYW1RLEVBQUVwSCxXQUMvQjNGLEVBQUs3UixNQUFNeU8sSUFBSyxPQUFRbVEsRUFBRUgsTUFDMUI1TSxFQUFLbFQsYUFRVCxPQUFPLEdBVVJrZ0IsaUJBQWtCLFdBRWpCam1CLEtBQUtvRSxJQUFJMkYsS0FBTSw2QkFBOEJsSixLQUFNLFdBRWxEbEgsRUFBR3FHLE1BQU9rbUIsZUFBZ0IsQ0FDekJDLE9BQVF4c0IsRUFBR3FHLE1BQU91RSxLQUFNLHFCQUF3QixjQUNoRGljLGdCQUFjamhCLElBQWM1RixFQUFHcUcsTUFBT3VFLEtBQU0seUJBQXNDLFFBQVU1SyxFQUFHcUcsTUFBT3VFLEtBQU0sd0JBQzVHZ2MsZ0JBQWNoaEIsSUFBYzVGLEVBQUdxRyxNQUFPdUUsS0FBTSx5QkFBc0MsUUFBVTVLLEVBQUdxRyxNQUFPdUUsS0FBTSx3QkFDNUc2aEIsUUFBUyxTQUFVQyxFQUFjQyxHQUNoQ0EsRUFBT0MsYUFjWEMsb0JBQXFCLFdBRXBCLElBQUl2TixFQUFPalosS0FFWEEsS0FBS29FLElBQUkyRixLQUFNLDJDQUE0Q2xKLEtBQU0sV0FFaEUsSUFBSTRsQixFQUFhOXNCLEVBQUdxRyxNQUFPdUUsS0FBTSxtQkFBb0JqSSxNQUFPLEtBQzNEaUksRUFBTzVLLEVBQUdxRyxNQUFPdUUsS0FBTSxrQkFFcEJtaUIsRUFBSyxJQUFJQyxNQUFPM21CLEtBQU0sQ0FDekI0bUIsUUFBUyxDQUNSQyxRQUFTLENBQUVKLEdBQ1hLLFNBQVUsQ0FDVEMsU0FBVSxDQUNUQyxJQUFLLENBQ0o3VCxJQUFLLEVBQ0w4VCxRQUFTLFNBQVVDLEVBQU9DLEdBQ3pCLE9BQU8sSUFHVEMsR0FBSSxDQUNIalUsSUFBSyxHQUNMOFQsUUFBUyxTQUFVQyxFQUFPQyxHQUV6QixPQURBVCxFQUFHM3NCLEtBQUt3c0IsUUFDRCxPQU1aN00sWUFBYS9mLEVBQUdxRyxNQUFPdUUsS0FBTSxvQkFDN0I4aUIsTUFBTyxXQUdSWCxFQUFHaE8sR0FBSSxjQUFlLFNBQVU0TyxFQUFPQyxFQUFVQyxHQUNoRHZPLEVBQUs3UixNQUFNeU8sSUFBS3RSLEVBQU0wVSxFQUFLcU0sWUFBYTNyQixFQUFHK3NCLEVBQUczc0IsVUFHL0NnRyxTQUFTdWIsT0FBT3ZULFFBQVMscUJBQXNCMmUsRUFBSS9zQixFQUFHcUcsTUFBUWlaLE1BWWhFd08sYUFBYyxXQUViem5CLEtBQUtvRSxJQUFJMkYsS0FBTSxnQ0FBaUMyZCxZQUFhLENBQzVEQyxNQUFPLFVBYVRDLFFBQVMsU0FBVTFZLEdBRWxCQSxFQUFNa1Ysa0JBRU5wa0IsS0FBS29ILE1BQU15TyxJQUFLLGNBQWMsRUFBTyxDQUFFOU8sUUFBUSxJQUd4Q3BOLEVBQUd1VixFQUFNcUMsUUFDTHZSLEtBQUswbEIsWUFBYXhXLEtBRmxCbFAsS0FNRTJsQixTQUFVelcsR0FHckJsUCxLQUFLNm5CLFdBQVkzWSxHQVRSbFAsS0FPSjhuQixhQUFjNVksS0FnQnRCNlksU0FBVSxTQUFVN1ksR0FFbkJBLEVBQU1rVixrQkFDTnBrQixLQUFLb0gsTUFBTXlPLElBQUssY0FBYyxFQUFNLENBQUU5TyxRQUFRLEtBWS9DaWhCLFNBQVUsU0FBVTlZLEdBRW5CQSxFQUFNaVYsaUJBQ05qVixFQUFNa1Ysa0JBRU4sSUFBSXFCLEdBQVN2VyxFQUFNK1ksZUFBaUIvWSxHQUFRZ1osY0FBY0MsUUFBUyxjQUNuRW5YLE9BQU9uSSxTQUFTdWYsWUFBYSxjQUFjLEVBQU8zQyxJQVduRDRDLFVBQVcsU0FBVW5aLEdBRXBCLElBSUNxRyxFQUpHblIsRUFBTXpLLEVBQUd1VixFQUFNcUMsUUFDbEIrVyxFQUFVbGtCLEVBQUlHLEtBQU0sWUFDcEJBLEVBQU9ILEVBQUlHLEtBQU0sUUFDakJna0IsRUFBWW5rQixFQUFJMkYsS0FBTSxtQkFHbEJ1ZSxHQUNKL1MsRUFBTSxHQUNOQSxFQUFNZ1QsRUFBVWhzQixJQUFLLFdBQ3BCLE9BQU95RCxLQUFLdEMsUUFDVCtJLE9BRUo4TyxFQUFNZ1QsRUFBVSxHQUFHN3FCLE1BR3BCc0MsS0FBS29ILE1BQU15TyxJQUFLdFIsRUFBTWdSLElBV3ZCaVQsZ0JBQWlCLFNBQVV0WixHQUUxQixJQUFJOUssRUFBTXpLLEVBQUd1VixFQUFNcUMsUUFDbEJoTixFQUFPSCxFQUFJRyxLQUFNLFFBQ2pCZ1IsRUFBTW5SLEVBQUltUixNQUVYdlYsS0FBS29ILE1BQU15TyxJQUFLdFIsRUFBTWdSLElBWXZCa1QsV0FBWSxTQUFVdlosR0FFckJBLEVBQU1rVixrQkFFTixJQUNDalIsRUFBTWpFLEVBQU1XLE9BQVNYLEVBQU13WixRQUMzQkMsRUFBUXpaLEVBQU1rQixTQUdmLE9BQVMrQyxHQUVSLEtBQUssR0FFR3dWLElBQ056WixFQUFNaVYsaUJBQ05qVixFQUFNcUMsT0FBT2dWLFFBRWYsTUFFQSxLQUFLLEdBQ0pyWCxFQUFNaVYsaUJBQ05ua0IsS0FBSzhuQixhQUFjNVksR0FDbkJBLEVBQU1xQyxPQUFPZ1YsU0FjaEJxQyxlQUFnQixTQUFVMVosR0FFekJBLEVBQU1rVixrQkFFTixJQUFJbkwsRUFBT2paLEtBQ1ZvRSxFQUFNekssRUFBR3VWLEVBQU1yRCxlQUVYb04sRUFBS3NMLFVBRVR0TCxFQUFLc0wsVUFBVXNFLFNBQVNBLFNBQVNDLE1BQU8sWUFJeEM3UCxFQUFLc0wsVUFBWXdFLEdBQUdDLE1BQU1DLE9BQU9DLFdBQWFILEdBQUdDLE1BQU8sQ0FDdkRsTyxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyxtQkFDNUJ5TCxPQUFRLENBQ1AxRCxLQUFNakksS0FBS0MsS0FBS0MsVUFBVyxtQkFFNUIwTCxVQUFVLElBR1huUSxFQUFLc0wsVUFBVTdMLEdBQUksU0FBVSxXQUU1QixJQUdDMlEsRUFIRy9WLEVBQU9sUCxFQUFJRyxLQUFNLG1CQUNwQitrQixFQUFhclEsRUFBS3NMLFVBQVVnRixRQUFROWlCLElBQUssYUFBY3JGLFFBQVFvb0IsU0FDL0RoUSxFQUFRUCxFQUFLN1IsTUFBTVgsSUFBS3JDLEVBQUlHLEtBQU0sbUJBSWxDOGtCLEVBREkvVixHQUFRZ1csRUFBV0csTUFBT25XLEdBQ3hCZ1csRUFBV0csTUFBT25XLEdBQU8rVixJQUV6QkMsRUFBV0QsSUFHbEI3UCxFQUFNM0QsSUFBSyxDQUNWL1csR0FBSXdxQixFQUFXeHFCLEdBQ2Z5WCxJQUFLOFMsT0FPUnBRLEVBQUtzTCxVQUFVbUYsUUFZaEJDLGFBQWMsU0FBVXphLEdBRXZCQSxFQUFNaVYsaUJBRU5ua0IsS0FBS29ILE1BQU1YLElBQUs5TSxFQUFHdVYsRUFBTXJELGVBQWdCdEgsS0FBTSxtQkFBcUJzUixJQUFLLENBQ3hFL1csR0FBSSxHQUNKeVgsSUFBSyxNQWFQdVIsYUFBYyxTQUFVNVksR0FDdkIsSUFBSTlLLEVBQU16SyxFQUFHdVYsRUFBTXFDLFFBQ2xCZ0UsRUFBTW5SLEVBQUlHLEtBQU0seUJBQ2pCSCxFQUFJOEgsS0FBTXFKLElBVVhzUyxXQUFZLFNBQVUzWSxHQUVyQixJQUFJOUssRUFBTXpLLEVBQUd1VixFQUFNcUMsUUFDbEJnRSxFQUFNdlYsS0FBS3NsQixZQUFhbGhCLEdBRXpCcEUsS0FBS29ILE1BQU15TyxJQUFLelIsRUFBSUcsS0FBTSxrQkFBb0JnUixJQVcvQ3FVLGNBQWUsU0FBVTFhLEdBRXhCQSxFQUFNa1Ysa0JBQ04sSUFHQzdPLEVBSEduUixFQUFNekssRUFBR3VWLEVBQU1xQyxRQUNsQmhOLEVBQU9ILEVBQUlHLEtBQU0sUUFDakJVLEVBQVdiLEVBQUlHLEtBQU0saUJBU3RCLEdBTENnUixFQURJblIsRUFBSXdDLEdBQUksWUFDTnhDLEVBQUlHLEtBQU0sV0FBY0gsRUFBSUcsS0FBTSxXQUFjLE1BRWhESCxFQUFJRyxLQUFNLFlBQWVILEVBQUlHLEtBQU0sWUFBZSxNQUduRCxJQUFNQSxFQUFLdkcsUUFBUyxLQUFRLENBRWpDLElBQUkxQixFQUFRaUksRUFBS2pJLE1BQU8sS0FFbkIsV0FBYUEsRUFBTSxHQUN2QjBELEtBQUtvSCxNQUFNMFEsYUFBYWpDLElBQUt2WixFQUFNLEdBQUlpWixHQUV2Q3ZWLEtBQUtvSCxNQUFNWCxJQUFLbkssRUFBTSxJQUFLdVosSUFBS3ZaLEVBQU0sR0FBSWlaLFFBTTNDdlYsS0FBS29ILE1BQU15TyxJQUFLdFIsRUFBTWdSLEdBTXZCLEdBRkF2VixLQUFLK0gsUUFBU3hELEVBQUszSCxRQUFTLElBQUssS0FBUSxVQUFXMlksSUFFN0N0USxHQUFZLFFBQVVBLEVBQVcsQ0FDdkMsSUFBSWdVLEVBQU9qWixLQUNYUCxXQUFZLFdBQ1h3WixFQUFLbFQsVUFDSCxPQWFMOGpCLFlBQWEsU0FBVS9xQixFQUFJZ3JCLEdBRTFCQSxFQUFXQSxHQUFZLEdBRXZCZixHQUFHZ0IsT0FBT2xrQixPQUFRL0csR0FFbEJpcUIsR0FBR2dCLE9BQU9wbUIsV0FBWTdFLEVBQUluRixFQUFFaUksUUFBUSxFQUFNbW5CLEdBQUdnQixPQUFPQyxxQkFBc0IsQ0FDekVDLGNBQWMsRUFDZEMsUUFBUyxDQUNSQyxTQUFVLDhHQUNWQyxTQUFVLGdIQUNWQyxNQUFPdnFCLEVBQUV5TyxLQUFNdk8sS0FBS3NxQixnQkFBaUJ0cUIsUUFFcEM4cEIsS0FXSlMsbUJBQW9CLFNBQVVyYixHQUU3QixJQUNDc2IsRUFBTzd3QixFQUFHdVYsRUFBTXJELGVBQ2hCNGUsRUFBUUQsRUFBS0UsUUFBUyxLQUN0QnBFLEVBQVNrRSxFQUFLRyxLQUFNLG1CQUNwQkMsRUFBV0gsRUFBTWxtQixLQUFNLFFBQ3ZCc2hCLEVBQU9TLEVBQU8vUSxNQUNkc1YsRUFBWUQsRUFBU2h1QixRQUFTaXBCLEVBQU0sSUFHckMyRSxFQUFLOWYsT0FHTCtmLEVBQU0zZ0IsSUFBSyxDQUNWZ2hCLE1BQU8sT0FDUEMsaUJBQWtCLE9BQ2xCQyxrQkFBbUIsU0FJcEJQLEVBQU1oRixLQUFNb0YsRUFBVTVzQixVQUFXLEVBQUc0c0IsRUFBVXB1QixPQUFTLElBR3ZENnBCLEVBQU8yRSxPQUFPNW9CLFNBYWZpb0IsZ0JBQWlCLFNBQVVQLEdBRTFCLElBQUk5USxFQUFPalosS0FDVmtyQixFQUFNdnhCLEVBQUcsSUFBTW93QixFQUFPanJCLElBQ3RCcXNCLEVBQVVELEVBQUlqZ0IsUUFBUyx5QkFDdkJtZ0IsRUFBU0QsRUFBUXBoQixLQUFNLGVBQ3ZCMU8sRUFBTzZ2QixFQUFJM21CLEtBQU0sa0JBRWI2bUIsRUFBTzN1QixRQUNYMnVCLEVBQU9DLFVBQVdGLEVBQVFwaEIsS0FBTSxxQkFJakNnZ0IsRUFBT3JSLEdBQUksU0FBVSxTQUFVeEosR0FDOUIrSixFQUFLN1IsTUFBTXlPLElBQUt4YSxFQUFNMHRCLEdBQUdnQixPQUFPdUIsV0FBWXZCLEVBQU9qckIsT0FJcERvc0IsRUFBSXhTLEdBQUksUUFBUyxTQUFVeEosR0FDMUIrSixFQUFLN1IsTUFBTXlPLElBQUt4YSxFQUFNNnZCLEVBQUkzVixTQUkzQjRWLEVBQVF6UyxHQUFJLFFBQVMsZ0NBQWlDLFdBQ3JEalosV0FBWSxXQUNYeXJCLEVBQUluakIsUUFBUyxVQUNYLE9BS0w2ZCxjQUFlLFNBQVUyRixHQUV4QixJQUFJQyxFQUFJM2lCLFNBQVM0aUIsY0FBZSxLQUVoQyxPQURBRCxFQUFFRSxLQUFPSCxFQUNBQyxFQUFFRyxNQUFRSCxFQUFFRyxPQUFTM2EsT0FBTzRhLFNBQVNELFNBY2pEN3hCLEVBQVEsb0JBQW9CLEdBQUksV0FFL0IsTUFBTyxDQVdOZ1YsU0FBVyxTQUFVSSxFQUFPQyxHQUczQixHQUFLQSxFQUFHSSxPQUFPZ1csU0FBVSxnQkFBbUIsQ0FDM0MsSUFBSXhuQixFQUFRaUMsS0FBS3VJLGtCQUFrQmdDLFdBQVd4TSxNQUFPb1IsRUFBRzBjLFFBR3hELE9BRkExYyxFQUFHMGMsT0FBT2htQixjQUNWN0YsS0FBS3lDLFdBQVdxQixJQUFLLEdBQUksQ0FBRTJMLEdBQUkxUixJQUloQyxJQUNJdVIsRUFEZUgsRUFBR0ksT0FDc0JsTCxLQUFNLFFBQ2xELEdBQU1pTCxHQUE4QkEsRUFBeUI3TSxXQUE3RCxDQUVBLElBQUk0TSxFQUFXclAsS0FBS3VJLGtCQUFrQmdDLFdBQVd4TSxNQUFPb1IsRUFBRzNJLE1BQ3ZEZ0osRUFBZ0JGLEVBQXlCN00sV0FBV2dFLElBQUswSSxFQUFHM0ksS0FBS2pDLEtBQU0sbUJBQzNFK0ssRUFBeUI3TSxXQUFXb0QsT0FBUTJKLEdBQzVDeFAsS0FBS3lDLFdBQVdxQixJQUFLMEwsRUFBZSxDQUFFQyxHQUFLSixJQUMzQ0csRUFBYy9NLFdBQWF6QyxLQUFLeUMsV0FDaEN6QyxLQUFLc0YsaUJBQWtCa0ssUUFhMUIxVixFQUFRLG1CQUFtQixHQUFJLFdBRTlCLE1BQU8sQ0FRTmd5Qiw2QkFBOEIsV0FFN0IsR0FBTzlyQixLQUFLb0gsTUFBTTNFLFdBQWxCLENBSUEsSUFBSTJVLEVBQU9wWCxLQUFLb0gsTUFBTVgsSUFBSyxRQUV0QnpHLEtBQUtvSCxNQUFNM0UsV0FBV3JCLFVBQVlwQixLQUFLb0gsTUFDM0NwSCxLQUFLb0UsSUFBSTJGLEtBQU0sY0FBZ0JxTixHQUFPMU0sT0FDM0IxSyxLQUFLb0gsTUFBTTNFLFdBQVc0Z0IsU0FBV3JqQixLQUFLb0gsT0FDakRwSCxLQUFLb0UsSUFBSTJGLEtBQU0sZ0JBQWtCcU4sR0FBTzFNLFNBYTFDaWUsTUFBTyxTQUFVb0QsRUFBV0MsR0FFM0IsSUFBSXZwQixFQUFhekMsS0FBS29ILE1BQU0zRSxXQUU1QkEsRUFBV29ELE9BQVE3RixLQUFLb0gsT0FDeEIzRSxFQUFXcUIsSUFBSzlELEtBQUtvSCxNQUFPLENBQUVxSSxHQUFJdWMsSUFDbEN2cEIsRUFBV3NGLFFBQVMsWUFVckJra0IsV0FBWSxTQUFVcnRCLEdBRXJCQSxFQUFFdWxCLGlCQUNGLElBQUlwbUIsRUFBUWlDLEtBQUtvSCxNQUFNM0UsV0FBV3pFLFFBQVNnQyxLQUFLb0gsT0FDaERwSCxLQUFLMm9CLE1BQU81cUIsRUFBT0EsRUFBUSxJQVU1Qm11QixTQUFVLFNBQVV0dEIsR0FFbkJBLEVBQUV1bEIsaUJBQ0YsSUFBSXBtQixFQUFRaUMsS0FBS29ILE1BQU0zRSxXQUFXekUsUUFBU2dDLEtBQUtvSCxPQUNoRHBILEtBQUsyb0IsTUFBTzVxQixFQUFPQSxFQUFRLE9BYTlCakUsRUFBUSxpQkFBaUIsR0FBSSxXQUU1QixNQUFPLENBRU5xeUIsY0FBZSxHQU1mNUMsTUFBTyxHQU1QbFgsTUFBTyxHQVNQK1osWUFBYSxTQUFVNXdCLEdBRXRCLFFBQUt3RSxLQUFLcVMsTUFBTzdXLElBQ1R3RSxLQUFLcVMsTUFBTzdXLElBT3JCNndCLGlCQUFrQixTQUFVdnFCLEdBRTNCaEMsRUFBRWUsS0FBTWlCLEVBQVEsU0FBVXdxQixFQUFNcGQsR0FFL0JsUCxLQUFLbXNCLGNBQWVqZCxHQUFVb2QsRUFDOUJ2c0IsU0FBU3ViLE9BQU81QyxHQUFJeEosRUFBT29kLEVBQU10c0IsT0FFL0JBLE9BSUp1c0IsbUJBQW9CLFdBRW5CenNCLEVBQUVlLEtBQU1iLEtBQUttc0IsY0FBZSxTQUFVRyxFQUFNcGQsR0FFM0NuUCxTQUFTdWIsT0FBT2tSLElBQUt0ZCxFQUFPb2QsRUFBTXRzQixhQUMzQkEsS0FBS21zQixjQUFlamQsSUFFekJsUCxPQVdKeXNCLGVBQWdCLFNBQVVqeEIsR0FFekIsSUFBSW9LLEVBQU81RixLQUFLb3NCLFlBQWE1d0IsR0FFdEJvSyxHQUlGQSxFQUFLOG1CLFdBR0Y1c0IsRUFBRXdWLFFBQVMxUCxFQUFLOG1CLFNBQVNyYSxTQUMvQnpNLEVBQUs4bUIsU0FBU0gscUJBQ2QzbUIsRUFBSzhtQixTQUFTQyxtQkFHZi9tQixFQUFLOG1CLFNBQVNGLE1BQ2Q1bUIsRUFBSzhtQixTQUFTRixJQUFLLEtBQU0sS0FBTSxNQUMvQjVtQixFQUFLOG1CLFNBQVM3bUIsU0FDZEQsRUFBSzhtQixTQUFTRSxtQkFNZGhuQixFQUFLOG1CLFNBQVcsT0FZbEJDLGdCQUFpQixXQUVoQjdzQixFQUFFZSxLQUFNYixLQUFLcVMsTUFBTyxTQUFVaE8sRUFBTTdJLEdBRW5Dd0UsS0FBS3lzQixlQUFnQmp4QixJQUVuQndFLE9BV0o2c0IsZ0JBQWlCLFNBQVVDLEdBRTFCQSxFQUFZQSxHQUFhLEdBRXpCaHRCLEVBQUVlLEtBQU1iLEtBQUtxUyxNQUFPLFNBQVVoTyxFQUFNN0ksR0FFOUJ3RSxLQUFLdXBCLFFBQVVsbEIsRUFBS2tsQixNQUV4QnZwQixLQUFLK3NCLGVBQWdCdnhCLEVBQU1zeEIsR0FJM0I5c0IsS0FBS3lzQixlQUFnQmp4QixJQUlwQndFLE9BWUorc0IsZUFBZ0IsU0FBVXZ4QixFQUFNc3hCLEdBRS9CLElBQUlsbkIsRUFBTzVGLEtBQUtvc0IsWUFBYTV3QixHQUV0Qm9LLElBSVA1RixLQUFLeXNCLGVBQWdCanhCLEdBRWRvSyxFQUFLOG1CLFdBQ1g5bUIsRUFBSzhtQixTQUFXLElBQUk5bUIsRUFBSzRSLE1BQU9zVixJQUdqQ2xuQixFQUFLOG1CLFNBQVMzbUIsV0FZZmluQixVQUFXLFNBQVd6RCxHQUdyQixPQURBdnBCLEtBQUt1cEIsTUFBUUEsRUFDTnZwQixTQWNWbEcsRUFBUSxtQkFBbUIsR0FBSSxXQUU5QixNQUFPLENBUU5nSSxPQUFRLENBQ1BtckIsb0NBQXFDLGVBVXRDQyxZQUFhLFNBQVVoZSxHQUVqQkEsSUFDSkEsRUFBTWlWLGlCQUNOalYsRUFBTWtWLG1CQUdQLElBQUlDLEVBQU03RyxLQUFLQyxLQUFLN2dCLFFBQVMsc0RBQXVELENBQ25GMG5CLEtBQU10a0IsS0FBS29ILE1BQU02WCxrQkFHYmpPLE9BQU9vRCxRQUFTaVEsS0FFZnJrQixLQUFLb0gsTUFBTTNFLFlBQ2Z6QyxLQUFLb0gsTUFBTTNFLFdBQVdvRCxPQUFRN0YsS0FBS29ILE9BSXBDckgsU0FBU3ViLE9BQU92VCxRQUFTLGdCQUFpQi9ILEtBQUtvSCxPQUcvQ3BILEtBQUsrSCxRQUFTLGdCQUFpQi9ILEtBQUtvSCxZQWdCeEN0TixFQUFRLGdCQUFnQixDQUN0QixvQkFDQSxrQkFDQSxvQkFDQSxtQkFDQSxpQkFDQSxvQkFFRCxTQUNDcXpCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBR0QsTUFBTyxDQUNOTCxXQUFZQSxFQUNaQyxTQUFVQSxFQUNWQyxXQUFZQSxFQUNaQyxVQUFXQSxFQUNYQyxRQUFTQSxFQUNUQyxVQUFXQSxLQVViMXpCLEVBQVEsd0JBQXdCLENBQzlCLHFCQUNBLGdCQUNBLGlCQUNFLFNBQ0YyekIsRUFDQUMsRUFDQUMsR0FHRCxPQUFPLFdBYU4sU0FBU2xuQixFQUFLMlEsRUFBTTViLEVBQU02SSxFQUFNVCxHQUUvQixPQUFPd1QsRUFBTTViLEdBS04sSUFBSTRiLEVBQU01YixHQUFRNkksRUFBTVQsSUFKOUJpYyxRQUFRQyxJQUFLLElBQU10a0IsRUFBTyxpQkFDbkIsR0FrR1QsT0FsRkF3RSxLQUFLeVgsZUFBaUIsU0FBVWpjLEVBQU02SSxFQUFNVCxHQUUzQyxPQUFPNkMsRUFBS2duQixFQUFhanlCLEVBQU02SSxFQUFNVCxJQWF0QzVELEtBQUt1WCxVQUFZLFNBQVUvYixFQUFNNkksRUFBTVQsR0FFdEMsT0FBTzZDLEVBQUtpbkIsRUFBUWx5QixFQUFNNkksRUFBTVQsSUFZakM1RCxLQUFLNHRCLFlBQWMsV0FLbEIsSUFIQSxJQUFJaG9CLEVBQU92SSxVQUFVLEdBQ3BCbkIsRUFBSSxFQUVHbUIsVUFBV25CLElBQU0sQ0FFeEIsSUFBSTJ4QixFQUFZeHdCLFVBQVduQixHQUN0Qnl4QixFQUFPRSxLQUVOam9CLEVBQUs5RCxRQUFVNnJCLEVBQU9FLEdBQVkvckIsU0FDdEM4RCxFQUFLOUQsT0FBU2hDLEVBQUV1VyxTQUFVelEsRUFBSzlELE9BQVE2ckIsRUFBT0UsR0FBWS9yQixTQUczRDhELEVBQU85RixFQUFFdVcsU0FBVXpRLEVBQU0rbkIsRUFBT0UsS0FJakMzeEIsSUFHRCxPQUFPNkQsU0FBU0csS0FBSzBCLE9BQVFnRSxJQVk5QjVGLEtBQUs4dEIsb0JBQXNCLFNBQVV0eUIsRUFBTXFjLEdBRTFDNFYsRUFBYWp5QixHQUFTdUUsU0FBU2lFLFdBQVdwQyxPQUFRaVcsSUFZbkQ3WCxLQUFLK3RCLGVBQWlCLFNBQVV2eUIsRUFBTXFjLEdBRXJDNlYsRUFBUWx5QixHQUFTa3lCLEVBQWlCLFNBQUU5ckIsT0FBUWlXLElBSXRDN1gsUUFXVGxHLEVBQVEsb0JBQW9CLEdBQUksV0FFOUIsT0FBTyxTQUFVZ3dCLEdBRWhCLElBQUk3USxFQUFPalosS0FDVnNXLEVBQVV3VCxFQUFTeFQsVUFBVyxFQVEvQnRXLEtBQUtndUIsUUFBVSxXQUVkL1UsRUFBSzZHLElBQUssd0NBQ1Z4SixHQUFVLEdBVVh0VyxLQUFLaXVCLE9BQVMsV0FFYjNYLEdBQVUsRUFDVjJDLEVBQUs2RyxJQUFLLHdDQVdYOWYsS0FBSzhmLElBQU0sV0FFSnhKLEdBSVB4VyxFQUFFZSxLQUFNeEQsVUFBVyxTQUFVZ0gsR0FDNUJ3YixRQUFRQyxJQUFLemIsTUFXZHJFLEtBQUs0SyxPQUFTLFdBRVQwTCxFQUNKMkMsRUFBSytVLFVBRUwvVSxFQUFLZ1YsVUFNRDNYLEdBQ0oyQyxFQUFLZ1YsWUFZVG4wQixFQUFRLHNCQUFzQixHQUFJLFdBU2pDLE9BQU8sU0FBVThpQixHQUdoQixJQUFJc1IsRUFBaUJ0UixFQTRCckIsT0EzQkE5YyxFQUFFZSxLQUFNcXRCLEVBQWdCLFNBQVU5VyxHQUNqQ3RYLEVBQUVlLEtBQU11VyxFQUFNLFNBQVV1RixHQUN2QkEsRUFBT3dSLFFBQVMsTUFjbEJudUIsS0FBS3lHLElBQU0sU0FBVWtXLEVBQVF5UixFQUFZaG5CLEdBT3hDLE9BSks4bUIsRUFBZ0JFLEtBQ3BCelIsRUFBUzdjLEVBQUU4QixPQUFRK2EsRUFBUXVSLEVBQWdCRSxLQUdyQ3pSLEdBSUQzYyxRQVdUbEcsRUFBUSxtQkFBbUIsR0FBSSxXQUU3QixPQUFPLFNBQVVncUIsRUFBUWdHLEdBRXhCOXBCLEtBQUtxdUIsUUFBUyxFQUVkLElBQUlwVixFQUFPalosS0FDVnN1QixHQUFXLEVBQ1hDLEVBQWlCLEtBQ2pCQyxFQUFvQjFFLEVBQVMwRSxtQkFBcUIsSUFDbERDLEVBQVcsSUFBSTF1QixTQUFTaUUsV0FDeEIwcUIsRUFBVSxJQUFJM3VCLFNBQVNpRSxXQXlEekIsU0FBUzJxQixFQUFldHFCLEVBQU11cUIsR0FZN0IsTUFWSyxZQUFjdnFCLEVBQUs4WixTQUN2QjlaLEVBQUt3cUIsUUFBVSxJQUdoQnhxQixFQUFLOFosT0FBUyxRQUNULGlCQUFvQnlRLElBQ3hCQSxFQUFNLENBQUVBLElBRVR2cUIsRUFBS3dxQixRQUFVeHFCLEVBQUt3cUIsUUFBUS94QixPQUFROHhCLEdBRTdCdnFCLEVBVVIsU0FBU3lxQixJQUVSLElBQUl6cUIsRUFBTyxHQUNYQSxFQUFLMHFCLFFBQVU5VixFQUFLK1Ysc0JBQ3BCM3FCLEVBQUs0cUIsb0JBQXNCaFcsRUFBS2dXLG9CQUFxQjVxQixFQUFLMHFCLFNBQzFEMXFCLEVBQUtncUIsT0FBU3BWLEVBQUtvVixPQUVuQnJkLE9BQU9xRyxhQUFhMEksTUFBTUQsSUFBSyxnQ0FBaUN6YixFQUFNLGtDQUV0RXRFLFNBQVN1YixPQUFPdlQsUUFBUyxzQkFBdUIxRCxHQW9KakQsU0FBUzZxQixFQUF1QkMsR0FFL0IsSUFBSUMsRUFvQ0osT0FsQ0tELGFBQWtCcHZCLFNBQVN1VSxPQUUvQjhhLEVBakVGLFNBQWlDaG9CLEdBRWhDLElBQ0NxVSxFQURHRCxFQUFPLEdBSVgsR0FBS3BVLEVBQU1YLElBQUssY0FDZixPQUFPK1UsRUFLSGdCLEVBQWFwVixLQUFXLElBQVNBLEVBQU1YLElBQUssZUFFaEQrVSxFQUFPMWIsRUFBRXlCLE1BQU82RixFQUFNK04sWUFDdEJzRyxFQUFZLFNBS1pELEVBQU9wVSxFQUFNZ08sb0JBQ2JxRyxFQUFZLFdBSWIsSUFBSTRULEVBQVlqb0IsRUFBd0Isa0JBQUlBLEVBQU13USxrQkFBb0IsR0FrQnRFLE9BakJBNEQsRUFBTzFiLEVBQUV3dkIsS0FBTTlULEVBQU0sU0FBVWpHLEVBQUtwQyxHQUluQyxPQUFLLElBQU1BLEVBQUluVixRQUFTLE9BRVgsSUFBTXF4QixFQUFRcnhCLFFBQVNtVixLQU9oQy9MLEVBQU1tVSxjQUNWQyxFQUFPcFUsRUFBTW1VLFlBQWFDLEVBQU1DLElBRzFCRCxFQXNCUytULENBQXdCSixHQUVsQ0EsRUFBT3ZZLG1CQUVYOVcsRUFBRWUsS0FBTXN1QixFQUFPdlgsa0JBQW1CLFNBQVV2YyxHQUUzQyxJQUFJa1AsRUFBVzJrQixFQUF1QkMsRUFBTzFvQixJQUFLcEwsSUFDM0N5RSxFQUFFd1YsUUFBUy9LLEtBQ2pCNmtCLEVBQWMvekIsR0FBU2tQLEtBUW5CekssRUFBRXdWLFFBQVM4WixLQUNqQkEsRUFBYXR3QixHQUFLcXdCLEVBQU8xb0IsSUFBSyxRQUdwQjBvQixhQUFrQnB2QixTQUFTaUUsYUFFdENvckIsRUFBZSxHQUNmRCxFQUFPdHVCLEtBQU0sU0FBVXVHLEdBQ3RCLElBQUlvb0IsRUFBZ0JOLEVBQXVCOW5CLEdBQ3BDdEgsRUFBRXdWLFFBQVNrYSxJQUNqQkosRUFBYTl4QixLQUFNa3lCLE1BTWZKLEVBV1IsU0FBUzVTLEVBQWFwVixHQUVyQixPQUFXdEgsRUFBRStjLFNBQVV6VixFQUFNdEksS0FBUSxJQUFNc0ksRUFBTXRJLEdBQUdkLFFBQVMsU0FhOUQsU0FBU3l4QixFQUF3QnJvQixFQUFPL0MsR0FFdkN0RSxTQUFTdWIsT0FBT3ZULFFBQVNYLEVBQU1YLElBQUssUUFBVywwQkFBMkJXLEVBQU8vQyxHQUVqRixJQUFJaXJCLEVBQU8sQ0FBRSxLQUFNLFdBRWRsb0IsRUFBTXdQLG1CQUNWMFksRUFBS3h5QixPQUFRc0ssRUFBTXdRLG1CQUdwQjlYLEVBQUVlLEtBQU1mLEVBQUV3dkIsS0FBTWpyQixFQUFNaXJCLEdBQVEsU0FBVS9aLEVBQUtsYSxHQUV2Q3lFLEVBQUU0VixRQUFTdE8sRUFBTVgsSUFBS3BMLEdBQVFrYSxZQUMzQm5PLEVBQU1zTixnQkFBaUJyWixHQUM5QitMLEVBQU1xTixlQUFnQnBaLEdBQVNrYSxLQU1qQ25PLEVBQU1zb0IsTUFBTyxjQWFkLFNBQVNDLEVBQWtCdHJCLEdBRzFCLElBQUl1ckIsRUFBVyxDQUNkam5CLE9BQVE4bEIsRUFDUm9CLE1BQU9uQixHQWdDUixPQTdCQTV1QixFQUFFZSxLQUFNK3VCLEVBQVUsU0FBVUUsRUFBTTNjLEdBRWpDLEdBQUs5TyxFQUFNOE8sR0FBUSxDQUVsQixJQUFJNGMsRUFBUyxHQUViandCLEVBQUVlLEtBQU13RCxFQUFNOE8sR0FBUSxTQUFVNmMsR0FHeEJBLEVBQUtyUSxNQU1Yb1EsRUFBT3p5QixLQUFNMHlCLEVBQUtyUSxPQUpsQm1RLEVBQUtqcUIsT0FBUW1xQixFQUFLbHhCLE1BVWZpeEIsRUFBT3R6QixRQUNYcUQsRUFBRThCLE9BQVF5QyxFQUFNc3FCLEVBQWV0cUIsRUFBTTByQixPQU9qQzFyQixFQWlHUixTQUFTNHJCLEVBQWlCNXJCLEdBR3pCLE9BQU9BLEVBQUs2ckIsU0FJUDdyQixFQUFLNnJCLFVBQ1Q3ckIsRUEzRkYsU0FBUzhyQixFQUF3QjlyQixFQUFNK1MsRUFBTXZOLEVBQVF1bUIsR0FFcEQsSUFBTy9yQixFQUFNK1MsR0FDWixPQUFPL1MsRUFHUixHQUFLd0YsRUFBT3BELElBQUsyUSxhQUFrQnJYLFNBQVN1VSxNQUFRLENBRW5ELElBQUkwYixFQUFPM3JCLEVBQU0rUyxHQUVqQixHQUFLNFksRUFBS3JRLE1BRVQ3ZixFQUFFOEIsT0FBUXd1QixFQUFXekIsRUFBZXlCLEVBQVdKLEVBQUtyUSxZQUU5QyxDQUVOLElBQUl2WSxFQUFReUMsRUFBT3BELElBQUsyUSxHQUduQjRZLEVBQUtseEIsSUFBTWt4QixFQUFLSyxVQUNwQmpwQixFQUFNeU8sSUFBSyxLQUFNbWEsRUFBS2x4QixXQUNmc0ksRUFBTXNOLGdCQUFnQjVWLElBRTlCMndCLEVBQXdCcm9CLEVBQU80b0IsR0FHMUI1b0IsRUFBTXdQLG1CQUVWOVcsRUFBRWUsS0FBTXVHLEVBQU13USxrQkFBbUIsU0FBVWIsR0FDMUNqWCxFQUFFOEIsT0FBUXlDLEVBQU0rUyxHQUFRK1ksRUFBd0I5ckIsRUFBTStTLEdBQVFMLEVBQVczUCxFQUFPZ3BCLFlBT3hFdm1CLEVBQU9wRCxJQUFLMlEsYUFBa0JyWCxTQUFTaUUsWUFFbERsRSxFQUFFZSxLQUFNd0QsRUFBTStTLEdBQVEsU0FBVTRZLEVBQU1qeUIsR0FFckMsR0FBS2l5QixFQUFLclEsTUFFVDdmLEVBQUU4QixPQUFRd3VCLEVBQVd6QixFQUFleUIsRUFBV0osRUFBS3JRLFlBRTlDLENBRU4sSUFBSXZZLEVBQVF5QyxFQUFPcEQsSUFBSzJRLEdBQU8zUSxJQUFLdXBCLEVBQUtLLFNBR3BDTCxFQUFLbHhCLElBQU1reEIsRUFBS0ssVUFDcEJqcEIsRUFBTXlPLElBQUssS0FBTW1hLEVBQUtseEIsV0FDZnNJLEVBQU1zTixnQkFBZ0I1VixJQUU5QjJ3QixFQUF3QnJvQixFQUFPNG9CLEdBRzFCNW9CLEVBQU13UCxtQkFFVjlXLEVBQUVlLEtBQU11RyxFQUFNd1Esa0JBQW1CLFNBQVViLEdBQzFDalgsRUFBRThCLE9BQVF5QyxFQUFNK1MsR0FBUStZLEVBQXdCOXJCLEVBQU0rUyxHQUFRclosR0FBU2daLEVBQVczUCxFQUFPZ3BCLFNBVzlGLE9BQU9BLEVBcUJDRCxDQUF3QjlyQixFQUFLNnJCLFFBQVMsV0FBWXBNLEVBQVF6ZixJQUczREEsRUF3T1IsT0FoTkFyRSxLQUFLZ3ZCLG9CQUFzQixXQUUxQixNQUFPLENBQ05ybUIsT0FBUThsQixFQUFTdG5CLE1BQU8sTUFDeEIwb0IsTUFBT25CLEVBQVF2bkIsTUFBTyxNQUN0QitvQixRQUFTaEIsRUFBdUJwTCxLQWFsQzlqQixLQUFLaXZCLG9CQUFzQixTQUFVRixHQWFwQyxZQVhLLElBQXVCQSxJQUMzQkEsRUFBVTlWLEVBQUsrVix5QkFJSmx2QixFQUFFaUssS0FBTWdsQixFQUFTLFNBQVUxcUIsR0FFdEMsT0FBUyxJQUFVdkUsRUFBRXdWLFFBQVNqUixNQWNoQ3JFLEtBQUtzd0IsU0FBVyxXQUNWaEMsRUFDSnZGLEdBQUd3SCxVQUFVQyxhQS9iZixXQUdDLElBQUt2WCxFQUFLb1YsT0FBVixDQUlBLElBQUlVLEVBQVU5VixFQUFLK1Ysc0JBR2QvVixFQUFLZ1csb0JBQXFCRixLQUU5QkEsRUFBUWp3QixHQUFLZ2xCLEVBQU9yZCxJQUFLLE1BRXpCK1csS0FBSzZCLEtBQUsvakIsS0FBTSxDQUNmK0ksS0FBTSxDQUNMaWIsT0FBUSxlQUNSQyxZQUFhLFlBQ2JDLFVBQVd1UCxFQUFRandCLEdBQ25CdVksYUFBY29aLEtBQUtDLFVBQVczQixJQUUvQmpKLFdBQVksV0FFWDlVLE9BQU9xRyxhQUFhMEksTUFBTUQsSUFBSyxzQ0FBdUNpUCxFQUFTLHdDQUUvRTlWLEVBQUtvVixRQUFTLEVBRWR0dUIsU0FBU3ViLE9BQU92VCxRQUFTLGlCQUFrQmtSLElBRzVDMEcsTUFBTyxTQUFVQyxFQUFLekIsRUFBUXdCLEdBRTdCM08sT0FBT3FHLGFBQWEwSSxNQUFNRCxJQUFLLHFDQUFzQ3piLEtBQU0sdUNBRTNFNFUsRUFBS29WLFFBQVMsRUFFZHR1QixTQUFTdWIsT0FBT3ZULFFBQVMsaUJBQWtCa1IsRUFBTSxDQUNoRGtGLE9BQVEsUUFDUjBRLFFBQVNqUCxFQUFJK1EsYUFBZSxLQUFPaFIsRUFBUSxJQUFNeEIsRUFBUSxPQUkzRGxJLFFBQVMsU0FBVStKLEdBRVhBLEVBQUkzSSxlQUlYckcsT0FBT3FHLGFBQWEwSSxNQUFNRCxJQUFLLHVDQUF3Q0UsRUFBSyx5Q0FFNUVBLEVBQUkzSSxhQUFlc1ksRUFBa0IzUCxFQUFJM0ksY0FDekMySSxFQUFJM0ksYUFBZTRZLEVBQWlCalEsRUFBSTNJLGNBRXhDNEIsRUFBS29WLFFBQVMsRUFFZHR1QixTQUFTdWIsT0FBT3ZULFFBQVMsaUJBQWtCa1IsRUFBTStHLEVBQUkzSSxvQkEwWXZEdVosSUFZRjV3QixLQUFLNndCLG1CQUFxQixTQUFVQyxHQUNuQ3RDLEVBQW9Cc0MsRUFDZnZDLEdBQ0p3QyxjQUFleEMsR0FFWEMsSUFDSkQsRUFBaUJ5QyxZQUFhbEMsRUFBbUJOLEtBb0JuRHp1QixTQUFTdWIsT0FBTzVDLEdBQUksaUJBQWtCLFNBQVV0UixHQUcxQ29WLEVBQWFwVixJQUlsQnFuQixFQUFTM3FCLElBQUtoRSxFQUFFeUIsTUFBTzZGLEVBQU0rTixlQVM5QnBWLFNBQVN1YixPQUFPNUMsR0FBSSxnQkFBaUIsU0FBVXRSLEdBRzlDLElBQUtvVixFQUFhcFYsR0FBbEIsQ0FJQSxJQUFJL0MsRUFBT3ZFLEVBQUV5QixNQUFPNkYsRUFBTStOLFlBRXJCL04sRUFBTW1SLGVBQ1ZsVSxFQUFLdkYsR0FBS3NJLEVBQU1tUixnQkFHakJtVyxFQUFRNXFCLElBQUtPLE1Bb0JkMUssRUFBR2tQLFVBQVc2UCxHQUFJLGlCQUFrQixTQUFVeEosRUFBTzdLLEdBR3BELElBQUs0VSxFQUFLb1YsT0FBVixDQUlBLElBQUlVLEVBQVU5VixFQUFLK1Ysc0JBR2QvVixFQUFLZ1csb0JBQXFCRixLQUU5QkEsRUFBUWp3QixHQUFLZ2xCLEVBQU9yZCxJQUFLLE1BQ3pCd1MsRUFBS29WLFFBQVMsRUFDZGhxQixFQUFLZ1QsYUFBZW9aLEtBQUtDLFVBQVczQixJQUlyQy9kLE9BQU9xRyxhQUFhMEksTUFBTUQsSUFBSyxpQ0FBa0N6YixFQUFNLG1DQUV2RXRFLFNBQVN1YixPQUFPdlQsUUFBUyxpQkFBa0JrUixNQVM1Q3RmLEVBQUdrUCxVQUFXNlAsR0FBSSxpQkFBa0IsU0FBVXhKLEVBQU83SyxHQUU3Q0EsRUFBS2dULGVBSVpyRyxPQUFPcUcsYUFBYTBJLE1BQU1ELElBQUssaUNBQWtDemIsRUFBTSxtQ0FFdkVBLEVBQUtnVCxhQUFlc1ksRUFBa0J0ckIsRUFBS2dULGNBQzNDaFQsRUFBS2dULGFBQWU0WSxFQUFpQjVyQixFQUFLZ1QsY0FFMUM0QixFQUFLb1YsUUFBUyxFQUVkdHVCLFNBQVN1YixPQUFPdlQsUUFBUyxpQkFBa0JrUixFQUFNNVUsRUFBS2dULGlCQVN2RDFkLEVBQUdrUCxVQUFXNlAsR0FBSSxrQkFBbUIsU0FBVXhKLEVBQU83SyxHQUVyRDJNLE9BQU9xRyxhQUFhMEksTUFBTUQsSUFBSyxrQ0FBbUN6YixFQUFNLG9DQUV4RTRVLEVBQUtvVixRQUFTLEVBRWR0dUIsU0FBU3ViLE9BQU92VCxRQUFTLGlCQUFrQmtSLEVBQU0sQ0FDaERrRixPQUFRLFFBQ1IwUSxRQUFTeHFCLEVBQUtzc0IsYUFBZSxLQUFPdHNCLEVBQUs4WixPQUFTLElBQU05WixFQUFLNHNCLFdBQVksYUExcUJwRSxJQUF1QmxJLEdBQUd3SCxZQUU5QnZmLE9BQU9xRyxhQUFhMEksTUFBTUQsSUFBSyx5REFDL0J3TyxHQUFXLEdBS1JFLEdBQ0p2VixFQUFLNFgsbUJBQW9CckMsR0FJMUI3MEIsRUFBR3FYLFFBQVMwSCxHQUFJLGVBQWdCLFdBRS9CLEdBQUtPLEVBQUtnVyxzQkFFVCxPQURBSCxJQUNPLG1EQTBxQkg5dUIsUUFXVGxHLEVBQVEsZUFBZSxDQUNyQixvQkFDQSxrQkFDQSxtQkFDQSxvQkFDRSxTQUNGcXpCLEVBQ0FDLEVBQ0FFLEVBQ0FFLEdBR0QsT0FBT3p0QixTQUFTRyxLQUFLMEIsT0FBUTlCLEVBQUV1VyxTQUFVLENBUXhDbEIsV0FBWSxXQUNYLE1BQU8sQ0FDTitiLFVBQVdseEIsS0FBS29ILE1BQU10SSxHQUN0QnF5QixrQkFBbUJueEIsS0FBS29ILE1BQU1YLElBQUssb0JBUXJDMnFCLFVBQVcsZ0NBUVh0dkIsT0FBUWhDLEVBQUV1VyxTQUFVLENBQ25CZ2IscUJBQXNCLHFCQUN0QkMsbUJBQW9CLG1CQUNwQkMseUJBQTBCLHlCQUMxQkMsc0JBQXVCLGVBQ3ZCQyxzQkFBdUIsZUFDdkJDLDBCQUEyQixXQUMzQkMsNEJBQTZCLGNBQzNCeEUsRUFBV3JyQixPQUFRc3JCLEVBQVN0ckIsT0FBUTByQixFQUFVMXJCLFFBUWpEaEQsR0FBSSxXQUNILE1BQU8sZUFBaUJrQixLQUFLb0gsTUFBTXRJLElBT3BDK0MsUUFBUyxLQU1Uc0ssU0FBVTRjLEdBQUc1YyxTQUFVLHdCQVF2QnhJLFdBQVksV0FFWDNELEtBQUsrRixTQUVML0YsS0FBS3NMLFNBQVV0TCxLQUFLb0gsTUFBTyxTQUFVcEgsS0FBSytGLFFBRTFDaEcsU0FBU3ViLE9BQU81QyxHQUFLLGtCQUFtQjFZLEtBQUtxb0IsVUFBV3JvQixNQUN4REQsU0FBU3ViLE9BQU81QyxHQUFLLG1CQUFvQjFZLEtBQUtxb0IsVUFBV3JvQixPQVUxRCtGLE9BQVEsV0FTUCxPQVBBL0YsS0FBS29FLElBQUk4SCxLQUFNbE0sS0FBS21NLFNBQVVuTSxLQUFLb0gsUUFDbkNwSCxLQUFLOHJCLCtCQUNBOXJCLEtBQUtvSCxNQUFNWCxJQUFLLGFBQ3BCekcsS0FBS29FLElBQUlFLFNBQVUsWUFFbkJ0RSxLQUFLb0UsSUFBSTBJLFlBQWEsWUFFaEI5TSxNQVdSNHhCLHVCQUF3QixXQUV2Qjd4QixTQUFTdWIsT0FBT3ZULFFBQVMsa0JBQW1CL0gsS0FBS29ILE1BQU8sY0FDeERwSCxLQUFLb0gsTUFBTXlPLElBQUssYUFBYSxJQVc5QmdjLG1CQUFvQixXQUVuQjl4QixTQUFTdWIsT0FBT3ZULFFBQVMsa0JBQW1CL0gsS0FBS29ILE1BQU8sVUFDeERwSCxLQUFLb0gsTUFBTXlPLElBQUssYUFBYSxJQVc5QmljLGlCQUFrQixXQUVqQi94QixTQUFTdWIsT0FBT3ZULFFBQVMsa0JBQW1CL0gsS0FBS29ILE1BQU8sUUFDeERwSCxLQUFLb0gsTUFBTXlPLElBQUssYUFBYSxJQVk5QndTLFVBQVcsU0FBVWpoQixHQUVmcEgsS0FBS29ILE1BQU10SSxLQUFPc0ksRUFBTXRJLElBQzVCa0IsS0FBS29ILE1BQU15TyxJQUFLLGFBQWEsSUFZL0JrYyxhQUFjLFNBQVU3aUIsR0FDdkJBLEVBQU1pVixpQkFDTm5rQixLQUFLZ3lCLGlCQUFrQixTQVV4QkMsYUFBYyxTQUFVL2lCLEdBQ3ZCQSxFQUFNaVYsaUJBQ05ua0IsS0FBS2d5QixpQkFBa0IsU0FVeEJBLGlCQUFrQixTQUFVN08sR0FFM0IsSUFDQytPLEVBREdDLEVBQVlueUIsS0FBS29ILE1BQU0zRSxXQUd0QixTQUFXMGdCLEVBQ2YrTyxFQUFhQyxFQUFVdG9CLE9BQU9rWixXQUNuQixTQUFXSSxJQUN0QitPLEVBQWFDLEVBQVV0b0IsT0FBT3FaLFlBRzFCZ1AsSUFFSkMsRUFBVXRzQixPQUFRN0YsS0FBS29ILE9BQ3ZCOHFCLEVBQVdwUCxXQUFZOWlCLEtBQUtvSCxPQUM1QjhxQixFQUFXcmMsSUFBSyxhQUFhLE1BTTdCc1gsRUFBWUMsRUFBVUUsRUFBV0UsTUFTckMxekIsRUFBUSxtQkFBbUIsQ0FBRSxlQUFnQixxQkFBdUIsU0FBVXM0QixFQUFZL0UsR0FFekYsT0FBT3R0QixTQUFTNEIsZUFBZUMsT0FBUTlCLEVBQUV1VyxTQUFVLENBRWxEK2EsVUFBVyxlQU1YMXVCLFVBQVcwdkIsRUFNWHR2QixZQUFZLEVBTVpRLFVBQVUsRUFFVkMsZ0JBQWlCLENBQ2hCNEssTUFBTSxFQUNOa2tCLFlBQWEsZ0JBQ2JDLE9BQVEsT0FDUkMsT0FBUSxlQUNSaHNCLE1BQU8sZUFDUG1ULFlBQWEseUNBR2Q4WSxlQUFnQixTQUFVL3ZCLEdBQ3pCOUksRUFBRyxpQkFBa0IySyxTQUFVLGFBR2hDbXVCLGNBQWUsU0FBVWh3QixHQUN4QjlJLEVBQUcsaUJBQWtCbVQsWUFBYSxhQVluQzhCLFVBQVksU0FBVU0sRUFBT0MsR0FFNUIsSUFBSUMsRUFBbUJwUCxLQUFLeUMsV0FBV2dFLElBQUswSSxFQUFHM0ksS0FBS2pDLEtBQU0sbUJBRXpEOEssRUFEdUJyUCxLQUFLdUksa0JBQ0lnQyxXQUFXeE0sTUFBT29SLEVBQUczSSxPQUVwQyxHQUFiNkksR0FBa0JELEdBQ3RCcFAsS0FBS3lDLFdBQVdvRCxPQUFRdUosR0FHekJwUCxLQUFLZ04sZ0NBQ0xoTixLQUFLZ0ksMEJBRURoSSxLQUFLa0UsOEJBQ1JsRSxLQUFLNkgsTUFBTyxXQUFZLENBQUV1SCxpQkFBbUJBLEVBQWtCQyxTQUFXQSxJQUUxRXJQLEtBQUsrSCxRQUFTLFdBQVlxSCxFQUFrQkMsS0FLNUNnZSxNQVNKdnpCLEVBQVEsZ0JBQWdCLENBQ3RCLG1CQUNBLGtCQUNBLG1CQUNBLG9CQUNFLFNBQ0Y0NEIsRUFDQXRGLEVBQ0FFLEVBQ0FFLEdBR0QsT0FBT3p0QixTQUFTRyxLQUFLMEIsT0FBUTlCLEVBQUV1VyxTQUFVLENBUXhDbEIsV0FBWSxXQUNYLE1BQU8sQ0FDTitiLFVBQVdseEIsS0FBS29ILE1BQU10SSxLQVF4QnN5QixVQUFXLGlDQVFYdHZCLE9BQVFoQyxFQUFFdVcsU0FBVSxDQUVuQnBVLE1BQVMsU0FDVDB3QixnQkFBaUIsU0FDakJDLGtCQUFtQixXQUNuQkMsMkJBQTRCLFdBQzVCQyw2QkFBOEIsYUFFOUJDLDJCQUE0QixpQkFFMUIzRixFQUFTdHJCLE9BQVEwckIsRUFBVTFyQixRQVE5QmhELEdBQUksV0FDSCxNQUFPLGdCQUFrQmtCLEtBQUtvSCxNQUFNdEksSUFPckMrQyxRQUFTLEtBTVRzSyxTQUFVNGMsR0FBRzVjLFNBQVUseUJBUXZCeEksV0FBWSxXQUVYM0QsS0FBSytGLFNBQ0wvRixLQUFLc0wsU0FBVXRMLEtBQUtvSCxNQUFPLFNBQVVwSCxLQUFLK0YsUUFDMUMvRixLQUFLc0wsU0FBVXRMLEtBQUtvSCxNQUFPLG1CQUFvQnBILEtBQUtnekIsaUJBQ3BEaHpCLEtBQUtpekIsZUFBZXh3QixXQUFXaVcsR0FBSSxNQUFPMVksS0FBS2t6QixjQUFlbHpCLE1BRTlEQSxLQUFLbXpCLFlBQWMsS0FFbkJwekIsU0FBU3ViLE9BQU81QyxHQUFJLGFBQWMxWSxLQUFLb3pCLE9BQVFwekIsTUFDL0NELFNBQVN1YixPQUFPNUMsR0FBSSxlQUFnQjFZLEtBQUtxekIsU0FBVXJ6QixPQVdwRCtGLE9BQVEsV0FtQlAsT0FqQkEvRixLQUFLb0UsSUFBSThILEtBQU1sTSxLQUFLbU0sU0FBVW5NLEtBQUtvSCxNQUFNb2lCLFdBRXpDeHBCLEtBQUs4ckIsK0JBRUw5ckIsS0FBS2l6QixlQUFpQixJQUFJUCxFQUFnQixDQUN6Q1ksR0FBSXR6QixLQUFLb0UsSUFBSTJGLEtBQU0saUJBQ25CdEgsV0FBWXpDLEtBQUtvSCxNQUFNWCxJQUFLLGFBRTdCekcsS0FBS2l6QixlQUFlbHRCLFNBQ3BCL0YsS0FBS2l6QixlQUFldmEsR0FBSSxZQUFhMVksS0FBS2l6QixlQUFlVCxnQkFDekR4eUIsS0FBS2l6QixlQUFldmEsR0FBSSxXQUFZMVksS0FBS2l6QixlQUFlUixlQUd4RHp5QixLQUFLaXpCLGVBQWV2YSxHQUFJLG1CQUFvQjFZLEtBQUt1ekIscUJBQXNCdnpCLE1BRXZFQSxLQUFLd3pCLDBCQUVFeHpCLE1BSVJ1ekIscUJBQXNCLFNBQVVFLEVBQVNDLEdBRXhDM3pCLFNBQVN1YixPQUFPdlQsUUFBUyx1QkFBd0IsQ0FDaEQwckIsUUFBU0EsRUFDVEMsU0FBVUEsS0FhWkwsU0FBVSxTQUFVbmtCLEVBQU95a0IsUUFFckIsSUFBdUJBLElBQzNCQSxHQUFTLEdBR0x6a0IsSUFDSkEsRUFBTWtWLGtCQUNObFYsRUFBTWlWLGtCQUdQbmtCLEtBQUtvRSxJQUFJMEksWUFBYSxZQUFhL0MsS0FBTSxrQkFBbUIrQyxZQUFhLGlCQUNwRTZtQixHQUNKM3pCLEtBQUtvSCxNQUFNeU8sSUFBSyxhQUFhLEdBRTlCOVYsU0FBU3ViLE9BQU92VCxRQUFTLGlCQUFrQi9ILEtBQUtvSCxRQVlqRGdzQixPQUFRLFNBQVVsa0IsRUFBT3lrQixRQUVuQixJQUF1QkEsSUFDM0JBLEdBQVMsR0FHTHprQixJQUNKQSxFQUFNa1Ysa0JBQ05sVixFQUFNaVYsa0JBR1Bua0IsS0FBS29FLElBQUlFLFNBQVUsWUFDZHF2QixHQUNKM3pCLEtBQUtvSCxNQUFNeU8sSUFBSyxhQUFhLEdBRTlCOVYsU0FBU3ViLE9BQU92VCxRQUFTLGlCQUFrQi9ILEtBQUtvSCxRQUlqRG9zQix3QkFBeUIsV0FFeEIsSUFBSWhKLEVBQU94cUIsS0FBS29FLElBQUkyRixLQUFNLG1CQUVyQi9KLEtBQUtvSCxNQUFNWCxJQUFLLFdBQVk2TyxVQUVoQ2tWLEVBQUtTLE9BSUxULEVBQUs5ZixRQWFQd29CLGNBQWUsU0FBVTlyQixHQUV4QnBILEtBQUtpekIsZUFBZXh3QixXQUFXc0YsUUFBUyxXQUN4Q1gsRUFBTXlPLElBQUssaUJBQWtCN1YsS0FBS29ILE1BQU1YLElBQUssT0FDN0N6RyxLQUFLb3pCLFVBSU5RLGNBQWUsU0FBVTFrQixHQUduQnZWLEVBQUd1VixFQUFNcUMsUUFBU2dVLFNBQVUsY0FFaEM1ckIsRUFBRyxrQkFBbUJtVCxZQUFhLGlCQUNuQ25ULEVBQUd1VixFQUFNcUMsUUFBU2pOLFNBQVUsbUJBYzlCMHVCLGdCQUFpQixTQUFVNXJCLEVBQU8xSixHQUU1QkEsRUFDSnNDLEtBQUtvekIsT0FBUSxNQUFNLEdBRW5CcHpCLEtBQUtxekIsU0FBVSxNQUFNLEtBS3JCakcsRUFBVUUsRUFBV0UsTUFTekIxekIsRUFBUSxvQkFBb0IsQ0FBRSxnQkFBaUIscUJBQXVCLFNBQVUrNUIsRUFBYXhHLEdBRTVGLE9BQU90dEIsU0FBUzRCLGVBQWVDLE9BQVE5QixFQUFFdVcsU0FBVSxDQU1sRGlkLEdBQUksaUJBRUp4eEIsT0FBUyxDQUNSZ3lCLG9FQUFzRSx3QkFFdEU3eEIsTUFBVSwwQkFDVjh4QiwyQkFBNkIsMEJBQzdCNXhCLFFBQVksY0FPYk8sVUFBV214QixFQU1YeHdCLGtCQUFrQixFQU1sQlAsWUFBWSxFQU1aUSxVQUFVLEVBRVZDLGdCQUFpQixDQUNoQjRLLE1BQU0sRUFDTm1rQixPQUFRLE9BQ1JDLE9BQVEsZ0JBQ1Joc0IsTUFBTyxnQkFDUG1ULFlBQWEsMENBR2Q4WSxlQUFnQixTQUFVL3ZCLEdBQ3pCekMsS0FBS29FLElBQUlFLFNBQVUsYUFHcEJtdUIsY0FBZSxTQUFVaHdCLEdBQ3hCekMsS0FBS29FLElBQUkwSSxZQUFhLGNBR3JCdWdCLE1BU0p2ekIsRUFBUSxlQUFlLENBQUUsb0JBQXFCLG1CQUFxQixTQUFVazZCLEVBQWlCNUcsR0FFN0YsT0FBT3J0QixTQUFTRyxLQUFLMEIsT0FBUTlCLEVBQUV1VyxTQUFVLENBUXhDbEIsV0FBWSxXQUNYLE1BQU8sQ0FDTitiLFVBQVdseEIsS0FBS29ILE1BQU10SSxLQVF4QncwQixHQUFJLHFCQU1KenhCLFFBQVMsTUFNVHNLLFNBQVU0YyxHQUFHNWMsU0FBVSx3QkFRdkJ4SSxXQUFZLFdBS1gzRCxLQUFLK0YsU0FFTC9GLEtBQUtpMEIsZ0JBQWtCLElBQUlELEVBQWlCLENBQzNDdnhCLFdBQVl6QyxLQUFLb0gsTUFBTVgsSUFBSyxjQUU3QnpHLEtBQUtpMEIsZ0JBQWdCbHVCLFNBRXJCL0YsS0FBS2kwQixnQkFBZ0J2YixHQUFJLFlBQWExWSxLQUFLaTBCLGdCQUFnQnpCLGdCQUUzRHh5QixLQUFLaTBCLGdCQUFnQnZiLEdBQUksV0FBWTFZLEtBQUtpMEIsZ0JBQWdCeEIsZUFFMUR6eUIsS0FBS2kwQixnQkFBZ0J2YixHQUFJLG1CQUFvQjFZLEtBQUtrMEIsdUJBRWxEbDBCLEtBQUtzTCxTQUFVdEwsS0FBS29ILE1BQU1YLElBQUssWUFBYSxNQUFPekcsS0FBS20wQixnQkFFeERwMEIsU0FBU3ViLE9BQU81QyxHQUFJLGlCQUFrQjFZLEtBQUtvMEIsa0JBQW1CcDBCLE1BRTlERCxTQUFTdWIsT0FBTzVDLEdBQUksaUJBQWtCMVksS0FBS3EwQixlQUFnQnIwQixNQUUzREQsU0FBU3ViLE9BQU81QyxHQUFJLGtCQUFtQjFZLEtBQUt1ekIscUJBQXNCdnpCLE9BVW5FK0YsT0FBUSxXQUVQLE9BREEvRixLQUFLb0UsSUFBSThILEtBQU1sTSxLQUFLbU0sU0FBVW5NLEtBQUtvSCxRQUM1QnBILE1BR1J1ekIscUJBQXNCLFNBQVVuc0IsR0FHL0IsSUFBSTRhLEVBQVVoaUIsS0FBS29ILE1BQU1YLElBQUssWUFBYUEsSUFBS1csRUFBTVgsSUFBSyxtQkFDM0R6RyxLQUFLaTBCLGdCQUFnQjN1QixpQkFBa0IwYyxJQWF4Q2tTLHNCQUF1QixTQUFVVCxFQUFTQyxHQUV6QzV6QixFQUFFZSxLQUFNNHlCLEVBQVMsU0FBVXJzQixHQUMxQkEsRUFBTXlPLElBQUssYUFBYSxLQUd6Qi9WLEVBQUVlLEtBQU02eUIsRUFBVSxTQUFVdHNCLEdBQzNCQSxFQUFNeU8sSUFBSyxhQUFhLE1BWTFCc2UsZUFBZ0IsU0FBVS9zQixHQUV6QnBILEtBQUtpMEIsZ0JBQWdCM3VCLGlCQUFrQjhCLElBWXhDZ3RCLGtCQUFtQixTQUFVaHRCLEdBRTVCLElBQUl3YyxFQUFXeGMsRUFBTVgsSUFBSyxhQUFnQixDQUFFVyxHQUFVLEdBQ3REcEgsS0FBS2kwQixnQkFBZ0J6dUIsa0JBQW1Cb2UsS0FJdkN3SixNQVNKdHpCLEVBQVEsdUJBQXVCLEdBQUksV0FFbEMsT0FBT2lHLFNBQVNHLEtBQUswQixPQUFROUIsRUFBRXVXLFNBQVUsQ0FNeEN2VSxPQUFRLENBQ1B3eUIsb0NBQXFDLGdCQVF0Q2hZLE9BQVEsR0FNUnphLFFBQVMsTUFNVHNLLFNBQVU0YyxHQUFHNWMsU0FBVSxpQ0FnQnZCb29CLGtCQUFtQixXQUNsQixPQUFPejBCLEVBQUV5TSxPQUFRdk0sS0FBS3NjLE9BQVEsU0FBVVksR0FDdkMsT0FBT2xkLEtBQUt3MEIsZ0JBQWlCdFgsRUFBTTlGLE9BQ2pDcFgsT0FTSnkwQixXQUFZLFdBRVgsT0FBT3owQixLQUFLb0gsTUFBTXNWLHVCQVduQmdZLGdCQUFpQixTQUFVQyxHQUUxQixJQUFJNzFCLEVBQUssUUFBVWtCLEtBQUtvSCxNQUFNWCxJQUFLLFFBQVcsb0JBQXNCa3VCLEVBRXBFLE1BQUssY0FBZ0IzakIsT0FBTzRqQixjQUNsQixXQUFhNWpCLE9BQU80akIsYUFBYUMsUUFBUy8xQixJQWNyRGcyQixxQkFBc0IsU0FBVTVYLEdBRS9CLE9BQU9BLEVBQU1HLGlCQUFtQkgsRUFBTUcsaUJBQW1CSCxFQUFNQyxXQVdoRTRYLFdBQVksU0FBVTNkLEdBQ3JCLE9BQVUsSUFBTUEsRUFBS3BaLFFBQVMsV0FVL0JnM0IsaUJBQWtCLFNBQVU1ZCxHQUczQixPQUFVLElBREUsQ0FBRSxjQUFlLGFBQWMsU0FBVSxPQUFRLGVBQ3ZDcFosUUFBU29aLEVBQUt4YSxRQUFTLFVBQVcsTUFXekQ0M0IsZ0JBQWlCLFNBQVVwZCxHQUcxQixPQUFVLElBREUsQ0FBRSxTQUFVLGlCQUNGcFosUUFBU29aLEVBQUt4YSxRQUFTLFVBQVcsTUFXekRxNEIsd0JBQXlCLFNBQVUvWCxHQUVsQyxPQUFTQSxFQUFNZ1ksWUFBY2wxQixLQUFLb0gsTUFBTVgsSUFBS3lXLEVBQU1HLG1CQVVwRHRYLE9BQVEsV0FTUCxPQVBBL0YsS0FBS29FLElBQUk4SCxLQUFNbE0sS0FBS21NLFNBQVVuTSxPQUc5QkYsRUFBRWUsS0FBTWIsS0FBS3UwQixvQkFBcUIsU0FBVXJYLEdBQzNDbGQsS0FBS20xQixjQUFlalksSUFDbEJsZCxNQUVJQSxNQVdSbTFCLGNBQWUsU0FBVWpZLEdBRXhCLElBQUlqRSxFQUFPalosS0FFWCtvQixHQUFHZ0IsT0FBT2xrQixPQUFRcVgsRUFBTXBlLElBQ3hCb2UsRUFBTTRNLFNBQVNJLFFBQVFHLE1BQVEsU0FBVU4sR0FFeEMsSUFBSW1CLEVBQU12eEIsRUFBRyxJQUFNb3dCLEVBQU9qckIsSUFDekJxc0IsRUFBVUQsRUFBSWpnQixRQUFTLHlCQUN2Qm1nQixFQUFTRCxFQUFRcGhCLEtBQU0sZUFDdkIxTyxFQUFPNnZCLEVBQUkzbUIsS0FBTSxrQkFFYjZtQixFQUFPM3VCLFFBQ1gydUIsRUFBT0MsVUFBV0YsRUFBUXBoQixLQUFNLHFCQUlqQ2dnQixFQUFPclIsR0FBSSxTQUFVLFNBQVV4SixHQUM5QitKLEVBQUs3UixNQUFNeU8sSUFBS3hhLEVBQU0wdEIsR0FBR2dCLE9BQU91QixXQUFZdkIsRUFBT2pyQixPQUlwRG9zQixFQUFJeFMsR0FBSSxRQUFTLFNBQVV4SixHQUMxQitKLEVBQUs3UixNQUFNeU8sSUFBS3hhLEVBQU02dkIsRUFBSTNWLFNBSTNCNFYsRUFBUXpTLEdBQUksUUFBUyxnQ0FBaUMsV0FDckRqWixXQUFZLFdBQ1h5ckIsRUFBSW5qQixRQUFTLFVBQ1gsT0FJTGdoQixHQUFHZ0IsT0FBT3BtQixXQUFZdVosRUFBTXBlLEdBQUlvZSxFQUFNNE0sV0FZdkNzTCxzQkFBdUIsU0FBVXh4QixFQUFTdVosR0FFekMsSUFBSWpSLEVBQU8sR0FDVjBYLEVBQVc1akIsS0FBS29ILE1BQU1YLElBQUswVyxHQUU1QixTQUFTa1ksRUFBYXpYLEVBQU9ySSxHQUU1QixNQUFPLGtCQUFvQkEsRUFBTSxJQUFNelYsRUFBRThqQixTQUFVck8sRUFBS3FPLEdBQWEsSUFBTWhHLEVBQVEsWUFzQnBGLE9BbEJBOWQsRUFBRWUsS0FBTStDLEVBQVMsU0FBVXVXLEVBQVFwYyxHQUc3QixpQkFBb0JvYyxFQUN4QmpPLEdBQVFtcEIsRUFBYWxiLEVBQVFwYyxHQUVsQixpQkFBb0JvYyxJQUUxQkEsRUFBT3lELE9BQVN6RCxFQUFPdlcsU0FDM0JzSSxHQUFRLG9CQUFzQmlPLEVBQU95RCxNQUFRLEtBQzdDMVIsR0FBUWxNLEtBQUtvMUIsc0JBQXVCamIsRUFBT3ZXLFFBQVN1WixJQUVwRGpSLEdBQVFtcEIsRUFBYWxiLEVBQU81RSxJQUFLNEUsRUFBT2hILE9BSXhDblQsTUFFSWtNLEdBWVJvcEIsWUFBYSxTQUFVQyxFQUFZQyxHQUVsQyxJQUFJbmYsRUFBVyxDQUNkb2YsUUFBUyxHQUNUMzJCLEdBQUlnQixFQUFFb1ksU0FBVXFkLEVBQVdwWSxVQUFZLEtBQ3ZDdVksV0FBWSxPQUNaOVgsTUFBTyxHQUNQaGEsUUFBUyxHQUNUOFYsWUFBYSxHQUNibUUsSUFBSyxHQUNMOFgsYUFBYyxZQUNkN0wsU0FBVSxJQUlYLEdBQUt5TCxFQUFXdFYsWUFBYSxJQUFVbmdCLEVBQUV5TyxLQUFNZ25CLEVBQVd0VixVQUFXamdCLEtBQUtvSCxNQUFuQ3RILEdBQ3RDLE9BQU8sRUFHUixPQUFTeTFCLEVBQVduZSxNQUVuQixJQUFLLGNBQ0pmLEVBQVNvZixRQUFRbjRCLEtBQU0sdUJBQ3ZCK1ksRUFBU3FELFlBQWMsV0FDdkJyRCxFQUFTd0gsSUFBTUwsS0FBS0MsS0FBS0MsVUFBVyx5Q0FDcENySCxFQUFTcWYsV0FBYSxNQUN2QixNQUVBLElBQUssYUFDSnJmLEVBQVNvZixRQUFRbjRCLEtBQU0sc0JBQ3hCLE1BRUEsSUFBSyxTQUNMLElBQUssZ0JBQ0osSUFBSXM0QixFQUFnQkwsRUFBV3pMLFVBQVksR0FDM0N6VCxFQUFTeVQsU0FBV253QixFQUFFaUksUUFBUSxFQUFNbW5CLEdBQUdnQixPQUFPQyxxQkFBc0IsQ0FDbkVDLGNBQWMsRUFDZEMsUUFBUyxDQUNSQyxTQUFVLDhHQUNWQyxTQUFVLGtIQUVUd0wsR0FDSixNQUVBLElBQUssU0FDSnZmLEVBQVNxZixXQUFhLFNBQ3ZCLE1BRUEsSUFBSyxZQUNKcmYsRUFBU3VILE1BQVFKLEtBQUtDLEtBQUtDLFVBQVcsYUFDdkMsTUFFQSxJQUFLLGNBQ0pySCxFQUFTb2YsUUFBUW40QixLQUFNLHVCQUN2QitZLEVBQVNxRCxZQUFjLFdBQ3ZCckQsRUFBU3dILElBQU1MLEtBQUtDLEtBQUtDLFVBQVcsNkNBQ3BDckgsRUFBU3FmLFdBQWEsTUFLbkIxMUIsS0FBSyswQixXQUFZUSxFQUFXbmUsUUFDaENmLEVBQVM2ZSxVQUFZLE1BQ3JCN2UsRUFBU3dmLFdBQWEsTUFHdkIsSUFBSTNZLEVBQVFwZCxFQUFFdVcsU0FBVXZXLEVBQUVnMkIsVUFBV1AsR0FBY2xmLEdBU25ELEdBTkt2VyxFQUFFd0IsV0FBWTRiLEVBQU10WixXQUN4QnNaLEVBQU10WixRQUFVOUQsRUFBRXlPLEtBQU0yTyxFQUFNdFosUUFBUzVELEtBQUtvSCxNQUE1QnRILEtBS1gsSUFBTSxDQUFFLFFBQVMsZ0JBQWlCOUIsUUFBU3UzQixFQUFXbmUsTUFBUyxDQUVwRSxJQUFJMmUsR0FBYSxFQUNqQmoyQixFQUFFZSxLQUFNMDBCLEVBQVczeEIsUUFBUyxTQUFVMlIsRUFBS3BDLElBQ3BDLElBQU1vQyxFQUFJdlgsUUFBUyxVQUFhLElBQU11WCxFQUFJdlgsUUFBUyxVQUN4RGtmLEVBQU10WixRQUFRdVAsR0FBTyxtQkFBcUJvQyxFQUFNLFlBQ2hEd2dCLEdBQWEsS0FHVkEsR0FDSjdZLEVBQU11WSxRQUFRbjRCLEtBQU0sY0FpQnRCLE9BWEs0ZixFQUFNVyxLQUNWWCxFQUFNdVksUUFBUW40QixLQUFNLFFBQVU0ZixFQUFNeVksY0FJaEN6WSxFQUFNdVksUUFBUWg1QixTQUNsQnlnQixFQUFNdVksUUFBVSxJQUFNdlksRUFBTXVZLFFBQVF6NEIsS0FBTSxNQUczQ2dELEtBQUtzYyxPQUFRWSxFQUFNcGUsSUFBT29lLEdBYTNCOFksMEJBQTJCLFNBQVVDLEdBRXBDLE9BQVUsSUFBTUEsRUFBV2o0QixRQUFTLFdBQWdCLE1BQVEsTUFZN0RrNEIsYUFBYyxTQUFVaG5CLEdBRXZCQSxFQUFNaVYsaUJBRU4sSUFDQ2dTLEVBRFN4OEIsRUFBR3VWLEVBQU1yRCxlQUNMWixRQUFTLHdCQUl2QixHQUZBa3JCLEVBQU90ckIsWUFBYSxVQUVmLGNBQWdCbUcsT0FBTzRqQixhQUFlLENBRTFDLElBQUk5MUIsRUFBS3EzQixFQUFPNXhCLEtBQU0sTUFDakI0eEIsRUFBTzVRLFNBQVUsVUFDckJ2VSxPQUFPNGpCLGFBQWF3QixRQUFTdDNCLEVBQUksVUFFakNrUyxPQUFPNGpCLGFBQWF5QixXQUFZdjNCLFVBZ0JyQ2hGLEVBQVEscUJBQXFCLENBQzNCLG9CQUNBLGtCQUNBLG1CQUNBLGlCQUNBLHdCQUNFLFNBQ0ZxekIsRUFDQUMsRUFDQUksRUFDQUQsRUFDQStJLEdBR0QsT0FBT3YyQixTQUFTRyxLQUFLMEIsT0FBUTlCLEVBQUV1VyxTQUFVLENBTXhDa1QsTUFBTyxVQU1QbFgsTUFBTyxDQUNOeVgsU0FBVSxDQUNUdFMsTUFBTzhlLEVBQ1A1SixTQUFVLEtBQ1ZuRCxNQUFPLFlBSVQrSixHQUFJLHNCQU1KeHhCLE9BQVFoQyxFQUFFdVcsU0FBVSxHQUFJOFcsRUFBV3JyQixPQUFRc3JCLEVBQVN0ckIsT0FBUTByQixFQUFVMXJCLFFBTXRFcUssU0FBVTRjLEdBQUc1YyxTQUFVLGlDQVN2QnhJLFdBQVksU0FBVVUsR0FFckJyRSxLQUFLb0gsTUFBUS9DLEVBQUsrZCxPQU9sQnRpQixFQUFFZSxLQUxrQixDQUNuQix3QkFDQSxxQkFDQSx5QkFFc0IsU0FBVXFPLEdBQ2hDbFAsS0FBS3NMLFNBQVV0TCxLQUFLb0gsTUFBTzhILEVBQU9sUCxLQUFLK0YsU0FDckMvRixNQUlIQSxLQUFLc0wsU0FBVXRMLEtBQUtvSCxNQUFPLDBCQUEyQixTQUFVZ2IsRUFBUTdNLEdBQ2xFLFFBQVVBLEdBQ2R2VixLQUFLb0UsSUFBSTJGLEtBQU0sK0JBQWdDaEMsUUFBUyxhQVkzRGhDLE9BQVEsV0FjUCxPQVpBL0YsS0FBS29FLElBQUk4SCxLQUFNbE0sS0FBS21NLFNBQVVuTSxLQUFLb0gsUUFFbkNwSCxLQUFLeXNCLGVBQWdCLFlBRXJCenNCLEtBQUsrc0IsZUFBZ0IsV0FBWSxDQUNoQ3VHLEdBQUksK0JBQ0psc0IsTUFBT3BILEtBQUtvSCxRQUdicEgsS0FBS2ltQixtQkFDTGptQixLQUFLeW5CLGVBRUV6bkIsT0FJTm10QixFQUFZQyxFQUFVSSxFQUFXRCxFQUFTK0ksTUFTOUN4OEIsRUFBUSxnQkFBZ0IsR0FBSSxXQUUzQixPQUFPaUcsU0FBU0csS0FBSzBCLE9BQVEsQ0FFNUJ5VSxTQUFVLENBQ1RrZ0IsVUFBVyxPQUVYNU8sTUFBTyxPQUNQNWYsUUFBUyxTQUNUeXVCLE1BQU8sUUFDUEMsVUFBVyxNQUNYM2IsTUFBTyxHQUNQTCxRQUFTLEdBQ1RpYyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsT0FBUSxTQUFVeHlCLEtBQ2xCeXlCLE9BQVEsU0FBVXp5QixNQU9uQnZDLFFBQVMsTUFRVDhCLFdBQVksU0FBVVUsR0FFaEJyRSxLQUFLb0UsSUFBSTNILFNBQ2J1RCxLQUFLcVcsU0FBU3lnQixVQUFZOTJCLEtBQUtvRSxJQUFJeUYsVUFHcEM3SixLQUFLNUMsS0FBTzBDLEVBQUV1VyxTQUFVaFMsRUFBS2pILEtBQU00QyxLQUFLcVcsVUFDeENyVyxLQUFLK0YsVUFVTkEsT0FBUSxXQUdQLE9BREEvRixLQUFLb0UsSUFBSTJ5QixhQUFjLzJCLEtBQUs1QyxNQUNyQjRDLE1BVVIwSyxLQUFNLFdBR0wsT0FEQTFLLEtBQUtvRSxJQUFJMnlCLGFBQWMsUUFDaEIvMkIsTUFVUmlyQixLQUFNLFdBR0wsT0FEQWpyQixLQUFLb0UsSUFBSTJ5QixhQUFjLFFBQ2hCLzJCLFVBYVZsRyxFQUFRLG1CQUFtQixHQUFJLFdBRTlCLE9BQU9pRyxTQUFTRyxLQUFLMEIsT0FBUSxDQVE1QkUsT0FBUSxDQUNQazFCLGlCQUFrQixZQU9uQm4xQixRQUFTLFNBU1Q4QixXQUFZLFNBQVVVLEdBRXJCckUsS0FBS2kzQixVQUFZNXlCLEVBQUs0eUIsVUFDdEJqM0IsS0FBS2szQixrQkFBb0I3eUIsRUFBSzZ5QixtQkFBcUIxWixLQUFLQyxLQUFLQyxVQUFXLGlCQVV6RXlaLFNBQVUsU0FBVWpvQixHQUVuQixJQUFJa0ksRUFBT3BYLEtBQUtvRSxJQUFJRyxLQUFNLGtCQUUxQnhFLFNBQVN1YixPQUFPdlQsUUFBU3FQLEVBQUt4YSxRQUFTLFFBQVMsSUFBTyxpQkFBa0JzUyxFQUFNa29CLE9BQU8veUIsS0FBTTZLLEdBQzVGbFAsS0FBS29FLElBQUltUixJQUFLLE1BQU94TixRQUFTLFdBVy9CaEMsT0FBUSxXQUNQLElBQUlrVCxFQUFPalosS0FrQ1gsT0FqQ0FQLFdBQVksV0FDWHdaLEVBQUs3VSxJQUFJc2pCLFlBQWEsQ0FDckIyUCxLQUFNLENBQ0xDLFNBQVUsT0FDVm5jLE1BQU8sSUFDUC9ILE9BQVEsT0FDUmlXLElBQUtyWSxPQUFPdW1CLFFBQ1psekIsS0FBTSxTQUFVK3lCLEdBQ2YsTUFBTyxDQUNOOVgsT0FBUSxlQUNSQyxZQUFhLFNBQ2JDLFVBQVd4TyxPQUFPcUcsYUFBYTBKLE9BQU9qaUIsR0FDdENtNEIsVUFBV2hlLEVBQUtnZSxVQUNoQk8sS0FBTUosRUFBT0ksS0FDYkMsS0FBTUwsRUFBT0ssS0FDYkMsWUFBYUMsYUFBYUMsU0FPN0JDLGVBQWdCbCtCLEVBQUcsZ0NBRW5CbStCLGFBQWMsU0FBVUMsR0FDdkIsT0FBT0EsR0FFUnJlLFlBQWFULEVBQUtpZSxrQkFDbEJjLGVBQWdCL2UsRUFBS2dmLGNBQ3JCdFEsTUFBTyxTQUVSMU8sRUFBSzdVLElBQUlHLEtBQU0saUJBQWtCMFUsRUFBS2dlLFlBQ3BDLEdBQ0lqM0IsTUFXUmk0QixjQUFlLFNBQVVqWSxHQUV4QixJQUFJa1ksRUFBUXYrQixFQUFHLCtDQUVmLEdBQUtxbUIsRUFBSW1ZLFFBQ1IsT0FBT0QsRUFBTS91QixPQUFRNlcsRUFBSXlGLE1BRzFCLElBQUkyUyxFQUFReitCLEVBQUcsMENBQ2QwK0IsRUFBUTErQixFQUFHLHNDQWFaLE9BWkM0ZixLQUFTLFdBQWF5RyxFQUFJVixPQUFXLFlBQWMsUUFDbkRtRyxLQUFTLFdBQWF6RixFQUFJVixPQUFXOUIsS0FBS0MsS0FBS0MsVUFBVyxVQUFhRixLQUFLQyxLQUFLQyxVQUFXLFNBRTdGMGEsRUFBTWp2QixPQUFRLG1CQUFxQm9RLEtBQU8sbUNBQXFDa00sS0FBTyxZQUV0RjRTLEVBQU1sdkIsT0FBUSxPQUFTNlcsRUFBSTNiLEtBQUt5VyxNQUFRLFNBQ3hDdWQsRUFBTWx2QixPQUFRLE9BQVNxVSxLQUFLQyxLQUFLQyxVQUFXLE1BQVMsU0FBV3NDLEVBQUkzYixLQUFLdkYsR0FBSyxjQUU5RWdCLEVBQUVlLEtBQU1tZixFQUFJVyxRQUFTLFNBQVU5VyxHQUM5Qnd1QixFQUFNbHZCLE9BQVEsT0FBU1UsRUFBUyxnQkFHMUJxdUIsRUFBTS91QixPQUFRaXZCLEdBQVFqdkIsT0FBUWt2QixRQWF4Q3YrQixFQUFRLHFCQUFxQixHQUFLLFdBRWpDLE9BQU9pRyxTQUFTRyxLQUFLMEIsT0FBUSxDQU01Qnd2QixVQUFXLHFCQUVYdHZCLE9BQVEsQ0FDUHcyQiwyQkFBNEIsZ0JBUzdCeDVCLEdBQUksV0FDSCxNQUFPLHNCQUF3QmtCLEtBQUtvSCxNQUFNdEksSUFPM0MrQyxRQUFTLEtBTVRzSyxTQUFVNGMsR0FBRzVjLFNBQVUsK0JBUXZCeEksV0FBWSxXQUVYM0QsS0FBSytGLFVBVU5BLE9BQVEsV0FFUCxPQURBL0YsS0FBS29FLElBQUk4SCxLQUFNbE0sS0FBS21NLFNBQVVuTSxLQUFLb0gsUUFDNUJwSCxNQVFSZ2YsYUFBYyxXQUViaGYsS0FBSzRnQixLQUFLNUIsYUFBYyxDQUN2Qi9ELFdBQVcsRUFDWDlCLFFBQVNuWixLQUFLb0gsTUFBTVgsSUFBSyxtQkFBc0J6RyxLQUFLb0gsTUFBTVgsSUFBSyxtQkFBc0IsS0FDckYrVCxjQUFleGEsS0FBS29ILFFBR3JCcEgsS0FBSzRnQixLQUFLN1ksUUFBUywyQkFpQ3RCak8sRUFBUSxxQkFBcUIsQ0FBRSxzQkFBd0IsU0FBVXkrQixHQUVoRSxPQUFPeDRCLFNBQVM0QixlQUFlQyxPQUFRLENBRXRDd3ZCLFVBQVcsZ0JBTVhrQyxHQUFJLHNCQU1KNXdCLFVBQVc2MUIsRUFNWHoxQixZQUFZLEVBTVpRLFVBQVUsTUFXWnhKLEVBQVEsdUJBQXVCLENBQUUsbUJBQXNCLFNBQVVzekIsR0FFaEUsT0FBT3J0QixTQUFTRyxLQUFLMEIsT0FBUTlCLEVBQUV1VyxTQUFVLENBTXhDK2EsVUFBVyx1QkFFWHR2QixPQUFRaEMsRUFBRXVXLFNBQVUsQ0FDbkJtaUIsK0JBQWdDLGlCQUNoQ0MsbURBQW9ELGFBQ3BEQyxtREFBb0QsY0FDbER0TCxFQUFTdHJCLFFBUVpoRCxHQUFJLFdBQ0gsTUFBTyx3QkFBMEJrQixLQUFLb0gsTUFBTXRJLElBTzdDK0MsUUFBUyxLQU1Uc0ssU0FBVTRjLEdBQUc1YyxTQUFVLGlDQVF2QnhJLFdBQVksV0FFWDNELEtBQUsrRixTQUVML0YsS0FBS3NMLFNBQVV0TCxLQUFLb0gsTUFBTTNFLFdBQVksTUFBT3pDLEtBQUsyNEIsdUJBQ2xEMzRCLEtBQUtzTCxTQUFVdEwsS0FBS29ILE1BQU8sU0FBVXBILEtBQUsrRixRQUVyQyxVQUFZL0YsS0FBS29ILE1BQU1YLElBQUssZ0JBQ2hDekcsS0FBS3NMLFNBQVV0TCxLQUFLb0gsTUFBTVgsSUFBSyxVQUFZLFNBQVV6RyxLQUFLK0YsU0FXNURBLE9BQVEsV0FFUCxPQURBL0YsS0FBS29FLElBQUk4SCxLQUFNbE0sS0FBS21NLFNBQVVuTSxLQUFLb0gsUUFDNUJwSCxNQVdScWIsV0FBWSxTQUFVbk0sR0FFckJBLEVBQU1rVixrQkFDTmxWLEVBQU1pVixpQkFFTixJQUFJcG1CLEVBQVFpQyxLQUFLb0gsTUFBTTNFLFdBQVd6RSxRQUFTZ0MsS0FBS29ILE9BQ2hEcEgsS0FBS29ILE1BQU0zRSxXQUFXb0gsT0FBT3dSLFdBQVksR0FBSSxDQUM1QzVMLEdBQUkxUixFQUFRLEtBWWQ2NkIsV0FBWSxTQUFVMXBCLEdBRXJCQSxFQUFNaVYsaUJBQ05wa0IsU0FBU3ViLE9BQU92VCxRQUFTLGdCQUFpQi9ILEtBQUtvSCxPQUMvQ3BILEtBQUtvSCxNQUFNM0UsV0FBV29ELE9BQVE3RixLQUFLb0gsUUFVcEN5eEIsZUFBZ0IsV0FFZixJQUFJemdCLEVBQVVwWSxLQUFLb0UsSUFBSTJGLEtBQU0seUJBQTBCbkQsR0FBSSxZQUMzRDVHLEtBQUtvSCxNQUFNeU8sSUFBSyxVQUFXdUMsR0FDM0JwWSxLQUFLb0gsTUFBTTNFLFdBQVdzRixRQUFTLGlCQUFrQi9ILEtBQUtvSCxTQUlyRGdtQixNQVNKdHpCLEVBQVEsMkJBQTJCLENBQUUsd0JBQTBCLFNBQVVnL0IsR0FFeEUsT0FBTy80QixTQUFTNEIsZUFBZUMsT0FBUSxDQUV0Q3d2QixVQUFXLHNCQU1YMXVCLFVBQVdvMkIsRUFNWHoxQixrQkFBa0IsRUFNbEJQLFlBQVksRUFNWlEsVUFBVSxFQUVWQyxnQkFBaUIsQ0FDaEI0SyxNQUFNLEVBRU5ta0IsT0FBUSxPQUNSQyxPQUFRLGtCQUNSaHNCLE1BQU8sd0JBQ1BtVCxZQUFhLGtEQUdkOFksZUFBZ0IsU0FBVXByQixHQUN6QnBILEtBQUtvRSxJQUFJRSxTQUFVLGFBR3BCbXVCLGNBQWUsU0FBVXJyQixHQUN4QnBILEtBQUtvRSxJQUFJMEksWUFBYSxpQkFZekJoVCxFQUFRLGlCQUFpQixDQUN2QixrQkFDQSw0QkFDRSxTQUNGc3pCLEVBQ0EyTCxHQUdELE9BQU9oNUIsU0FBU0csS0FBSzBCLE9BQVE5QixFQUFFdVcsU0FBVSxDQVF4QythLFVBQVcsV0FDVixNQUFPLHdCQUEwQnB4QixLQUFLb0gsTUFBTVgsSUFBSyxpQkFBa0JBLElBQUssT0FHekUzRSxPQUFRaEMsRUFBRXVXLFNBQVUsQ0FDbkIyaUIseUJBQTBCLFFBQzFCQywwQkFBMkIsU0FDM0JDLDBCQUEyQixTQUMzQkMsNEJBQTZCLFdBQzdCQyx1Q0FBd0MsaUJBQ3RDaE0sRUFBU3RyQixRQVFaaEQsR0FBSSxXQUNILE1BQU8saUJBQW1Ca0IsS0FBS29ILE1BQU10SSxJQU90QytDLFFBQVMsS0FNVHNLLFNBQVU0YyxHQUFHNWMsU0FBVSwwQkFRdkJ4SSxXQUFZLFdBTVg3RCxFQUFFZSxLQUprQixDQUNuQixtQkFDQSxxQkFFc0IsU0FBVXFPLEdBQ2hDbFAsS0FBS3NMLFNBQVV0TCxLQUFLb0gsTUFBTzhILEVBQU9sUCxLQUFLK0YsU0FDckMvRixNQUVIQSxLQUFLc0wsU0FBVXRMLEtBQUtvSCxNQUFNWCxJQUFLLFNBQVcsU0FBVXpHLEtBQUsrRixRQUV6RC9GLEtBQUtzTCxTQUFVdEwsS0FBS29ILE1BQU0wUSxhQUFjLGlCQUFrQjlYLEtBQUtxNUIsMEJBRS9EcjVCLEtBQUswWSxHQUFJLHVCQUF3QjFZLEtBQUtzNUIscUJBQXNCdDVCLE1BRTVERCxTQUFTdWIsT0FBTzVDLEdBQUksc0JBQXVCMVksS0FBSzQ0QixXQUFZNTRCLE9BVTdEK0YsT0FBUSxXQWdCUCxHQWRBL0YsS0FBS29FLElBQUk4SCxLQUFNbE0sS0FBS21NLFNBQVVuTSxLQUFLb0gsUUFFOUJwSCxLQUFLb0gsTUFBTVgsSUFBSyxpQkFBaUJBLElBQUssYUFFMUN6RyxLQUFLdTVCLGVBQWlCLElBQUlSLEVBQWdCLENBQ3pDekYsR0FBSXR6QixLQUFLb0UsSUFBSTJGLEtBQU0sMEJBQ25CdEgsV0FBWXpDLEtBQUtvSCxNQUFNWCxJQUFLLGFBRTdCekcsS0FBS3U1QixlQUFleHpCLFNBQ3BCL0YsS0FBS3U1QixlQUFlN2dCLEdBQUksWUFBYTFZLEtBQUt1NUIsZUFBZS9HLGdCQUN6RHh5QixLQUFLdTVCLGVBQWU3Z0IsR0FBSSxXQUFZMVksS0FBS3U1QixlQUFlOUcsZ0JBSXBELFVBQVl6eUIsS0FBS29ILE1BQU1YLElBQUssaUJBQWtCQSxJQUFLLE1BQVMsQ0FFaEUsSUFBSXdTLEVBQU9qWixLQUNYUCxXQUFZLFdBQ1h3WixFQUFLdWdCLGlCQUFtQnZnQixFQUFLMUwsbUJBQW1CcVQsS0FBSzZZLGtCQUFtQixDQUN2RW5HLEdBQUlyYSxFQUFLN1UsSUFBSTJGLEtBQU0sd0JBQ25CdEgsV0FBWXdXLEVBQUs3UixNQUFNWCxJQUFLLGVBRTdCd1MsRUFBS3VnQixpQkFBaUJ6ekIsU0FDdEJrVCxFQUFLdWdCLGlCQUFpQjlnQixHQUFJLFlBQWFPLEVBQUt1Z0IsaUJBQWlCaEgsZ0JBQzdEdlosRUFBS3VnQixpQkFBaUI5Z0IsR0FBSSxXQUFZTyxFQUFLdWdCLGlCQUFpQi9HLGdCQUMxRCxHQXNCSixPQWxCS3p5QixLQUFLb0gsTUFBTVgsSUFBSyx3QkFDcEJ6RyxLQUFLNnBCLFlBQWEsa0JBQW9CN3BCLEtBQUtvSCxNQUFNWCxJQUFLLE9BR2xEekcsS0FBS29ILE1BQU1YLElBQUssMkJBQ3BCekcsS0FBSzZwQixZQUFhLDRCQUE4QjdwQixLQUFLb0gsTUFBTVgsSUFBSyxNQUFRLENBQ3ZFd2pCLGNBQWMsRUFDZEMsUUFBUyxDQUNSQyxTQUFVLDZFQUNWQyxTQUFVLEdBQ1ZDLE1BQU92cUIsRUFBRXlPLEtBQU12TyxLQUFLc3FCLGdCQUFpQnRxQixTQUt4Q0EsS0FBS3dtQixzQkFDTHhtQixLQUFLeW5CLGVBRUV6bkIsTUFTUnE1Qix5QkFBMEIsV0FFekJyNUIsS0FBS29FLElBQUkyRixLQUFNLHlCQUEwQnhGLEtBQU0sV0FBWXZFLEtBQUtvSCxNQUFNOFUsMEJBV3ZFM2EsTUFBTyxTQUFVMk4sR0FFaEJBLEVBQU1rVixrQkFDTmxWLEVBQU1pVixpQkFDTm5rQixLQUFLb0gsTUFBTTNFLFdBQVdxQixJQUFLOUQsS0FBSzA1QixvQkFBcUIxNUIsS0FBS29ILFNBVzNEc3lCLG9CQUFxQixTQUFVMWdCLEdBRzlCLElBQUl6WCxFQUFRekIsRUFBRXlCLE1BQU95WCxFQUFTN0QsWUF1QzlCLGNBcENPNVQsRUFBTXpDLEdBRWJ5QyxFQUFNc1osVUFBWTdCLEVBQVN2UyxJQUFLLE1BR2hDbEYsRUFBTWlaLGNBQWdCeEIsRUFBU3ZTLElBQUssaUJBQWtCQSxJQUFLLE1BRzNEbEYsRUFBTWlZLE1BQVExWixFQUFFeUIsTUFBT3lYLEVBQVN2UyxJQUFLLFNBQVUwTyxZQUcxQzZELEVBQVN2UyxJQUFLLGFBRWxCbEYsRUFBTTRYLFFBQVUsR0FFaEJILEVBQVN2UyxJQUFLLFdBQVk1RixLQUFNLFNBQVdvWCxHQUUxQyxJQUFJMGhCLEVBQWU3NUIsRUFBRXlCLE1BQU8wVyxFQUFPOUMsbUJBQzVCd2tCLEVBQWE3NkIsVUFDYjY2QixFQUFhcmhCLFlBRXBCL1csRUFBTTRYLFFBQVE3YixLQUFNcThCLE1BTWpCLFVBQVkzZ0IsRUFBU3ZTLElBQUssaUJBQWtCQSxJQUFLLFFBRXJEbEYsRUFBTWdaLFVBQVksR0FDbEJ2QixFQUFTdlMsSUFBSyxhQUFjNUYsS0FBTSxTQUFVb1csR0FDM0MxVixFQUFNZ1osVUFBVWpkLEtBQU0wQyxLQUFLMDVCLG9CQUFxQnppQixLQUM5Q2pYLE9BSUd1QixHQVVSOHhCLFNBQVUsV0FFVHJ6QixLQUFLb0gsTUFBTXlPLElBQUssYUFBYSxJQVc5QitqQixPQUFRLFNBQVUxcUIsR0FFakJBLEVBQU1pVixpQkFFRG5ULE9BQU9vRCxRQUFTb0osS0FBS0MsS0FBS0MsVUFBVyxxREFFekMxZCxLQUFLb0gsTUFBTTNFLFdBQVdvRCxPQUFRN0YsS0FBS29ILE9BQ25DckgsU0FBU3ViLE9BQU92VCxRQUFTLGdCQUFpQi9ILEtBQUtvSCxTQVlqRGdzQixPQUFRLFdBRVBwekIsS0FBS29ILE1BQU15TyxJQUFLLGFBQWEsSUFXOUJ5akIscUJBQXNCLFNBQVUvakIsR0FFMUIsUUFBVUEsR0FJZnZWLEtBQUtvSCxNQUFNWCxJQUFLLFdBQVltUyxlQUFnQjlZLEVBQUVzQixNQUFPcEIsS0FBS29ILE1BQU1YLElBQUssV0FBWXFTLGlCQVVsRnNDLGNBQWUsV0FFZHBiLEtBQUtvSCxNQUFNeU8sSUFBSyxTQUFtRSxFQUF6RDdWLEtBQUtvRSxJQUFJMkYsS0FBTSxpQ0FBa0N3TCxTQUkxRTZYLE1BU0p0ekIsRUFBUSxxQkFBcUIsQ0FBRSxrQkFBb0IsU0FBVXkrQixHQUU1RCxPQUFPeDRCLFNBQVM0QixlQUFlQyxPQUFRLENBRXRDd3ZCLFVBQVcsc0JBWVgxdUIsVUFBVzYxQixFQU1YbDFCLGtCQUFrQixFQU1sQlAsWUFBWSxFQU1aUSxVQUFVLEVBRVZDLGdCQUFpQixDQUNoQjRLLE1BQU0sRUFDTmtrQixZQUFhLHVCQUNiQyxPQUFRLE9BQ1JDLE9BQVEsbUJBQ1Joc0IsTUFBTyxpQkFDUG1ULFlBQWEsMkNBVWQ4WSxlQUFnQixTQUFVcHJCLEdBQ3pCLElBQUl5eUIsRUFBVyxVQUFZenlCLEVBQU1YLElBQUssaUJBQWtCQSxJQUFLLE1BQVMsMENBQTRDLHVCQUNsSDlNLEVBQUdrZ0MsR0FBV3YxQixTQUFVLGFBVXpCbXVCLGNBQWUsV0FDZDk0QixFQUFHLHdCQUF5Qm1ULFlBQWEsYUFXMUNnQyxTQUFXLFNBQVVJLEVBQU9DLEdBSzNCLEdBSEFELEVBQU1rVixrQkFHRGpWLEVBQUczSSxLQUFLK2UsU0FBVSxpQkFBb0I1ckIsRUFBR3VWLEVBQU1xQyxRQUFTdEcsUUFBUyxpQkFBa0J4TyxPQUN2RjBTLEVBQUdJLE9BQU9qTSxTQUFVLGNBRHJCLENBS0EsSUFDSWdNLEVBRGVILEVBQUdJLE9BQ3NCbEwsS0FBTSxRQUNsRCxHQUFNaUwsR0FBOEJBLEVBQXlCN00sV0FBN0QsQ0FFQSxJQUFJNE0sRUFBV3JQLEtBQUt1SSxrQkFBa0JnQyxXQUFXeE0sTUFBT29SLEVBQUczSSxNQUN2RGdKLEVBQWdCRixFQUF5QjdNLFdBQVdnRSxJQUFLMEksRUFBRzNJLEtBQUtqQyxLQUFNLG1CQUMzRStLLEVBQXlCN00sV0FBV29ELE9BQVEySixHQUM1Q3hQLEtBQUt5QyxXQUFXcUIsSUFBSzBMLEVBQWUsQ0FBRUMsR0FBS0osSUFDM0NHLEVBQWMvTSxXQUFhekMsS0FBS3lDLFdBQ2hDekMsS0FBS3NGLGlCQUFrQmtLLE1BV3hCaEIsV0FBYSxTQUFVVSxFQUFPQyxHQUU3QixJQUFJQyxFQUFtQnBQLEtBQUt5QyxXQUFXZ0UsSUFBSzBJLEVBQUczSSxLQUFLakMsS0FBTSxtQkFFMUQ0SyxFQUFHdUssWUFBWXBWLFNBQVUsVUFBWThLLEVBQWlCM0ksSUFBSyxpQkFBa0JBLElBQUssT0FFOUV6RyxLQUFLa0UsOEJBQ1JsRSxLQUFLNkgsTUFBTyxZQUFhLENBQUV1SCxpQkFBbUJBLElBQzFDcFAsS0FBSytILFFBQVMsWUFBYXFILElBWWpDUixVQUFZLFNBQVVNLEVBQU9DLEdBRTVCRCxFQUFNa1Ysa0JBRU4sSUFBSWhWLEVBQW1CcFAsS0FBS3lDLFdBQVdnRSxJQUFLMEksRUFBRzNJLEtBQUtqQyxLQUFNLG1CQUV6RDhLLEVBRHVCclAsS0FBS3VJLGtCQUNJZ0MsV0FBV3hNLE1BQU9vUixFQUFHM0ksT0FFcEMsR0FBYjZJLEdBQWtCRCxHQUN0QnBQLEtBQUt5QyxXQUFXb0QsT0FBUXVKLEdBR3pCcFAsS0FBS2dOLGdDQUNMaE4sS0FBS2dJLDBCQUVEaEksS0FBS2tFLDhCQUNSbEUsS0FBSzZILE1BQU8sV0FBWSxDQUFFdUgsaUJBQW1CQSxFQUFrQkMsU0FBV0EsSUFFMUVyUCxLQUFLK0gsUUFBUyxXQUFZcUgsRUFBa0JDLFFBY2hEdlYsRUFBUSxhQUFhLENBQ25CLGNBQ0EsZ0JBQ0EsbUJBQ0EscUJBQ0EscUJBQ0EsdUJBQ0Esb0JBQ0Esa0JBQ0EsaUJBQ0Esb0JBQ0UsU0FDRmdnQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBNUQsRUFDQW5KLEVBQ0FDLEVBQ0FHLEVBQ0FDLEdBR0QsT0FBT3p0QixTQUFTRyxLQUFLMEIsT0FBUTlCLEVBQUV1VyxTQUFVLENBTXhDa1QsTUFBTyxVQU1QbFgsTUFBTyxDQUNOeVgsU0FBVSxDQUNUdFMsTUFBTzhlLEVBQ1A1SixTQUFVLEtBQ1ZuRCxNQUFPLFdBRVI0USxLQUFNLENBQ0wzaUIsTUFBT3lpQixFQUNQdk4sU0FBVSxLQUNWbkQsTUFBTyxXQUVSNlEsS0FBTSxDQUNMNWlCLE1BQU8waUIsRUFDUHhOLFNBQVUsS0FDVm5ELE1BQU8sWUFJVCtKLEdBQUksb0JBTUp4eEIsT0FBUWhDLEVBQUV1VyxTQUFVLENBQ25CZ2tCLDRCQUE2QiwwQkFDN0JDLHVCQUF3QixlQUN4QkMsaUNBQWtDLGFBQ2xDQyxxQkFBc0IsZUFHcEJyTixFQUFXcnJCLE9BQVFzckIsRUFBU3RyQixPQUFRMHJCLEVBQVUxckIsUUFNakRELFFBQVMsTUFNVHNLLFNBQVU0YyxHQUFHNWMsU0FBVSxzQkFRdkJ4SSxXQUFZLFNBQVVVLEdBRXJCckUsS0FBS29pQixPQUFTL2QsRUFBSytkLE9BR2QsUUFBVXBpQixLQUFLb2lCLE9BQU8zYixJQUFLLGlCQUFzQjNHLEVBQUV3VixRQUFTdFYsS0FBS29pQixPQUFPM2IsSUFBSyxXQUVqRnpHLEtBQUtvSCxNQUFRcEgsS0FBS29pQixPQUFPM2IsSUFBSyxRQWlCOUJ6RyxLQUFLb0gsTUFBTXlQLFdBQVk3VyxLQUFLb2lCLFFBRTVCcGlCLEtBQUtzTCxTQUFVdEwsS0FBS29ILE1BQU8saUJBQWtCcEgsS0FBS3k2QixnQkFJbkR6NkIsS0FBSzBZLEdBQUksZ0JBQWlCMVksS0FBSzA2QixhQVVoQzMwQixPQUFRLFdBS1AsR0FIQS9GLEtBQUtvRSxJQUFJOEgsS0FBTWxNLEtBQUttTSxTQUFVbk0sS0FBS29ILFFBRzlCcEgsS0FBS29ILE1BQVEsQ0FHakJvVyxLQUFLdUksUUFBUXpYLE1BQU90TyxLQUFLb0UsS0FFekJwRSxLQUFLK3NCLGVBQWdCLFdBQVksQ0FDaEN1RyxHQUFJLDZCQUNKbHNCLE1BQU9wSCxLQUFLb0gsUUFHYnBILEtBQUtpbUIsbUJBQ0xqbUIsS0FBS3luQixlQUVMem5CLEtBQUsrc0IsZUFBZ0IsT0FBUSxDQUM1QnRxQixXQUFZdU8sT0FBT3FHLGFBQWFrRCxZQUdqQyxJQUFJb2dCLEVBQWEsS0FDaEIzZCxFQUFRLEtBRVRoZCxLQUFLb3NCLFlBQWEsUUFBU00sU0FBUy9uQixZQUFZOUQsS0FBTSxTQUFVK0UsR0FFL0RBLEVBQUtnYixLQUFPNWdCLEtBQUtvSCxNQUVqQjRWLEVBQVFwWCxFQUFLd0IsTUFBTVgsSUFBSyxTQUFVakwsS0FFN0JtL0IsSUFBZTNkLElBQ25CMmQsRUFBYTNkLEVBQ2JwWCxFQUFLeEIsSUFBSXFHLE9BQVEsNkNBQStDdVMsRUFBUSxnQkFHdkVoZCxNQUVIQSxLQUFLb0gsTUFBTStYLGVBQWdCcmYsRUFBRXlPLEtBQU0sU0FBVXFnQixHQUU1QyxHQUFLQSxFQUVKLE9BREFnTSxNQUFPcGQsS0FBS0MsS0FBS0MsVUFBVyxpR0FDckIxZCxLQUdSd2QsS0FBS3VJLFFBQVFwWCxLQUFNM08sS0FBS29FLEtBQ3hCcEUsS0FBSytzQixlQUFnQixPQUFRLENBQzVCdUcsR0FBSSx1QkFDSjd3QixXQUFZekMsS0FBS29ILE1BQU1YLElBQUssZUFFN0IsSUFBSTJ6QixFQUFPcDZCLEtBQUtvc0IsWUFBYSxRQUFTTSxTQUN0QzBOLEVBQUt4WixLQUFPNWdCLEtBQ1pvNkIsRUFBSzMzQixXQUFXaVcsR0FBSSxNQUFPLFdBQzFCMGhCLEVBQUszM0IsV0FBV3NGLFFBQVMsWUFDdkIvSCxNQUNIbzZCLEVBQUsxaEIsR0FBSSxZQUFhMGhCLEVBQUs1SCxnQkFDM0I0SCxFQUFLMWhCLEdBQUksV0FBWTBoQixFQUFLM0gsZ0JBRXhCenlCLE9BRUhBLEtBQUtvSCxNQUFNc1IsR0FBSSxxQkFBc0IsV0FDcEMsSUFBSW1pQixFQUFhNzZCLEtBQUtvRSxJQUFJMkYsS0FBTSx3QkFDaEM4d0IsRUFBV0MsUUFBUyxDQUFFQyxVQUFXRixFQUFXeC9CLEtBQU0saUJBQW9CLE1BQ3BFMkUsTUFJSixPQUFPQSxNQVlSeTZCLGNBQWUsU0FBVTdaLEVBQU1qSCxHQUU5QjNaLEtBQUtvRSxJQUFJMkYsS0FBTSwyQkFBNEIwYixLQUFNOUwsSUFXbERxaEIsWUFBYSxTQUFVOXJCLEdBRXRCLElBQUkrckIsRUFBYSxXQUFhdGhDLEVBQUd1VixFQUFNcUMsUUFBU2hOLEtBQU0sZUFFdER2RSxLQUFLb0gsTUFBTVgsSUFBSyxhQUFjNUYsS0FBTSxTQUFVbVksR0FDN0NBLEVBQVNuRCxJQUFLLFlBQWFvbEIsTUFXN0JDLGFBQWMsV0FFYixJQUFJdGEsRUFBTzVnQixLQUFLb2lCLE9BQU8zYixJQUFLLFFBQ3ZCM0csRUFBRXdWLFFBQVNzTCxHQUNmQSxFQUFPNWdCLEtBQUtvaUIsT0FBT0UsV0FFbkJ0aUIsS0FBS29pQixPQUFPdk0sSUFBSyxlQUFnQixPQUdsQzdWLEtBQUtvSCxNQUFRd1osRUFDYjVnQixLQUFLK0YsVUFLTm8xQixrQkFBbUIsU0FBVWpzQixHQUU1QmxQLEtBQUtvN0Isb0JBQW9CMXdCLE9BRXpCLElBQUlrVyxFQUFPMVIsRUFBTTdLLEtBRVosVUFBWTZLLEVBQU1vUSxlQUVmc0IsRUFBSzloQixHQUVaZ0IsRUFBRWUsS0FBTStmLEVBQUtyRyxVQUFXLFNBQVV2QixVQUUxQkEsRUFBUzZCLGlCQUNUN0IsRUFBU2xhLEdBRVhrYSxFQUFTRyxTQUViclosRUFBRWUsS0FBTW1ZLEVBQVNHLFFBQVMsU0FBVWxCLFVBRTVCQSxFQUFPSyxtQkFDUEwsRUFBT25aLFFBVWpCOGhCLEVBQUtnQixZQUFhLFNBSVpoQixFQUFLMUMsVUFFWmxlLEtBQUtvaUIsT0FBT0UsU0FBVTFCLEdBQ3RCNWdCLEtBQUtvSCxNQUFRcEgsS0FBS29pQixPQUFPM2IsSUFBSyxRQUM5QnpHLEtBQUsrRixVQVdOczFCLHdCQUF5QixTQUFVbnNCLEdBRWxDQSxFQUFNaVYsaUJBRU5ua0IsS0FBS283QixvQkFBc0IsSUFBSXJCLEVBQVMsQ0FDdkN6RyxHQUFJLHNCQUNKbDJCLEtBQU0sQ0FDTHU1QixVQUFVLEVBQ1ZELFdBQVcsRUFDWEksVUFBVywrQkFDWHdFLGFBQWEsRUFDYi9FLFVBQVcsT0FDWDVPLE1BQU8sSUFDUDdNLE1BQU8wQyxLQUFLQyxLQUFLQyxVQUFXLHFCQUM1QmpELFFBQVMsSUFBSXVmLEVBQVksQ0FDeEIvQyxVQUFXLFlBQ1hDLGtCQUFtQjFaLEtBQUtDLEtBQUtDLFVBQVcsb0NBQ3JDM1gsU0FBUzNCLElBQ2J5eUIsT0FBUSxXQUNQOTJCLFNBQVN1YixPQUFPa1IsSUFBSywwQkFLeEJ4c0IsS0FBS283QixvQkFBb0JuUSxPQUN6QmxyQixTQUFTdWIsT0FBT2lnQixLQUFNLHFCQUFzQnY3QixLQUFLbTdCLGtCQUFtQm43QixPQTBCckUwNkIsV0FBWSxTQUFVOVosR0FFckI1Z0IsS0FBS29pQixPQUFPdk0sSUFBSyxlQUFnQixNQUNqQzdWLEtBQUtvaUIsT0FBT3ZNLElBQUssT0FBUSxXQUVsQjdWLEtBQUtvSCxNQUVacEgsS0FBSytGLFVBV055MUIsV0FBWSxXQUdYLElBQUlDLEVBQU0sSUFBSTFCLEVBQVMsQ0FDdEJ6RyxHQUFJLDJCQUNKbDJCLEtBQU0sQ0FDTHU1QixVQUFVLEVBQ1ZELFdBQVcsRUFDWEksVUFBVyx3QkFDWHdFLGFBQWEsRUFDYi9FLFVBQVcsV0FDWDVPLE1BQU8sc0JBQ1A3TSxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyxrQkFDNUIyTCxJQUFLLHNCQUtQb1MsRUFBSXhRLE9BR0pqckIsS0FBS29ILE1BQU1zUixHQUFJLHFCQUFzQixXQUNwQytpQixFQUFJL3dCLFVBS04rdUIsa0JBQW1CLFNBQVU3MUIsR0FDNUIsT0FBTyxJQUFJczJCLEVBQWN0MkIsS0FHeEJ1cEIsRUFBWUMsRUFBVUcsRUFBU0MsRUFBVzhJLE1BUzlDeDhCLEVBQVEsbUJBQW1CLENBQ3pCLGdCQUNBLG1CQUNBLG9CQUNBLGtCQUNBLG1CQUNBLGlCQUNBLHdCQUNFLFNBQ0ZpZ0MsRUFDQUMsRUFDQTdNLEVBQ0FDLEVBQ0FJLEVBQ0FELEVBQ0ErSSxHQUdELE9BQU92MkIsU0FBU0csS0FBSzBCLE9BQVE5QixFQUFFdVcsU0FBVSxDQU14Q2tULE1BQU8sVUFNUGxYLE1BQU8sQ0FDTnlYLFNBQVUsQ0FDVHRTLE1BQU84ZSxFQUNQNUosU0FBVSxLQUNWbkQsTUFBTyxZQUlUK0osR0FBSSwwQkFRSnh4QixPQUFRLFdBQ1AsSUFBSTQ1QixFQUFlMTdCLEtBQUsyN0IscUJBQXVCM3FCLE9BQU9xRyxhQUFhNkksWUFBWTBiLGtCQUFvQixHQUNuRyxPQUFPOTdCLEVBQUV1VyxTQUFVLENBQ2xCd2xCLGtDQUFtQyxnQ0FDbkNDLDZCQUE4QixzQkFDNUIzTyxFQUFXcnJCLE9BQVFzckIsRUFBU3RyQixPQUFRMHJCLEVBQVUxckIsT0FBUTQ1QixJQU8xRDc1QixRQUFTLE1BTVRzSyxTQUFVNGMsR0FBRzVjLFNBQVUsNEJBUXZCeEksV0FBWSxTQUFVVSxHQUVyQnJFLEtBQUtvaUIsT0FBUy9kLEVBQUsrZCxPQUdkLFFBQVVwaUIsS0FBS29pQixPQUFPM2IsSUFBSyx1QkFBNEIzRyxFQUFFd1YsUUFBU3RWLEtBQUtvaUIsT0FBTzNiLElBQUssaUJBRXZGekcsS0FBS29ILE1BQVFwSCxLQUFLb2lCLE9BQU8zYixJQUFLLGNBaUI5QnpHLEtBQUtvSCxNQUFNeVAsV0FBWTdXLEtBQUtvaUIsU0FJN0JwaUIsS0FBSzBZLEdBQUksZ0JBQWlCMVksS0FBSzA2QixhQVVoQzMwQixPQUFRLFdBc0JQLE9BcEJBL0YsS0FBS29FLElBQUk4SCxLQUFNbE0sS0FBS21NLFNBQVVuTSxLQUFLb0gsUUFFOUJwSCxLQUFLb0gsT0FBU3BILEtBQUsyN0IsdUJBRXZCMzdCLEtBQUtxRixjQUFlckYsS0FBS29ILE1BQU8seUJBQTBCcEgsS0FBSytGLFFBRS9EL0YsS0FBSytzQixlQUFnQixXQUFZLENBQ2hDdUcsR0FBSSxtQ0FDSmxzQixNQUFPcEgsS0FBS29ILFFBSWJwSCxLQUFLeW5CLGVBRUx6VyxPQUFPcUcsYUFBYTZJLFlBQVlpVixjQUFlbjFCLE1BRS9DQSxLQUFLc0wsU0FBVXRMLEtBQUtvSCxNQUFPLHlCQUEwQnBILEtBQUsrRixTQUlwRC9GLE1BVVIrN0IsbUJBQW9CLFdBRWQvN0IsS0FBSzI3QixzQkFFVDM3QixLQUFLb0gsTUFBUTRKLE9BQU9xRyxhQUFhNkksWUFBWThiLGVBQWdCLENBRTVEbGhCLE1BQU8wQyxLQUFLQyxLQUFLN2dCLFFBQVMsa0JBQW1CLENBQzVDMmxCLE9BQVF2aUIsS0FBS29pQixPQUFPM2IsSUFBSyxXQUUxQnlYLFVBQVdsZSxLQUFLb2lCLE9BQU8zYixJQUFLLFFBRzdCekcsS0FBS29pQixPQUFPdk0sSUFBSyxxQkFBc0IsT0FDdkM3VixLQUFLb2lCLE9BQU92TSxJQUFLLGFBQWM3VixLQUFLb0gsT0FFcENwSCxLQUFLK0YsVUFJTC9GLEtBQUtpOEIsZ0JBQWlCLHlCQWN4QkMsd0JBQXlCLFNBQVVodEIsR0FFbENsUCxLQUFLbzdCLG9CQUFvQjF3QixPQUV6QixJQUFJK1csRUFBYXZTLEVBQU03SyxLQUVsQixVQUFZNkssRUFBTW9RLGNBRWZtQyxFQUFXM2lCLEdBSWxCMmlCLEVBQVdHLFlBQWEsRUFJekJILEVBQVd2RCxVQUFZbGUsS0FBS29pQixPQUFPM2IsSUFBSyxNQUV4Q2diLEVBQWF6USxPQUFPcUcsYUFBYUMsVUFBVUMsVUFBVyxhQUFja0ssR0FFcEV6aEIsS0FBS29pQixPQUFPdk0sSUFBSyxxQkFBc0IsT0FDdkM3VixLQUFLb2lCLE9BQU92TSxJQUFLLGFBQWM0TCxHQUMvQnpoQixLQUFLb0gsTUFBUXFhLEVBRWJ6aEIsS0FBSytGLFVBV05vMkIsOEJBQStCLFNBQVVqdEIsR0FFeENBLEVBQU1pVixpQkFFRG5rQixLQUFLMjdCLHNCQUVUMzdCLEtBQUtvN0Isb0JBQXNCLElBQUlyQixFQUFTLENBQ3ZDekcsR0FBSSw0QkFDSmwyQixLQUFNLENBQ0x1NUIsVUFBVSxFQUNWRCxXQUFXLEVBQ1hJLFVBQVcsK0JBQ1h3RSxhQUFhLEVBQ2IvRSxVQUFXLE9BQ1g1TyxNQUFPLElBQ1A3TSxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVywyQkFDNUJqRCxRQUFTLElBQUl1ZixFQUFZLENBQ3hCL0MsVUFBVyxrQkFDWEMsa0JBQW1CMVosS0FBS0MsS0FBS0MsVUFBVyx3Q0FDckMzWCxTQUFTM0IsSUFDYnl5QixPQUFRLFdBQ1A5MkIsU0FBU3ViLE9BQU9rUixJQUFLLGdDQUt4QnhzQixLQUFLbzdCLG9CQUFvQm5RLE9BQ3pCbHJCLFNBQVN1YixPQUFPaWdCLEtBQU0sMkJBQTRCdjdCLEtBQUtrOEIsd0JBQXlCbDhCLE9BSWhGQSxLQUFLaThCLGdCQUFpQiw4QkFheEJOLG1CQUFvQixXQUVuQixPQUFTM3FCLE9BQU9xRyxhQUF5QixhQVcxQ3FqQixXQUFZLFNBQVVqWixHQUVyQnpoQixLQUFLb2lCLE9BQU92TSxJQUFLLHFCQUFzQixNQUN2QzdWLEtBQUtvaUIsT0FBT3ZNLElBQUssYUFBYyxXQUV4QjdWLEtBQUtvSCxNQUVacEgsS0FBSytGLFVBV05rMkIsZ0JBQWlCLFNBQVUzSSxHQUUxQixJQUFJOEksRUFBSzVlLEtBQUtDLEtBQUtDLFVBQVcsbUNBRTdCMmUsRUFBTTdlLEtBQUtDLEtBQUtDLFVBQVcsd0JBRzVCMWQsS0FBS3M4QixXQUFhLElBQUl2QyxFQUFTLENBQzlCekcsR0FBSUEsRUFDSmwyQixLQUFNLENBQ0x1NUIsVUFBVSxFQUNWRCxXQUFXLEVBQ1hJLFVBQVcsK0JBQ1h3RSxhQUFhLEVBRWIzVCxNQUFPLElBQ1A3TSxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyxnQ0FDNUJqRCxRQUFTLE9BQVMyaEIsRUFBSyxtbEJBQW1HQyxFQUFNLGNBSWxJcjhCLEtBQUtzOEIsV0FBV3JSLFNBSWZrQyxFQUFZQyxFQUFVSSxFQUFXRCxFQUFTK0ksTUFTOUN4OEIsRUFBUSxlQUFlLENBQ3JCLHFCQUNBLGFBQ0EsbUJBQ0Esa0JBQ0UsU0FDRnlpQyxFQUNBOWIsRUFDQStiLEVBQ0FqUCxHQUdELE9BQU94dEIsU0FBU0csS0FBSzBCLE9BQVE5QixFQUFFdVcsU0FBVSxDQU14Q2tULE1BQU8sU0FNUGxYLE1BQU8sQ0FDTitQLE9BQVEsQ0FDUDVLLE1BQU8ra0IsRUFDUDdQLFNBQVUsS0FDVm5ELE1BQU8sVUFFUjlILFdBQVksQ0FDWGpLLE1BQU9nbEIsRUFDUDlQLFNBQVUsS0FDVm5ELE1BQU8sY0FFUjNJLEtBQU0sQ0FDTHBKLE1BQU9pSixFQUNQaU0sU0FBVSxLQUNWbkQsTUFBTyxTQVFUK0osR0FBSSxlQUVKeHhCLE9BQVEsQ0FDUDI2QixzREFBdUQsZUFDdkRDLDREQUE2RCxjQU85RDc2QixRQUFTLE1BTVRzSyxTQUFVNGMsR0FBRzVjLFNBQVUsd0JBUXZCeEksV0FBWSxTQUFVVSxHQUVyQnJFLEtBQUsyOEIsWUFBY3Q0QixFQUFLczRCLFlBQ25CdDRCLEVBQUsyaUIsTUFDVGhuQixLQUFLdXBCLE1BQVFsbEIsRUFBSzJpQixNQVdwQmpoQixPQUFRLFNBQVUrbUIsR0FVakIsT0FSQUEsRUFBWUEsR0FBYSxHQUV6QjlzQixLQUFLb0UsSUFBSThILEtBQU1sTSxLQUFLbU0sU0FBVW5NLE9BRTlCQSxLQUFLNnNCLGdCQUFpQi9zQixFQUFFOEIsT0FBUWtyQixFQUFXLENBQzFDMUssT0FBUXBpQixLQUFLb0gsU0FHUHBILE1BWVI0OEIsYUFBYyxTQUFVMXRCLEdBRXZCQSxFQUFNaVYsaUJBQ05wa0IsU0FBU3ViLE9BQU92VCxRQUFTLHlCQVcxQjgwQixXQUFZLFNBQVUzdEIsR0FFckJBLEVBQU1pVixpQkFFTixJQUFJcUcsRUFBTzd3QixFQUFHdVYsRUFBTXFDLFFBQ25CM0wsRUFBTzRrQixFQUFLam1CLEtBQU0sYUFDWHZFLEtBQUtvRSxJQUFJMkYsS0FBTXlnQixFQUFLam1CLEtBQU0sU0FFbEN2RSxLQUFLZ3RCLFVBQVdwbkIsR0FBT0csV0FNdEJ3bkIsTUFTSnp6QixFQUFRLGlCQUFpQixDQUFFLGlCQUFrQixnQkFBaUIsZ0JBQWlCLGVBQWdCLGdCQUFpQixvQkFBc0IsU0FBVWtxQixFQUFTNlAsRUFBYS9WLEVBQVFzVSxFQUFZMkgsRUFBUytDLEdBRWxNLE9BQU8vOEIsU0FBU0csS0FBSzBCLE9BQVEsQ0FNNUIweEIsR0FBSSxpQkFFSnh4QixPQUFRLENBQ1BpN0IsMEJBQTJCLGtCQUMzQkMseUJBQTBCLGlCQUMxQkMsOEJBQStCLHVCQU9oQ3A3QixRQUFTLE1BTVRzSyxTQUFVNGMsR0FBRzVjLFNBQVUsMEJBUXZCeEksV0FBWSxTQUFVVSxHQUdyQnJFLEtBQUsyOEIsWUFBY3Q0QixFQUFLczRCLFlBR3hCMzhCLEtBQUtzTCxTQUFVdEwsS0FBSzI4QixZQUFZTyxXQUFXOTFCLE1BQU1YLElBQUssWUFBYyxNQUFPekcsS0FBSzI0Qix1QkFDaEYzNEIsS0FBS3NMLFNBQVV0TCxLQUFLMjhCLFlBQVlPLFdBQVc5MUIsTUFBTVgsSUFBSyxZQUFjLFNBQVV6RyxLQUFLMjRCLHdCQVVwRjV5QixPQUFRLFdBTVAsT0FKQS9GLEtBQUtvRSxJQUFJOEgsS0FBTWxNLEtBQUttTSxZQUNwQm5NLEtBQUttOUIsWUFDTG45QixLQUFLMjRCLHdCQUVFMzRCLE1BR1JtOUIsVUFBVyxXQUVWeGpDLEVBQUcscUJBQXNCd2pDLFVBQVcsQ0FDbkNDLFNBQVUsaUJBQ1ZDLFFBQVEsRUFDUkMsa0JBQW1CLGlCQUNuQnpSLE9BQVEsV0FDUCxPQUFPLElBQUlnSSxFQUFhLENBQUV6c0IsTUFBTyxJQUFJNGMsSUFBY2plLFNBQVMzQixLQUU3RGtLLE1BQU8sV0FDTjNVLEVBQUcsa0JBQW1CMkssU0FBVSxhQUVqQ3FLLEtBQU0sV0FDTGhWLEVBQUcsa0JBQW1CbVQsWUFBYSxlQUlyQ25ULEVBQUcsb0JBQXFCd2pDLFVBQVcsQ0FFbENDLFNBQVUsaUJBQ1ZDLFFBQVEsRUFDUkMsa0JBQW1CLGdCQUNuQnpSLE9BQVEsV0FDUCxPQUFPLElBQUl1RyxFQUFZLENBQUVockIsTUFBTyxJQUFJMFcsSUFBYS9YLFNBQVMzQixLQUUzRGtLLE1BQU8sV0FFTjNVLEVBQUcsaUJBQWtCMkssU0FBVSxhQUdoQ3FLLEtBQU0sV0FDTGhWLEVBQUcsaUJBQWtCbVQsWUFBYSxZQUNsQ25ULEVBQUcsa0JBQW1CbVQsWUFBYSxzQkFNdEN5d0IsZ0JBQWlCLFNBQVVydUIsR0FFMUJBLEVBQU1pVixpQkFDTnBrQixTQUFTdWIsT0FBT3ZULFFBQVMsb0JBRzFCeTFCLGVBQWdCLFNBQVV0dUIsR0FDekJBLEVBQU1pVixpQkFDTnBrQixTQUFTdWIsT0FBT3ZULFFBQVMsbUJBVTFCMmIsb0JBQXFCLFNBQVV4VSxHQUU5QkEsRUFBTWlWLGlCQUVOLElBQUlzWCxFQUFNLElBQUkxQixFQUFTLENBQ3RCekcsR0FBSSx3QkFDSmwyQixLQUFNLENBQ0x1NUIsVUFBVSxFQUNWRCxXQUFXLEVBQ1hJLFVBQVcsK0JBQ1h3RSxhQUFhLEVBQ2IvRSxVQUFXLE9BQ1g1TyxNQUFPLElBQ1A3TSxNQUFPMEMsS0FBS0MsS0FBS0MsVUFBVyx1QkFDNUJqRCxRQUFTLElBQUlxaUIsRUFBYyxDQUMxQjdGLFVBQVcsU0FDWEMsa0JBQW1CMVosS0FBS0MsS0FBS0MsVUFBVyxvQ0FDckMzWCxTQUFTM0IsT0FJZnEzQixFQUFJeFEsT0FDSmxyQixTQUFTdWIsT0FBTzVDLEdBQUksdUJBQXdCLFdBQzNDK2lCLEVBQUkvd0IsVUFXTml1QixzQkFBdUIsV0FFdEIsSUFBSThFLEVBQU85akMsRUFBRywyQ0FFUHFHLEtBQUsyOEIsWUFBWU8sV0FBVzkxQixNQUFNWCxJQUFLLFlBQWFoSyxPQUcxRGdoQyxFQUFLaDRCLFdBQVksWUFGakJnNEIsRUFBS2w1QixLQUFNLFdBQVksaUJBZ0IzQnpLLEVBQVEsa0JBQWtCLEdBQUksV0FFN0IsT0FBT2lHLFNBQVNHLEtBQUswQixPQUFRLENBTTVCMHhCLEdBQUksa0JBRUp4eEIsT0FBUSxDQUNQNDdCLDJCQUE0QixlQUM1QkMseUJBQTBCLGNBTzNCOTdCLFFBQVMsTUFNVHNLLFNBQVU0YyxHQUFHNWMsU0FBVSwyQkFRdkJ4SSxXQUFZLGFBWVpvQyxPQUFRLFdBRVAsT0FEQS9GLEtBQUtvRSxJQUFJOEgsS0FBTWxNLEtBQUttTSxZQUNibk0sTUFTUjQ5QixhQUFjLFNBQVUxdUIsR0FDdkJBLEVBQU1pVixpQkFDTnBrQixTQUFTdWIsT0FBT3ZULFFBQVMsaUJBUzFCODFCLFdBQVksU0FBVTN1QixHQUNyQkEsRUFBTWlWLGlCQUNOcGtCLFNBQVN1YixPQUFPdlQsUUFBUyxtQkFZNUJqTyxFQUFRLGdCQUFnQixDQUN0QixlQUNBLGlCQUNBLGtCQUNBLGtCQUNFLFNBQ0Zna0MsRUFDQUMsRUFDQS9mLEVBQ0F1UCxHQUdELE9BQU94dEIsU0FBU0csS0FBSzBCLE9BQVE5QixFQUFFdVcsU0FBVSxDQU14Q2tULE1BQU8sVUFNUGxYLE1BQU8sQ0FDTjJyQixTQUFVLENBQ1R4bUIsTUFBT3VtQixFQUNQclIsU0FBVSxLQUNWbkQsTUFBTyxXQUVSMFUsVUFBVyxDQUNWem1CLE1BQU93RyxFQUNQME8sU0FBVSxLQUNWbkQsTUFBTyxXQUVSUSxPQUFRLENBQ1B2UyxNQUFPc21CLEVBQ1BwUixTQUFVLEtBQ1ZuRCxNQUFPLFdBUVQrSixHQUFJLHdCQU1KeHhCLE9BQVEsQ0FDUG84QiwwQkFBMkIsV0FDM0JDLDBCQUEyQixXQUMzQkMsNEJBQTZCLGdCQU85QnY4QixRQUFTLFFBTVRzSyxTQUFVNGMsR0FBRzVjLFNBQVUseUJBUXZCeEksV0FBWSxTQUFVVSxHQUdyQnJFLEtBQUtrOUIsV0FBYTc0QixFQUFLNjRCLFdBRXZCbDlCLEtBQUsrRixTQUVMaEcsU0FBU3ViLE9BQU81QyxHQUFJLHNCQUF1QjFZLEtBQUtxK0IsYUFBY3IrQixNQUU5REQsU0FBU3ViLE9BQU81QyxHQUFJLGlCQUFrQjFZLEtBQUtzK0IsZUFBZ0J0K0IsTUFDM0RELFNBQVN1YixPQUFPNUMsR0FBSSxpQkFBa0IxWSxLQUFLdStCLGVBQWdCditCLE1BRTNERCxTQUFTdWIsT0FBTzVDLEdBQUksa0JBQW1CMVksS0FBS3crQixpQkFBa0J4K0IsTUFDOURELFNBQVN1YixPQUFPNUMsR0FBSSx1QkFBd0IxWSxLQUFLeStCLGdCQUFpQnorQixNQUVsRUEsS0FBSzArQixZQUFjL2tDLEVBQUcsc0JBVXZCb00sT0FBUSxTQUFVK21CLEdBRWpCQSxFQUFZQSxHQUFhLEdBRXpCOXNCLEtBQUtvRSxJQUFJOEgsS0FBTWxNLEtBQUttTSxZQUVwQm5NLEtBQUs2c0IsZ0JBQWlCL3NCLEVBQUU4QixPQUFRa3JCLEVBQVcsQ0FDMUM2UCxZQUFhMzhCLFFBR2QsSUFBSW9FLEVBQU16SyxFQUFHLGdDQVNiLE1BUkssWUFBY3FHLEtBQUt1cEIsTUFDdkJubEIsRUFBSTBJLFlBQWEsaUJBRWpCMUksRUFBSUUsU0FBVSxpQkFHZnRFLEtBQUswK0IsWUFBYzErQixLQUFLb0UsSUFBSTJGLEtBQU0scUJBRTNCL0osTUFVUjIrQixVQUFXLFNBQVVDLEdBRXBCNStCLEtBQUtvRSxJQUFJMkYsS0FBTSxzQkFBdUI4MEIsUUFBU0QsSUFVaERFLGFBQWMsV0FFYjkrQixLQUFLb0UsSUFBSTJGLEtBQU0sMENBQTJDbEUsVUFZM0R3NEIsYUFBYyxTQUFVdG9CLEdBR2xCQSxFQUFLc1ksU0FJTHRZLEVBQUtrWixxQkFFVGp2QixLQUFLMCtCLFlBQVluNkIsS0FBTSxjQUFlLFdBQ3RDdkUsS0FBSzArQixZQUFZajVCLFdBQVksY0FJN0J6RixLQUFLMCtCLFlBQVluNkIsS0FBTSxjQUFlLFNBQ3RDdkUsS0FBSzArQixZQUFZbjZCLEtBQU0sV0FBWSxlQVlyQ3c2QixTQUFVLFdBRVQvdEIsT0FBTzRhLFNBQVNGLEtBQU8xYSxPQUFPcUcsYUFBYW9JLFlBQVlsRCxzQkFXeEQraEIsZUFBZ0IsU0FBVXZvQixHQUVwQkEsRUFBS3NZLFNBQ1Q3USxLQUFLdUksUUFBUXpYLE1BQU90TyxLQUFLMCtCLFlBQVkzMEIsS0FBTSxLQUFPLFNBQ2xEL0osS0FBSzArQixZQUFZbjZCLEtBQU0sQ0FDdEJ5NkIsY0FBZSxTQUNmQyxTQUFVLGVBY2JWLGVBQWdCLFNBQVV4b0IsRUFBTTFSLEdBRS9CLElBQU8wUixFQUFLc1ksT0FBUyxDQUVwQixJQUFJbFEsRUFBUyxRQUliLEdBRkFuZSxLQUFLOCtCLGVBRUEsVUFBWXo2QixFQUFLOFosT0FBUyxDQUU5QkEsRUFBUyxRQUVULElBQUlrRyxFQUFNaGdCLEVBQUt3cUIsUUFDZCtQLEVBQU9qbEMsRUFBRyxxQ0FFTixpQkFBb0IwcUIsRUFDeEJ2a0IsRUFBRWUsS0FBTXdqQixFQUFLLFNBQVU2YSxHQUN0Qk4sRUFBS3oxQixPQUFRLE9BQVMrMUIsRUFBTSxXQUc3Qk4sRUFBT0EsRUFBS3oxQixPQUFRLE9BQVNrYixFQUFNLFNBR3BDcmtCLEtBQUsyK0IsVUFBV0MsR0FJakI1K0IsS0FBSzArQixZQUFZMzBCLEtBQU0sa0JBQW1CbEUsU0FDMUM3RixLQUFLMCtCLFlBQVluNkIsS0FBTSxDQUN0Qnk2QixjQUFlN2dCLEVBQ2Y4Z0IsU0FBVSxlQWFiRSxpQkFBa0IsV0FFakIsTUFBUyxXQUFhbi9CLEtBQUt1cEIsT0FVNUJrVixnQkFBaUIsV0FFaEJ6K0IsS0FBS2d0QixVQUFXLFdBQVlqbkIsVUFXN0J5NEIsaUJBQWtCLFNBQVVZLEVBQWNwWSxHQUVwQyxXQUFhaG5CLEtBQUt1cEIsTUFDdEJ2cEIsS0FBS2d0QixVQUFXLFVBRWhCaHRCLEtBQUt5c0IsZUFBZ0IsVUFHdEJ6c0IsS0FBSytGLE9BQVEsQ0FDWnFCLE1BQU9nNEIsRUFDUHBZLElBQUtBLEtBV1BzSixTQUFVLFdBRVR0ZixPQUFPcUcsYUFBYXRCLEtBQUt1YSxhQUl4Qi9DLE1BU0oxekIsRUFBUyxDQUNSLGlDQUNBLDBCQUNBLHdCQUNBLG9CQUNBLHNCQUNBLG1CQUNBLGdCQUNBLGVBQ0EsaUJBQ0UsU0FDRndsQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBaFMsRUFDQXdQLEVBQ0FQLEdBZ0JBLFNBQVNnRCxFQUFlQyxFQUFVQyxHQUNqQyxPQUFXLy9CLEVBQUVjLFFBQVNpL0IsS0FBYSxJQUFNQSxFQUFPN2hDLFFBQVM0aEMsSUFBZ0JBLEdBQVlDLEVBZHRGN3VCLE9BQU9xRyxhQUFhMEksTUFBUSxJQUFJeWYsRUFBT3h1QixPQUFPcUcsYUFBYTBJLE9BQzNEL08sT0FBT3FHLGFBQWFDLFVBQVksSUFBSWlvQixFQUNwQ3Z1QixPQUFPcUcsYUFBYXVGLFFBQVUsSUFBSTZpQixFQUFTenVCLE9BQU9xRyxhQUFhdUYsU0FvQi9EOWMsRUFBRWdnQyxNQUFPLENBWVJDLFFBQVMsU0FBVUgsRUFBVUMsR0FDNUIsT0FBS0YsRUFBZUMsRUFBVUMsR0FDdEIscUJBRUQsSUFVUi9KLFVBQVcsU0FBVTE2QixHQUVwQixJQUFJbUcsRUFBUXpCLEVBQUV5QixNQUFPbkcsR0FRckIsT0FOQTBFLEVBQUVlLEtBQU1VLEVBQU8sU0FBVWdVLEVBQUtwQyxJQUN0QnJULEVBQUV3QixXQUFZaVUsSUFBU3pWLEVBQUVxQixTQUFVb1UsS0FDekNoVSxFQUFPNFIsR0FBUXJULEVBQUVnMkIsVUFBV3ZnQixNQUl2QmhVLEdBY1JxaUIsU0FBVSxTQUFVZ2MsRUFBVUMsR0FDN0IsT0FBS0YsRUFBZUMsRUFBVUMsR0FDdEIsdUJBRUQsSUFXUnJhLGdCQUFpQixTQUFVL0ssRUFBU3VsQixHQUU1QkEsSUFDTkEsRUFBZSxDQUFFLElBQUssSUFBSyxJQUFLLFNBQVUsT0FHM0MsSUFBSTlILEVBQVF2K0IsRUFBRyxRQUFVOGdCLEVBQVUsVUFRbkMsT0FOQXlkLEVBQU1udUIsS0FBTSxLQUFNazJCLElBQUtELEVBQWFoakMsS0FBTSxNQUFRNkQsS0FBTSxXQUV2RGxILEVBQUdxRyxNQUFPa2dDLFlBQWFsZ0MsS0FBS21nQyxhQUl0QmpJLEVBQU1oc0IsVUFNZm5NLFNBQVN1YixPQUFTeGIsRUFBRThCLE9BQVEsR0FBSTdCLFNBQVNxZ0MsUUFFekN6bUMsRUFBR2tQLFVBQVdkLFFBQVMseUJBRXZCaUosT0FBT3FHLGFBQWFrRCxVQUFZdkosT0FBT3FHLGFBQWFDLFVBQVVHLGVBQWdCLGdCQUFpQnpHLE9BQU9xRyxhQUFha0QsV0FFbkgsSUFBSWtGLEVBQWN6TyxPQUFPcUcsYUFBYUMsVUFBVUMsVUFBVyxTQUFVdkcsT0FBT3FHLGFBQWEwSixRQUN6Ri9QLE9BQU9xRyxhQUFhb0ksWUFBY0EsRUFFbEN6TyxPQUFPcUcsYUFBYXRCLEtBQU8sSUFBSTJwQixFQUFNamdCLEVBQWF6TyxPQUFPcUcsYUFBYXRCLE1BRXRFLElBQUkrTixFQUFTLElBQUlvWixFQUFZLENBQzVCOTFCLE1BQU9xWSxJQUdKNGdCLEVBQVUsSUFBSTFELEVBQWEsQ0FDOUJPLFdBQVlwWixJQUdibnFCLEVBQUdrUCxVQUFXZCxRQUFTLG9CQUFxQixDQUMzQ2daLE9BQVErQyxFQUNSd2MsUUFBU0QsTUFLWHZtQyxFQUFPLE9BQVEsY0F4dlVmLENBMHZVRStGIiwiZmlsZSI6ImxsbXMtYnVpbGRlci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oJCl7XG4vKipcbiAqIEBsaWNlbnNlIGFsbW9uZCAwLjMuMyBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycy5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLCBodHRwOi8vZ2l0aHViLmNvbS9yZXF1aXJlanMvYWxtb25kL0xJQ0VOU0VcbiAqL1xuLy9Hb2luZyBzbG9wcHkgdG8gYXZvaWQgJ3VzZSBzdHJpY3QnIHN0cmluZyBjb3N0LCBidXQgc3RyaWN0IHByYWN0aWNlcyBzaG91bGRcbi8vYmUgZm9sbG93ZWQuXG4vKmdsb2JhbCBzZXRUaW1lb3V0OiBmYWxzZSAqL1xuXG52YXIgcmVxdWlyZWpzLCByZXF1aXJlLCBkZWZpbmU7XG4oZnVuY3Rpb24gKHVuZGVmKSB7XG5cdHZhciBtYWluLCByZXEsIG1ha2VNYXAsIGhhbmRsZXJzLFxuXHRcdGRlZmluZWQgPSB7fSxcblx0XHR3YWl0aW5nID0ge30sXG5cdFx0Y29uZmlnID0ge30sXG5cdFx0ZGVmaW5pbmcgPSB7fSxcblx0XHRoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuXHRcdGFwcyA9IFtdLnNsaWNlLFxuXHRcdGpzU3VmZml4UmVnRXhwID0gL1xcLmpzJC87XG5cblx0ZnVuY3Rpb24gaGFzUHJvcChvYmosIHByb3ApIHtcblx0XHRyZXR1cm4gaGFzT3duLmNhbGwob2JqLCBwcm9wKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHaXZlbiBhIHJlbGF0aXZlIG1vZHVsZSBuYW1lLCBsaWtlIC4vc29tZXRoaW5nLCBub3JtYWxpemUgaXQgdG9cblx0ICogYSByZWFsIG5hbWUgdGhhdCBjYW4gYmUgbWFwcGVkIHRvIGEgcGF0aC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdGhlIHJlbGF0aXZlIG5hbWVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGJhc2VOYW1lIGEgcmVhbCBuYW1lIHRoYXQgdGhlIG5hbWUgYXJnIGlzIHJlbGF0aXZlXG5cdCAqIHRvLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBub3JtYWxpemVkIG5hbWVcblx0ICovXG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZShuYW1lLCBiYXNlTmFtZSkge1xuXHRcdHZhciBuYW1lUGFydHMsIG5hbWVTZWdtZW50LCBtYXBWYWx1ZSwgZm91bmRNYXAsIGxhc3RJbmRleCxcblx0XHRcdGZvdW5kSSwgZm91bmRTdGFyTWFwLCBzdGFySSwgaSwgaiwgcGFydCwgbm9ybWFsaXplZEJhc2VQYXJ0cyxcblx0XHRcdGJhc2VQYXJ0cyA9IGJhc2VOYW1lICYmIGJhc2VOYW1lLnNwbGl0KFwiL1wiKSxcblx0XHRcdG1hcCA9IGNvbmZpZy5tYXAsXG5cdFx0XHRzdGFyTWFwID0gKG1hcCAmJiBtYXBbJyonXSkgfHwge307XG5cblx0XHQvL0FkanVzdCBhbnkgcmVsYXRpdmUgcGF0aHMuXG5cdFx0aWYgKG5hbWUpIHtcblx0XHRcdG5hbWUgPSBuYW1lLnNwbGl0KCcvJyk7XG5cdFx0XHRsYXN0SW5kZXggPSBuYW1lLmxlbmd0aCAtIDE7XG5cblx0XHRcdC8vIElmIHdhbnRpbmcgbm9kZSBJRCBjb21wYXRpYmlsaXR5LCBzdHJpcCAuanMgZnJvbSBlbmRcblx0XHRcdC8vIG9mIElEcy4gSGF2ZSB0byBkbyB0aGlzIGhlcmUsIGFuZCBub3QgaW4gbmFtZVRvVXJsXG5cdFx0XHQvLyBiZWNhdXNlIG5vZGUgYWxsb3dzIGVpdGhlciAuanMgb3Igbm9uIC5qcyB0byBtYXBcblx0XHRcdC8vIHRvIHNhbWUgZmlsZS5cblx0XHRcdGlmIChjb25maWcubm9kZUlkQ29tcGF0ICYmIGpzU3VmZml4UmVnRXhwLnRlc3QobmFtZVtsYXN0SW5kZXhdKSkge1xuXHRcdFx0XHRuYW1lW2xhc3RJbmRleF0gPSBuYW1lW2xhc3RJbmRleF0ucmVwbGFjZShqc1N1ZmZpeFJlZ0V4cCwgJycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydHMgd2l0aCBhICcuJyBzbyBuZWVkIHRoZSBiYXNlTmFtZVxuXHRcdFx0aWYgKG5hbWVbMF0uY2hhckF0KDApID09PSAnLicgJiYgYmFzZVBhcnRzKSB7XG5cdFx0XHRcdC8vQ29udmVydCBiYXNlTmFtZSB0byBhcnJheSwgYW5kIGxvcCBvZmYgdGhlIGxhc3QgcGFydCxcblx0XHRcdFx0Ly9zbyB0aGF0IC4gbWF0Y2hlcyB0aGF0ICdkaXJlY3RvcnknIGFuZCBub3QgbmFtZSBvZiB0aGUgYmFzZU5hbWUnc1xuXHRcdFx0XHQvL21vZHVsZS4gRm9yIGluc3RhbmNlLCBiYXNlTmFtZSBvZiAnb25lL3R3by90aHJlZScsIG1hcHMgdG9cblx0XHRcdFx0Ly8nb25lL3R3by90aHJlZS5qcycsIGJ1dCB3ZSB3YW50IHRoZSBkaXJlY3RvcnksICdvbmUvdHdvJyBmb3Jcblx0XHRcdFx0Ly90aGlzIG5vcm1hbGl6YXRpb24uXG5cdFx0XHRcdG5vcm1hbGl6ZWRCYXNlUGFydHMgPSBiYXNlUGFydHMuc2xpY2UoMCwgYmFzZVBhcnRzLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRuYW1lID0gbm9ybWFsaXplZEJhc2VQYXJ0cy5jb25jYXQobmFtZSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vc3RhcnQgdHJpbURvdHNcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHBhcnQgPSBuYW1lW2ldO1xuXHRcdFx0XHRpZiAocGFydCA9PT0gJy4nKSB7XG5cdFx0XHRcdFx0bmFtZS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0aSAtPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcblx0XHRcdFx0XHQvLyBJZiBhdCB0aGUgc3RhcnQsIG9yIHByZXZpb3VzIHZhbHVlIGlzIHN0aWxsIC4uLFxuXHRcdFx0XHRcdC8vIGtlZXAgdGhlbSBzbyB0aGF0IHdoZW4gY29udmVydGVkIHRvIGEgcGF0aCBpdCBtYXlcblx0XHRcdFx0XHQvLyBzdGlsbCB3b3JrIHdoZW4gY29udmVydGVkIHRvIGEgcGF0aCwgZXZlbiB0aG91Z2hcblx0XHRcdFx0XHQvLyBhcyBhbiBJRCBpdCBpcyBsZXNzIHRoYW4gaWRlYWwuIEluIGxhcmdlciBwb2ludFxuXHRcdFx0XHRcdC8vIHJlbGVhc2VzLCBtYXkgYmUgYmV0dGVyIHRvIGp1c3Qga2ljayBvdXQgYW4gZXJyb3IuXG5cdFx0XHRcdFx0aWYgKGkgPT09IDAgfHwgKGkgPT09IDEgJiYgbmFtZVsyXSA9PT0gJy4uJykgfHwgbmFtZVtpIC0gMV0gPT09ICcuLicpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRcdG5hbWUuc3BsaWNlKGkgLSAxLCAyKTtcblx0XHRcdFx0XHRcdGkgLT0gMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vZW5kIHRyaW1Eb3RzXG5cblx0XHRcdG5hbWUgPSBuYW1lLmpvaW4oJy8nKTtcblx0XHR9XG5cblx0XHQvL0FwcGx5IG1hcCBjb25maWcgaWYgYXZhaWxhYmxlLlxuXHRcdGlmICgoYmFzZVBhcnRzIHx8IHN0YXJNYXApICYmIG1hcCkge1xuXHRcdFx0bmFtZVBhcnRzID0gbmFtZS5zcGxpdCgnLycpO1xuXG5cdFx0XHRmb3IgKGkgPSBuYW1lUGFydHMubGVuZ3RoOyBpID4gMDsgaSAtPSAxKSB7XG5cdFx0XHRcdG5hbWVTZWdtZW50ID0gbmFtZVBhcnRzLnNsaWNlKDAsIGkpLmpvaW4oXCIvXCIpO1xuXG5cdFx0XHRcdGlmIChiYXNlUGFydHMpIHtcblx0XHRcdFx0XHQvL0ZpbmQgdGhlIGxvbmdlc3QgYmFzZU5hbWUgc2VnbWVudCBtYXRjaCBpbiB0aGUgY29uZmlnLlxuXHRcdFx0XHRcdC8vU28sIGRvIGpvaW5zIG9uIHRoZSBiaWdnZXN0IHRvIHNtYWxsZXN0IGxlbmd0aHMgb2YgYmFzZVBhcnRzLlxuXHRcdFx0XHRcdGZvciAoaiA9IGJhc2VQYXJ0cy5sZW5ndGg7IGogPiAwOyBqIC09IDEpIHtcblx0XHRcdFx0XHRcdG1hcFZhbHVlID0gbWFwW2Jhc2VQYXJ0cy5zbGljZSgwLCBqKS5qb2luKCcvJyldO1xuXG5cdFx0XHRcdFx0XHQvL2Jhc2VOYW1lIHNlZ21lbnQgaGFzICBjb25maWcsIGZpbmQgaWYgaXQgaGFzIG9uZSBmb3Jcblx0XHRcdFx0XHRcdC8vdGhpcyBuYW1lLlxuXHRcdFx0XHRcdFx0aWYgKG1hcFZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdG1hcFZhbHVlID0gbWFwVmFsdWVbbmFtZVNlZ21lbnRdO1xuXHRcdFx0XHRcdFx0XHRpZiAobWFwVmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0XHQvL01hdGNoLCB1cGRhdGUgbmFtZSB0byB0aGUgbmV3IHZhbHVlLlxuXHRcdFx0XHRcdFx0XHRcdGZvdW5kTWFwID0gbWFwVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0Zm91bmRJID0gaTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmb3VuZE1hcCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9DaGVjayBmb3IgYSBzdGFyIG1hcCBtYXRjaCwgYnV0IGp1c3QgaG9sZCBvbiB0byBpdCxcblx0XHRcdFx0Ly9pZiB0aGVyZSBpcyBhIHNob3J0ZXIgc2VnbWVudCBtYXRjaCBsYXRlciBpbiBhIG1hdGNoaW5nXG5cdFx0XHRcdC8vY29uZmlnLCB0aGVuIGZhdm9yIG92ZXIgdGhpcyBzdGFyIG1hcC5cblx0XHRcdFx0aWYgKCFmb3VuZFN0YXJNYXAgJiYgc3Rhck1hcCAmJiBzdGFyTWFwW25hbWVTZWdtZW50XSkge1xuXHRcdFx0XHRcdGZvdW5kU3Rhck1hcCA9IHN0YXJNYXBbbmFtZVNlZ21lbnRdO1xuXHRcdFx0XHRcdHN0YXJJID0gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWZvdW5kTWFwICYmIGZvdW5kU3Rhck1hcCkge1xuXHRcdFx0XHRmb3VuZE1hcCA9IGZvdW5kU3Rhck1hcDtcblx0XHRcdFx0Zm91bmRJID0gc3Rhckk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmb3VuZE1hcCkge1xuXHRcdFx0XHRuYW1lUGFydHMuc3BsaWNlKDAsIGZvdW5kSSwgZm91bmRNYXApO1xuXHRcdFx0XHRuYW1lID0gbmFtZVBhcnRzLmpvaW4oJy8nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdGZ1bmN0aW9uIG1ha2VSZXF1aXJlKHJlbE5hbWUsIGZvcmNlU3luYykge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvL0EgdmVyc2lvbiBvZiBhIHJlcXVpcmUgZnVuY3Rpb24gdGhhdCBwYXNzZXMgYSBtb2R1bGVOYW1lXG5cdFx0XHQvL3ZhbHVlIGZvciBpdGVtcyB0aGF0IG1heSBuZWVkIHRvXG5cdFx0XHQvL2xvb2sgdXAgcGF0aHMgcmVsYXRpdmUgdG8gdGhlIG1vZHVsZU5hbWVcblx0XHRcdHZhciBhcmdzID0gYXBzLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuXHRcdFx0Ly9JZiBmaXJzdCBhcmcgaXMgbm90IHJlcXVpcmUoJ3N0cmluZycpLCBhbmQgdGhlcmUgaXMgb25seVxuXHRcdFx0Ly9vbmUgYXJnLCBpdCBpcyB0aGUgYXJyYXkgZm9ybSB3aXRob3V0IGEgY2FsbGJhY2suIEluc2VydFxuXHRcdFx0Ly9hIG51bGwgc28gdGhhdCB0aGUgZm9sbG93aW5nIGNvbmNhdCBpcyBjb3JyZWN0LlxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJyAmJiBhcmdzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRhcmdzLnB1c2gobnVsbCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVxLmFwcGx5KHVuZGVmLCBhcmdzLmNvbmNhdChbcmVsTmFtZSwgZm9yY2VTeW5jXSkpO1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBtYWtlTm9ybWFsaXplKHJlbE5hbWUpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdHJldHVybiBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIG1ha2VMb2FkKGRlcE5hbWUpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRkZWZpbmVkW2RlcE5hbWVdID0gdmFsdWU7XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNhbGxEZXAobmFtZSkge1xuXHRcdGlmIChoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7XG5cdFx0XHR2YXIgYXJncyA9IHdhaXRpbmdbbmFtZV07XG5cdFx0XHRkZWxldGUgd2FpdGluZ1tuYW1lXTtcblx0XHRcdGRlZmluaW5nW25hbWVdID0gdHJ1ZTtcblx0XHRcdG1haW4uYXBwbHkodW5kZWYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGlmICghaGFzUHJvcChkZWZpbmVkLCBuYW1lKSAmJiAhaGFzUHJvcChkZWZpbmluZywgbmFtZSkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignTm8gJyArIG5hbWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGVmaW5lZFtuYW1lXTtcblx0fVxuXG5cdC8vVHVybnMgYSBwbHVnaW4hcmVzb3VyY2UgdG8gW3BsdWdpbiwgcmVzb3VyY2VdXG5cdC8vd2l0aCB0aGUgcGx1Z2luIGJlaW5nIHVuZGVmaW5lZCBpZiB0aGUgbmFtZVxuXHQvL2RpZCBub3QgaGF2ZSBhIHBsdWdpbiBwcmVmaXguXG5cdGZ1bmN0aW9uIHNwbGl0UHJlZml4KG5hbWUpIHtcblx0XHR2YXIgcHJlZml4LFxuXHRcdFx0aW5kZXggPSBuYW1lID8gbmFtZS5pbmRleE9mKCchJykgOiAtMTtcblx0XHRpZiAoaW5kZXggPiAtMSkge1xuXHRcdFx0cHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuXHRcdFx0bmFtZSA9IG5hbWUuc3Vic3RyaW5nKGluZGV4ICsgMSwgbmFtZS5sZW5ndGgpO1xuXHRcdH1cblx0XHRyZXR1cm4gW3ByZWZpeCwgbmFtZV07XG5cdH1cblxuXHQvL0NyZWF0ZXMgYSBwYXJ0cyBhcnJheSBmb3IgYSByZWxOYW1lIHdoZXJlIGZpcnN0IHBhcnQgaXMgcGx1Z2luIElELFxuXHQvL3NlY29uZCBwYXJ0IGlzIHJlc291cmNlIElELiBBc3N1bWVzIHJlbE5hbWUgaGFzIGFscmVhZHkgYmVlbiBub3JtYWxpemVkLlxuXHRmdW5jdGlvbiBtYWtlUmVsUGFydHMocmVsTmFtZSkge1xuXHRcdHJldHVybiByZWxOYW1lID8gc3BsaXRQcmVmaXgocmVsTmFtZSkgOiBbXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBNYWtlcyBhIG5hbWUgbWFwLCBub3JtYWxpemluZyB0aGUgbmFtZSwgYW5kIHVzaW5nIGEgcGx1Z2luXG5cdCAqIGZvciBub3JtYWxpemF0aW9uIGlmIG5lY2Vzc2FyeS4gR3JhYnMgYSByZWYgdG8gcGx1Z2luXG5cdCAqIHRvbywgYXMgYW4gb3B0aW1pemF0aW9uLlxuXHQgKi9cblx0bWFrZU1hcCA9IGZ1bmN0aW9uIChuYW1lLCByZWxQYXJ0cykge1xuXHRcdHZhciBwbHVnaW4sXG5cdFx0XHRwYXJ0cyA9IHNwbGl0UHJlZml4KG5hbWUpLFxuXHRcdFx0cHJlZml4ID0gcGFydHNbMF0sXG5cdFx0XHRyZWxSZXNvdXJjZU5hbWUgPSByZWxQYXJ0c1sxXTtcblxuXHRcdG5hbWUgPSBwYXJ0c1sxXTtcblxuXHRcdGlmIChwcmVmaXgpIHtcblx0XHRcdHByZWZpeCA9IG5vcm1hbGl6ZShwcmVmaXgsIHJlbFJlc291cmNlTmFtZSk7XG5cdFx0XHRwbHVnaW4gPSBjYWxsRGVwKHByZWZpeCk7XG5cdFx0fVxuXG5cdFx0Ly9Ob3JtYWxpemUgYWNjb3JkaW5nXG5cdFx0aWYgKHByZWZpeCkge1xuXHRcdFx0aWYgKHBsdWdpbiAmJiBwbHVnaW4ubm9ybWFsaXplKSB7XG5cdFx0XHRcdG5hbWUgPSBwbHVnaW4ubm9ybWFsaXplKG5hbWUsIG1ha2VOb3JtYWxpemUocmVsUmVzb3VyY2VOYW1lKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuYW1lID0gbm9ybWFsaXplKG5hbWUsIHJlbFJlc291cmNlTmFtZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5hbWUgPSBub3JtYWxpemUobmFtZSwgcmVsUmVzb3VyY2VOYW1lKTtcblx0XHRcdHBhcnRzID0gc3BsaXRQcmVmaXgobmFtZSk7XG5cdFx0XHRwcmVmaXggPSBwYXJ0c1swXTtcblx0XHRcdG5hbWUgPSBwYXJ0c1sxXTtcblx0XHRcdGlmIChwcmVmaXgpIHtcblx0XHRcdFx0cGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vVXNpbmcgcmlkaWN1bG91cyBwcm9wZXJ0eSBuYW1lcyBmb3Igc3BhY2UgcmVhc29uc1xuXHRcdHJldHVybiB7XG5cdFx0XHRmOiBwcmVmaXggPyBwcmVmaXggKyAnIScgKyBuYW1lIDogbmFtZSwgLy9mdWxsTmFtZVxuXHRcdFx0bjogbmFtZSxcblx0XHRcdHByOiBwcmVmaXgsXG5cdFx0XHRwOiBwbHVnaW5cblx0XHR9O1xuXHR9O1xuXG5cdGZ1bmN0aW9uIG1ha2VDb25maWcobmFtZSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gKGNvbmZpZyAmJiBjb25maWcuY29uZmlnICYmIGNvbmZpZy5jb25maWdbbmFtZV0pIHx8IHt9O1xuXHRcdH07XG5cdH1cblxuXHRoYW5kbGVycyA9IHtcblx0XHRyZXF1aXJlOiBmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0cmV0dXJuIG1ha2VSZXF1aXJlKG5hbWUpO1xuXHRcdH0sXG5cdFx0ZXhwb3J0czogZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdHZhciBlID0gZGVmaW5lZFtuYW1lXTtcblx0XHRcdGlmICh0eXBlb2YgZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuIGU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gKGRlZmluZWRbbmFtZV0gPSB7fSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRtb2R1bGU6IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpZDogbmFtZSxcblx0XHRcdFx0dXJpOiAnJyxcblx0XHRcdFx0ZXhwb3J0czogZGVmaW5lZFtuYW1lXSxcblx0XHRcdFx0Y29uZmlnOiBtYWtlQ29uZmlnKG5hbWUpXG5cdFx0XHR9O1xuXHRcdH1cblx0fTtcblxuXHRtYWluID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lKSB7XG5cdFx0dmFyIGNqc01vZHVsZSwgZGVwTmFtZSwgcmV0LCBtYXAsIGksIHJlbFBhcnRzLFxuXHRcdFx0YXJncyA9IFtdLFxuXHRcdFx0Y2FsbGJhY2tUeXBlID0gdHlwZW9mIGNhbGxiYWNrLFxuXHRcdFx0dXNpbmdFeHBvcnRzO1xuXG5cdFx0Ly9Vc2UgbmFtZSBpZiBubyByZWxOYW1lXG5cdFx0cmVsTmFtZSA9IHJlbE5hbWUgfHwgbmFtZTtcblx0XHRyZWxQYXJ0cyA9IG1ha2VSZWxQYXJ0cyhyZWxOYW1lKTtcblxuXHRcdC8vQ2FsbCB0aGUgY2FsbGJhY2sgdG8gZGVmaW5lIHRoZSBtb2R1bGUsIGlmIG5lY2Vzc2FyeS5cblx0XHRpZiAoY2FsbGJhY2tUeXBlID09PSAndW5kZWZpbmVkJyB8fCBjYWxsYmFja1R5cGUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdC8vUHVsbCBvdXQgdGhlIGRlZmluZWQgZGVwZW5kZW5jaWVzIGFuZCBwYXNzIHRoZSBvcmRlcmVkXG5cdFx0XHQvL3ZhbHVlcyB0byB0aGUgY2FsbGJhY2suXG5cdFx0XHQvL0RlZmF1bHQgdG8gW3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZV0gaWYgbm8gZGVwc1xuXHRcdFx0ZGVwcyA9ICFkZXBzLmxlbmd0aCAmJiBjYWxsYmFjay5sZW5ndGggPyBbJ3JlcXVpcmUnLCAnZXhwb3J0cycsICdtb2R1bGUnXSA6IGRlcHM7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0XHRtYXAgPSBtYWtlTWFwKGRlcHNbaV0sIHJlbFBhcnRzKTtcblx0XHRcdFx0ZGVwTmFtZSA9IG1hcC5mO1xuXG5cdFx0XHRcdC8vRmFzdCBwYXRoIENvbW1vbkpTIHN0YW5kYXJkIGRlcGVuZGVuY2llcy5cblx0XHRcdFx0aWYgKGRlcE5hbWUgPT09IFwicmVxdWlyZVwiKSB7XG5cdFx0XHRcdFx0YXJnc1tpXSA9IGhhbmRsZXJzLnJlcXVpcmUobmFtZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGVwTmFtZSA9PT0gXCJleHBvcnRzXCIpIHtcblx0XHRcdFx0XHQvL0NvbW1vbkpTIG1vZHVsZSBzcGVjIDEuMVxuXHRcdFx0XHRcdGFyZ3NbaV0gPSBoYW5kbGVycy5leHBvcnRzKG5hbWUpO1xuXHRcdFx0XHRcdHVzaW5nRXhwb3J0cyA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGVwTmFtZSA9PT0gXCJtb2R1bGVcIikge1xuXHRcdFx0XHRcdC8vQ29tbW9uSlMgbW9kdWxlIHNwZWMgMS4xXG5cdFx0XHRcdFx0Y2pzTW9kdWxlID0gYXJnc1tpXSA9IGhhbmRsZXJzLm1vZHVsZShuYW1lKTtcblx0XHRcdFx0fSBlbHNlIGlmIChoYXNQcm9wKGRlZmluZWQsIGRlcE5hbWUpIHx8XG5cdFx0XHRcdFx0XHQgICBoYXNQcm9wKHdhaXRpbmcsIGRlcE5hbWUpIHx8XG5cdFx0XHRcdFx0XHQgICBoYXNQcm9wKGRlZmluaW5nLCBkZXBOYW1lKSkge1xuXHRcdFx0XHRcdGFyZ3NbaV0gPSBjYWxsRGVwKGRlcE5hbWUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKG1hcC5wKSB7XG5cdFx0XHRcdFx0bWFwLnAubG9hZChtYXAubiwgbWFrZVJlcXVpcmUocmVsTmFtZSwgdHJ1ZSksIG1ha2VMb2FkKGRlcE5hbWUpLCB7fSk7XG5cdFx0XHRcdFx0YXJnc1tpXSA9IGRlZmluZWRbZGVwTmFtZV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKG5hbWUgKyAnIG1pc3NpbmcgJyArIGRlcE5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldCA9IGNhbGxiYWNrID8gY2FsbGJhY2suYXBwbHkoZGVmaW5lZFtuYW1lXSwgYXJncykgOiB1bmRlZmluZWQ7XG5cblx0XHRcdGlmIChuYW1lKSB7XG5cdFx0XHRcdC8vSWYgc2V0dGluZyBleHBvcnRzIHZpYSBcIm1vZHVsZVwiIGlzIGluIHBsYXksXG5cdFx0XHRcdC8vZmF2b3IgdGhhdCBvdmVyIHJldHVybiB2YWx1ZSBhbmQgZXhwb3J0cy4gQWZ0ZXIgdGhhdCxcblx0XHRcdFx0Ly9mYXZvciBhIG5vbi11bmRlZmluZWQgcmV0dXJuIHZhbHVlIG92ZXIgZXhwb3J0cyB1c2UuXG5cdFx0XHRcdGlmIChjanNNb2R1bGUgJiYgY2pzTW9kdWxlLmV4cG9ydHMgIT09IHVuZGVmICYmXG5cdFx0XHRcdFx0XHRjanNNb2R1bGUuZXhwb3J0cyAhPT0gZGVmaW5lZFtuYW1lXSkge1xuXHRcdFx0XHRcdGRlZmluZWRbbmFtZV0gPSBjanNNb2R1bGUuZXhwb3J0cztcblx0XHRcdFx0fSBlbHNlIGlmIChyZXQgIT09IHVuZGVmIHx8ICF1c2luZ0V4cG9ydHMpIHtcblx0XHRcdFx0XHQvL1VzZSB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGZ1bmN0aW9uLlxuXHRcdFx0XHRcdGRlZmluZWRbbmFtZV0gPSByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKG5hbWUpIHtcblx0XHRcdC8vTWF5IGp1c3QgYmUgYW4gb2JqZWN0IGRlZmluaXRpb24gZm9yIHRoZSBtb2R1bGUuIE9ubHlcblx0XHRcdC8vd29ycnkgYWJvdXQgZGVmaW5pbmcgaWYgaGF2ZSBhIG1vZHVsZSBuYW1lLlxuXHRcdFx0ZGVmaW5lZFtuYW1lXSA9IGNhbGxiYWNrO1xuXHRcdH1cblx0fTtcblxuXHRyZXF1aXJlanMgPSByZXF1aXJlID0gcmVxID0gZnVuY3Rpb24gKGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lLCBmb3JjZVN5bmMsIGFsdCkge1xuXHRcdGlmICh0eXBlb2YgZGVwcyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0aWYgKGhhbmRsZXJzW2RlcHNdKSB7XG5cdFx0XHRcdC8vY2FsbGJhY2sgaW4gdGhpcyBjYXNlIGlzIHJlYWxseSByZWxOYW1lXG5cdFx0XHRcdHJldHVybiBoYW5kbGVyc1tkZXBzXShjYWxsYmFjayk7XG5cdFx0XHR9XG5cdFx0XHQvL0p1c3QgcmV0dXJuIHRoZSBtb2R1bGUgd2FudGVkLiBJbiB0aGlzIHNjZW5hcmlvLCB0aGVcblx0XHRcdC8vZGVwcyBhcmcgaXMgdGhlIG1vZHVsZSBuYW1lLCBhbmQgc2Vjb25kIGFyZyAoaWYgcGFzc2VkKVxuXHRcdFx0Ly9pcyBqdXN0IHRoZSByZWxOYW1lLlxuXHRcdFx0Ly9Ob3JtYWxpemUgbW9kdWxlIG5hbWUsIGlmIGl0IGNvbnRhaW5zIC4gb3IgLi5cblx0XHRcdHJldHVybiBjYWxsRGVwKG1ha2VNYXAoZGVwcywgbWFrZVJlbFBhcnRzKGNhbGxiYWNrKSkuZik7XG5cdFx0fSBlbHNlIGlmICghZGVwcy5zcGxpY2UpIHtcblx0XHRcdC8vZGVwcyBpcyBhIGNvbmZpZyBvYmplY3QsIG5vdCBhbiBhcnJheS5cblx0XHRcdGNvbmZpZyA9IGRlcHM7XG5cdFx0XHRpZiAoY29uZmlnLmRlcHMpIHtcblx0XHRcdFx0cmVxKGNvbmZpZy5kZXBzLCBjb25maWcuY2FsbGJhY2spO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFjYWxsYmFjaykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjYWxsYmFjay5zcGxpY2UpIHtcblx0XHRcdFx0Ly9jYWxsYmFjayBpcyBhbiBhcnJheSwgd2hpY2ggbWVhbnMgaXQgaXMgYSBkZXBlbmRlbmN5IGxpc3QuXG5cdFx0XHRcdC8vQWRqdXN0IGFyZ3MgaWYgdGhlcmUgYXJlIGRlcGVuZGVuY2llc1xuXHRcdFx0XHRkZXBzID0gY2FsbGJhY2s7XG5cdFx0XHRcdGNhbGxiYWNrID0gcmVsTmFtZTtcblx0XHRcdFx0cmVsTmFtZSA9IG51bGw7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZXBzID0gdW5kZWY7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly9TdXBwb3J0IHJlcXVpcmUoWydhJ10pXG5cdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblxuXHRcdC8vSWYgcmVsTmFtZSBpcyBhIGZ1bmN0aW9uLCBpdCBpcyBhbiBlcnJiYWNrIGhhbmRsZXIsXG5cdFx0Ly9zbyByZW1vdmUgaXQuXG5cdFx0aWYgKHR5cGVvZiByZWxOYW1lID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZWxOYW1lID0gZm9yY2VTeW5jO1xuXHRcdFx0Zm9yY2VTeW5jID0gYWx0O1xuXHRcdH1cblxuXHRcdC8vU2ltdWxhdGUgYXN5bmMgY2FsbGJhY2s7XG5cdFx0aWYgKGZvcmNlU3luYykge1xuXHRcdFx0bWFpbih1bmRlZiwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvL1VzaW5nIGEgbm9uLXplcm8gdmFsdWUgYmVjYXVzZSBvZiBjb25jZXJuIGZvciB3aGF0IG9sZCBicm93c2Vyc1xuXHRcdFx0Ly9kbywgYW5kIGxhdGVzdCBicm93c2VycyBcInVwZ3JhZGVcIiB0byA0IGlmIGxvd2VyIHZhbHVlIGlzIHVzZWQ6XG5cdFx0XHQvL2h0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RpbWVycy5odG1sI2RvbS13aW5kb3d0aW1lcnMtc2V0dGltZW91dDpcblx0XHRcdC8vSWYgd2FudCBhIHZhbHVlIGltbWVkaWF0ZWx5LCB1c2UgcmVxdWlyZSgnaWQnKSBpbnN0ZWFkIC0tIHNvbWV0aGluZ1xuXHRcdFx0Ly90aGF0IHdvcmtzIGluIGFsbW9uZCBvbiB0aGUgZ2xvYmFsIGxldmVsLCBidXQgbm90IGd1YXJhbnRlZWQgYW5kXG5cdFx0XHQvL3VubGlrZWx5IHRvIHdvcmsgaW4gb3RoZXIgQU1EIGltcGxlbWVudGF0aW9ucy5cblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRtYWluKHVuZGVmLCBkZXBzLCBjYWxsYmFjaywgcmVsTmFtZSk7XG5cdFx0XHR9LCA0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVxO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBKdXN0IGRyb3BzIHRoZSBjb25maWcgb24gdGhlIGZsb29yLCBidXQgcmV0dXJucyByZXEgaW4gY2FzZVxuXHQgKiB0aGUgY29uZmlnIHJldHVybiB2YWx1ZSBpcyB1c2VkLlxuXHQgKi9cblx0cmVxLmNvbmZpZyA9IGZ1bmN0aW9uIChjZmcpIHtcblx0XHRyZXR1cm4gcmVxKGNmZyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEV4cG9zZSBtb2R1bGUgcmVnaXN0cnkgZm9yIGRlYnVnZ2luZyBhbmQgdG9vbGluZ1xuXHQgKi9cblx0cmVxdWlyZWpzLl9kZWZpbmVkID0gZGVmaW5lZDtcblxuXHRkZWZpbmUgPSBmdW5jdGlvbiAobmFtZSwgZGVwcywgY2FsbGJhY2spIHtcblx0XHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1NlZSBhbG1vbmQgUkVBRE1FOiBpbmNvcnJlY3QgbW9kdWxlIGJ1aWxkLCBubyBtb2R1bGUgbmFtZScpO1xuXHRcdH1cblxuXHRcdC8vVGhpcyBtb2R1bGUgbWF5IG5vdCBoYXZlIGRlcGVuZGVuY2llc1xuXHRcdGlmICghZGVwcy5zcGxpY2UpIHtcblx0XHRcdC8vZGVwcyBpcyBub3QgYW4gYXJyYXksIHNvIHByb2JhYmx5IG1lYW5zXG5cdFx0XHQvL2FuIG9iamVjdCBsaXRlcmFsIG9yIGZhY3RvcnkgZnVuY3Rpb24gZm9yXG5cdFx0XHQvL3RoZSB2YWx1ZS4gQWRqdXN0IGFyZ3MuXG5cdFx0XHRjYWxsYmFjayA9IGRlcHM7XG5cdFx0XHRkZXBzID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKCFoYXNQcm9wKGRlZmluZWQsIG5hbWUpICYmICFoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7XG5cdFx0XHR3YWl0aW5nW25hbWVdID0gW25hbWUsIGRlcHMsIGNhbGxiYWNrXTtcblx0XHR9XG5cdH07XG5cblx0ZGVmaW5lLmFtZCA9IHtcblx0XHRqUXVlcnk6IHRydWVcblx0fTtcbn0oKSk7XG5cbmRlZmluZShcInZlbmRvci9hbG1vbmRcIiwgZnVuY3Rpb24oKXt9KTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBXb3JkUHJlc3MtbG9hZGVkIHZlcnNpb24gb2YgVW5kZXJzY29yZSBmb3IgdXNlIHdpdGggdGhpbmdzIHRoYXQgbmVlZCBpdCBhbmQgdXNlIFJlcXVpcmUuXG4gKiBAcmV0dXJuICAgb2JqXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ3VuZGVyc2NvcmUnLFtdLGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gXztcbn0gKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBXb3JkUHJlc3MtbG9hZGVkIHZlcnNpb24gb2YgQmFja2JvbmUgZm9yIHVzZSB3aXRoIHRoaW5ncyB0aGF0IG5lZWQgaXQgYW5kIHVzZSBSZXF1aXJlLlxuICogQHJldHVybiAgIG9ialxuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTYuMFxuICovXG5kZWZpbmUoICdiYWNrYm9uZScsW10sZnVuY3Rpb24oKSB7XG5cdHJldHVybiBCYWNrYm9uZTtcbn0gKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBXb3JkUHJlc3MtbG9hZGVkIHZlcnNpb24gb2YgVW5kZXJzY29yZSBmb3IgdXNlIHdpdGggdGhpbmdzIHRoYXQgbmVlZCBpdCBhbmQgdXNlIFJlcXVpcmUuXG4gKiBAcmV0dXJuICAgb2JqXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ2pxdWVyeScsW10sZnVuY3Rpb24oKSB7XG5cdHJldHVybiBqUXVlcnk7XG59ICk7XG5cbi8qIVxuKiBCYWNrYm9uZS5Db2xsZWN0aW9uVmlldywgdjEuMy40XG4qIENvcHlyaWdodCAoYykyMDEzIFJvdHVuZGEgU29mdHdhcmUsIExMQy5cbiogRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiogaHR0cDovL2dpdGh1Yi5jb20vcm90dW5kYXNvZnR3YXJlL2JhY2tib25lLWNvbGxlY3Rpb24tdmlld1xuKi9cblxuKCBmdW5jdGlvbiggcm9vdCwgZmFjdG9yeSApIHtcblx0Ly8gVU1EIHdyYXBwZXJcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKCAndmVuZG9yL2JhY2tib25lLmNvbGxlY3Rpb25WaWV3JyxbICd1bmRlcnNjb3JlJywgJ2JhY2tib25lJywgJ2pxdWVyeScgXSwgZmFjdG9yeSApO1xuXHR9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cdFx0Ly8gTm9kZS9Db21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgndW5kZXJzY29yZScgKSwgcmVxdWlyZSggJ2JhY2tib25lJyApLCByZXF1aXJlKCAnYmFja2JvbmUnICkuJCApO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIHJvb3QuXywgcm9vdC5CYWNrYm9uZSwgKCByb290LmpRdWVyeSB8fCByb290LlplcHRvIHx8IHJvb3QuJCApICk7XG5cdH1cbn0oIHRoaXMsIGZ1bmN0aW9uKCBfLCBCYWNrYm9uZSwgJCApIHtcblx0dmFyIG1EZWZhdWx0TW9kZWxWaWV3Q29uc3RydWN0b3IgPSBCYWNrYm9uZS5WaWV3O1xuXG5cdHZhciBrRGVmYXVsdFJlZmVyZW5jZUJ5ID0gXCJtb2RlbFwiO1xuXG5cdHZhciBrT3B0aW9uc1JlcXVpcmluZ1JlcmVuZGVyaW5nID0gWyBcImNvbGxlY3Rpb25cIiwgXCJtb2RlbFZpZXdcIiwgXCJtb2RlbFZpZXdPcHRpb25zXCIsIFwiaXRlbVRlbXBsYXRlXCIsIFwiaXRlbVRlbXBsYXRlRnVuY3Rpb25cIiwgXCJkZXRhY2hlZFJlbmRlcmluZ1wiIF07XG5cblx0dmFyIGtTdHlsZXNGb3JFbXB0eUxpc3RDYXB0aW9uID0ge1xuXHRcdFwiYmFja2dyb3VuZFwiIDogXCJ0cmFuc3BhcmVudFwiLFxuXHRcdFwiYm9yZGVyXCIgOiBcIm5vbmVcIixcblx0XHRcImJveC1zaGFkb3dcIiA6IFwibm9uZVwiXG5cdH07XG5cblx0QmFja2JvbmUuQ29sbGVjdGlvblZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCgge1xuXG5cdFx0dGFnTmFtZSA6IFwidWxcIixcblxuXHRcdGV2ZW50cyA6IHtcblx0XHRcdFwibW91c2Vkb3duID4gbGksIHRib2R5ID4gdHIgPiB0ZFwiIDogXCJfbGlzdEl0ZW1fb25Nb3VzZWRvd25cIixcblx0XHRcdFwiZGJsY2xpY2sgPiBsaSwgdGJvZHkgPiB0ciA+IHRkXCIgOiBcIl9saXN0SXRlbV9vbkRvdWJsZUNsaWNrXCIsXG5cdFx0XHRcImNsaWNrXCIgOiBcIl9saXN0QmFja2dyb3VuZF9vbkNsaWNrXCIsXG5cdFx0XHRcImNsaWNrIHVsLmNvbGxlY3Rpb24tdmlldywgdGFibGUuY29sbGVjdGlvbi12aWV3XCIgOiBcIl9saXN0QmFja2dyb3VuZF9vbkNsaWNrXCIsXG5cdFx0XHRcImtleWRvd25cIiA6IFwiX29uS2V5ZG93blwiXG5cdFx0fSxcblxuXHRcdC8vIG9ubHkgdXNlZCBpZiBCYWNrYm9uZS5Db3VyaWVyIGlzIGF2YWlsYWJsZVxuXHRcdHNwYXduTWVzc2FnZXMgOiB7XG5cdFx0XHRcImZvY3VzXCIgOiBcImZvY3VzXCJcblx0XHR9LFxuXG5cdFx0Ly9vbmx5IHVzZWQgaWYgQmFja2JvbmUuQ291cmllciBpcyBhdmFpbGFibGVcblx0XHRwYXNzTWVzc2FnZXMgOiB7IFwiKlwiIDogXCIuXCIgfSxcblxuXHRcdC8vIHZpZXdPcHRpb24gZGVmaW5pdGlvbnMgd2l0aCBkZWZhdWx0IHZhbHVlcy5cblx0XHRpbml0aWFsaXphdGlvbk9wdGlvbnMgOiBbXG5cdFx0XHR7IFwiY29sbGVjdGlvblwiIDogbnVsbCB9LFxuXHRcdFx0eyBcIm1vZGVsVmlld1wiIDogbnVsbCB9LFxuXHRcdFx0eyBcIm1vZGVsVmlld09wdGlvbnNcIiA6IHt9IH0sXG5cdFx0XHR7IFwiaXRlbVRlbXBsYXRlXCIgOiBudWxsIH0sXG5cdFx0XHR7IFwiaXRlbVRlbXBsYXRlRnVuY3Rpb25cIiA6IG51bGwgfSxcblx0XHRcdHsgXCJzZWxlY3RhYmxlXCIgOiB0cnVlIH0sXG5cdFx0XHR7IFwiY2xpY2tUb1NlbGVjdFwiIDogdHJ1ZSB9LFxuXHRcdFx0eyBcInNlbGVjdGFibGVNb2RlbHNGaWx0ZXJcIiA6IG51bGwgfSxcblx0XHRcdHsgXCJ2aXNpYmxlTW9kZWxzRmlsdGVyXCIgOiBudWxsIH0sXG5cdFx0XHR7IFwic29ydGFibGVNb2RlbHNGaWx0ZXJcIiA6IG51bGwgfSxcblx0XHRcdHsgXCJzZWxlY3RNdWx0aXBsZVwiIDogZmFsc2UgfSxcblx0XHRcdHsgXCJjbGlja1RvVG9nZ2xlXCIgOiBmYWxzZSB9LFxuXHRcdFx0eyBcInByb2Nlc3NLZXlFdmVudHNcIiA6IHRydWUgfSxcblx0XHRcdHsgXCJzb3J0YWJsZVwiIDogZmFsc2UgfSxcblx0XHRcdHsgXCJzb3J0YWJsZU9wdGlvbnNcIiA6IG51bGwgfSxcblx0XHRcdHsgXCJyZXVzZU1vZGVsVmlld3NcIiA6IHRydWUgfSxcblx0XHRcdHsgXCJkZXRhY2hlZFJlbmRlcmluZ1wiIDogZmFsc2UgfSxcblx0XHRcdHsgXCJlbXB0eUxpc3RDYXB0aW9uXCIgOiBudWxsIH1cblx0XHRdLFxuXG5cdFx0aW5pdGlhbGl6ZSA6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdFx0QmFja2JvbmUuVmlld09wdGlvbnMuYWRkKCB0aGlzLCBcImluaXRpYWxpemF0aW9uT3B0aW9uc1wiICk7IC8vIHNldHVwIHRoZSBWaWV3T3B0aW9ucyBmdW5jdGlvbmFsaXR5LlxuXHRcdFx0dGhpcy5zZXRPcHRpb25zKCBvcHRpb25zICk7IC8vIGFuZCBtYWtlIHVzZSBvZiBhbnkgcHJvdmlkZWQgb3B0aW9uc1xuXG5cdFx0XHRpZiggISB0aGlzLmNvbGxlY3Rpb24gKSB0aGlzLmNvbGxlY3Rpb24gPSBuZXcgQmFja2JvbmUuQ29sbGVjdGlvbigpO1xuXG5cdFx0XHR0aGlzLl9oYXNCZWVuUmVuZGVyZWQgPSBmYWxzZTtcblxuXHRcdFx0aWYoIHRoaXMuX2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlKCkgKSB7XG5cdFx0XHRcdEJhY2tib25lLkNvdXJpZXIuYWRkKCB0aGlzICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuJGVsLmRhdGEoIFwidmlld1wiLCB0aGlzICk7IC8vIG5lZWRlZCBmb3IgY29ubmVjdGVkIHNvcnRhYmxlIGxpc3RzXG5cdFx0XHR0aGlzLiRlbC5hZGRDbGFzcyggXCJjb2xsZWN0aW9uLXZpZXcgY29sbGVjdGlvbi1saXN0XCIgKTsgLy8gY29sbGVjdGlvbi1saXN0IGlzIGluIHRoZXJlIGZvciBsZWdhY3kgcHVycG9zZXNcblx0XHRcdGlmKCB0aGlzLnNlbGVjdGFibGUgKSB0aGlzLiRlbC5hZGRDbGFzcyggXCJzZWxlY3RhYmxlXCIgKTtcblxuXHRcdFx0aWYoIHRoaXMuc2VsZWN0YWJsZSAmJiB0aGlzLnByb2Nlc3NLZXlFdmVudHMgKVxuXHRcdFx0XHR0aGlzLiRlbC5hdHRyKCBcInRhYmluZGV4XCIsIDAgKTsgLy8gc28gd2UgZ2V0IGtleWJvYXJkIGV2ZW50c1xuXG5cdFx0XHR0aGlzLnNlbGVjdGVkSXRlbXMgPSBbXTtcblxuXHRcdFx0dGhpcy5fdXBkYXRlSXRlbVRlbXBsYXRlKCk7XG5cblx0XHRcdGlmKCB0aGlzLmNvbGxlY3Rpb24gKVxuXHRcdFx0XHR0aGlzLl9yZWdpc3RlckNvbGxlY3Rpb25FdmVudHMoKTtcblxuXHRcdFx0dGhpcy52aWV3TWFuYWdlciA9IG5ldyBDaGlsZFZpZXdDb250YWluZXIoKTtcblx0XHR9LFxuXG5cdFx0X29uT3B0aW9uc0NoYW5nZWQgOiBmdW5jdGlvbiggY2hhbmdlZE9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucyApIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFx0XHR2YXIgcmVyZW5kZXIgPSBmYWxzZTtcblxuXHRcdFx0Xy5lYWNoKCBfLmtleXMoIGNoYW5nZWRPcHRpb25zICksIGZ1bmN0aW9uKCBjaGFuZ2VkT3B0aW9uS2V5ICkge1xuXHRcdFx0XHR2YXIgbmV3VmFsID0gY2hhbmdlZE9wdGlvbnNbIGNoYW5nZWRPcHRpb25LZXkgXTtcblx0XHRcdFx0dmFyIG9sZFZhbCA9IG9yaWdpbmFsT3B0aW9uc1sgY2hhbmdlZE9wdGlvbktleSBdO1xuXHRcdFx0XHRzd2l0Y2goIGNoYW5nZWRPcHRpb25LZXkgKSB7XG5cdFx0XHRcdFx0Y2FzZSBcImNvbGxlY3Rpb25cIiA6XG5cdFx0XHRcdFx0XHRpZiAoIG5ld1ZhbCAhPT0gb2xkVmFsICkge1xuXHRcdFx0XHRcdFx0XHRfdGhpcy5zdG9wTGlzdGVuaW5nKCBvbGRWYWwgKTtcblx0XHRcdFx0XHRcdFx0X3RoaXMuX3JlZ2lzdGVyQ29sbGVjdGlvbkV2ZW50cygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInNlbGVjdE11bHRpcGxlXCIgOlxuXHRcdFx0XHRcdFx0aWYoICEgbmV3VmFsICYmIF90aGlzLnNlbGVjdGVkSXRlbXMubGVuZ3RoID4gMSApXG5cdFx0XHRcdFx0XHRcdF90aGlzLnNldFNlbGVjdGVkTW9kZWwoIF8uZmlyc3QoIF90aGlzLnNlbGVjdGVkSXRlbXMgKSwgeyBieSA6IFwiY2lkXCIgfSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInNlbGVjdGFibGVcIiA6XG5cdFx0XHRcdFx0XHRpZiggISBuZXdWYWwgJiYgX3RoaXMuc2VsZWN0ZWRJdGVtcy5sZW5ndGggPiAwIClcblx0XHRcdFx0XHRcdFx0X3RoaXMuc2V0U2VsZWN0ZWRNb2RlbHMoIFtdICk7XG5cblx0XHRcdFx0XHRcdGlmKCBuZXdWYWwgJiYgdGhpcy5wcm9jZXNzS2V5RXZlbnRzICkgX3RoaXMuJGVsLmF0dHIoIFwidGFiaW5kZXhcIiwgMCApOyAvLyBzbyB3ZSBnZXQga2V5Ym9hcmQgZXZlbnRzXG5cdFx0XHRcdFx0XHRlbHNlIF90aGlzLiRlbC5yZW1vdmVBdHRyKCBcInRhYmluZGV4XCIsIDAgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJzb3J0YWJsZVwiIDpcblx0XHRcdFx0XHRcdGNoYW5nZWRPcHRpb25zLnNvcnRhYmxlID8gX3RoaXMuX3NldHVwU29ydGFibGUoKSA6IF90aGlzLiRlbC5zb3J0YWJsZSggXCJkZXN0cm95XCIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJzZWxlY3RhYmxlTW9kZWxzRmlsdGVyXCIgOlxuXHRcdFx0XHRcdFx0X3RoaXMucmVhcHBseUZpbHRlciggJ3NlbGVjdGFibGVNb2RlbHMnICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwic29ydGFibGVPcHRpb25zXCIgOlxuXHRcdFx0XHRcdFx0X3RoaXMuJGVsLnNvcnRhYmxlKCBcImRlc3Ryb3lcIiApO1xuXHRcdFx0XHRcdFx0X3RoaXMuX3NldHVwU29ydGFibGUoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJzb3J0YWJsZU1vZGVsc0ZpbHRlclwiIDpcblx0XHRcdFx0XHRcdF90aGlzLnJlYXBwbHlGaWx0ZXIoICdzb3J0YWJsZU1vZGVscycgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJ2aXNpYmxlTW9kZWxzRmlsdGVyXCIgOlxuXHRcdFx0XHRcdFx0X3RoaXMucmVhcHBseUZpbHRlciggJ3Zpc2libGVNb2RlbHMnICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiaXRlbVRlbXBsYXRlXCIgOlxuXHRcdFx0XHRcdFx0X3RoaXMuX3VwZGF0ZUl0ZW1UZW1wbGF0ZSgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInByb2Nlc3NLZXlFdmVudHNcIiA6XG5cdFx0XHRcdFx0XHRpZiggbmV3VmFsICYmIHRoaXMuc2VsZWN0YWJsZSApIF90aGlzLiRlbC5hdHRyKCBcInRhYmluZGV4XCIsIDAgKTsgLy8gc28gd2UgZ2V0IGtleWJvYXJkIGV2ZW50c1xuXHRcdFx0XHRcdFx0ZWxzZSBfdGhpcy4kZWwucmVtb3ZlQXR0ciggXCJ0YWJpbmRleFwiLCAwICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwibW9kZWxWaWV3XCIgOlxuXHRcdFx0XHRcdFx0Ly9uZWVkIHRvIHJlbW92ZSBhbGwgb2xkIHZpZXcgaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHRfdGhpcy52aWV3TWFuYWdlci5lYWNoKCBmdW5jdGlvbiggdmlldyApIHtcblx0XHRcdFx0XHRcdFx0X3RoaXMudmlld01hbmFnZXIucmVtb3ZlKCB2aWV3ICk7XG5cdFx0XHRcdFx0XHRcdC8vIGRlc3Ryb3kgdGhlIFZpZXcgaXRzZWxmXG5cdFx0XHRcdFx0XHRcdHZpZXcucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiggXy5jb250YWlucygga09wdGlvbnNSZXF1aXJpbmdSZXJlbmRlcmluZywgY2hhbmdlZE9wdGlvbktleSApICkgcmVyZW5kZXIgPSB0cnVlO1xuXHRcdFx0fSApO1xuXG5cdFx0XHRpZiggdGhpcy5faGFzQmVlblJlbmRlcmVkICYmIHJlcmVuZGVyICkge1xuXHRcdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXRPcHRpb24gOiBmdW5jdGlvbiggb3B0aW9uTmFtZSwgb3B0aW9uVmFsdWUgKSB7IC8vIG5vdyBpcyBtZWFybHkgYSB3cmFwcGVyIGFyb3VuZCBiYWNrYm9uZS52aWV3T3B0aW9ucycgc2V0T3B0aW9ucygpXG5cdFx0XHR2YXIgb3B0aW9uSGFzaCA9IHt9O1xuXHRcdFx0b3B0aW9uSGFzaFsgb3B0aW9uTmFtZSBdID0gb3B0aW9uVmFsdWU7XG5cdFx0XHR0aGlzLnNldE9wdGlvbnMoIG9wdGlvbkhhc2ggKTtcblx0XHR9LFxuXG5cdFx0Z2V0U2VsZWN0ZWRNb2RlbCA6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2VsZWN0ZWRJdGVtcy5sZW5ndGggPyBfLmZpcnN0KCB0aGlzLmdldFNlbGVjdGVkTW9kZWxzKCBvcHRpb25zICkgKSA6IG51bGw7XG5cdFx0fSxcblxuXHRcdGdldFNlbGVjdGVkTW9kZWxzIDogZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdFx0b3B0aW9ucyA9IF8uZXh0ZW5kKCB7fSwge1xuXHRcdFx0XHRieSA6IGtEZWZhdWx0UmVmZXJlbmNlQnlcblx0XHRcdH0sIG9wdGlvbnMgKTtcblxuXHRcdFx0dmFyIHJlZmVyZW5jZUJ5ID0gb3B0aW9ucy5ieTtcblx0XHRcdHZhciBpdGVtcyA9IFtdO1xuXG5cdFx0XHRzd2l0Y2goIHJlZmVyZW5jZUJ5ICkge1xuXHRcdFx0XHRjYXNlIFwiaWRcIiA6XG5cdFx0XHRcdFx0Xy5lYWNoKCB0aGlzLnNlbGVjdGVkSXRlbXMsIGZ1bmN0aW9uICggaXRlbSApIHtcblx0XHRcdFx0XHRcdGl0ZW1zLnB1c2goIF90aGlzLmNvbGxlY3Rpb24uZ2V0KCBpdGVtICkuaWQgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJjaWRcIiA6XG5cdFx0XHRcdFx0aXRlbXMgPSBpdGVtcy5jb25jYXQoIHRoaXMuc2VsZWN0ZWRJdGVtcyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwib2Zmc2V0XCIgOlxuXHRcdFx0XHRcdHZhciBjdXJMaW5lTnVtYmVyID0gMDtcblxuXHRcdFx0XHRcdHZhciBpdGVtRWxlbWVudHMgPSB0aGlzLl9nZXRWaXNpYmxlSXRlbUVscygpO1xuXG5cdFx0XHRcdFx0aXRlbUVsZW1lbnRzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0dmFyIHRoaXNJdGVtRWwgPSAkKCB0aGlzICk7XG5cdFx0XHRcdFx0XHRpZiggdGhpc0l0ZW1FbC5pcyggXCIuc2VsZWN0ZWRcIiApIClcblx0XHRcdFx0XHRcdFx0aXRlbXMucHVzaCggY3VyTGluZU51bWJlciApO1xuXHRcdFx0XHRcdFx0Y3VyTGluZU51bWJlcisrO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm1vZGVsXCIgOlxuXHRcdFx0XHRcdF8uZWFjaCggdGhpcy5zZWxlY3RlZEl0ZW1zLCBmdW5jdGlvbiAoIGl0ZW0gKSB7XG5cdFx0XHRcdFx0XHRpdGVtcy5wdXNoKCBfdGhpcy5jb2xsZWN0aW9uLmdldCggaXRlbSApICk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidmlld1wiIDpcblx0XHRcdFx0XHRfLmVhY2goIHRoaXMuc2VsZWN0ZWRJdGVtcywgZnVuY3Rpb24gKCBpdGVtICkge1xuXHRcdFx0XHRcdFx0aXRlbXMucHVzaCggX3RoaXMudmlld01hbmFnZXIuZmluZEJ5TW9kZWwoIF90aGlzLmNvbGxlY3Rpb24uZ2V0KCBpdGVtICkgKSApO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdCA6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcIkludmFsaWQgcmVmZXJlbmNlQnkgb3B0aW9uOiBcIiArIHJlZmVyZW5jZUJ5ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpdGVtcztcblxuXHRcdH0sXG5cblx0XHRzZXRTZWxlY3RlZE1vZGVscyA6IGZ1bmN0aW9uKCBuZXdTZWxlY3RlZEl0ZW1zLCBvcHRpb25zICkge1xuXHRcdFx0aWYoICEgXy5pc0FycmF5KCBuZXdTZWxlY3RlZEl0ZW1zICkgKSB0aHJvdyBcIkludmFsaWQgcGFyYW1ldGVyIHZhbHVlXCI7XG5cdFx0XHRpZiggISB0aGlzLnNlbGVjdGFibGUgJiYgbmV3U2VsZWN0ZWRJdGVtcy5sZW5ndGggPiAwICkgcmV0dXJuOyAvLyB1c2VkIHRvIHRocm93IGVycm9yLCBidXQgdGhlcmUgYXJlIHNvbWUgY2lyY3Vtc3RhbmNlcyBpbiB3aGljaCBhIGxpc3QgY2FuIGJlIHNlbGVjdGFibGUgYXQgdGltZXMgYW5kIG5vdCBhdCBvdGhlcnMsIGRvbid0IHdhbnQgdG8gaGF2ZSB0byB3b3JyeSBhYm91dCBjYXRjaGluZyBlcnJvcnNcblxuXHRcdFx0b3B0aW9ucyA9IF8uZXh0ZW5kKCB7fSwge1xuXHRcdFx0XHRzaWxlbnQgOiBmYWxzZSxcblx0XHRcdFx0YnkgOiBrRGVmYXVsdFJlZmVyZW5jZUJ5XG5cdFx0XHR9LCBvcHRpb25zICk7XG5cblx0XHRcdHZhciByZWZlcmVuY2VCeSA9IG9wdGlvbnMuYnk7XG5cdFx0XHR2YXIgbmV3U2VsZWN0ZWRDaWRzID0gW107XG5cblx0XHRcdHN3aXRjaCggcmVmZXJlbmNlQnkgKSB7XG5cdFx0XHRcdGNhc2UgXCJjaWRcIiA6XG5cdFx0XHRcdFx0bmV3U2VsZWN0ZWRDaWRzID0gbmV3U2VsZWN0ZWRJdGVtcztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImlkXCIgOlxuXHRcdFx0XHRcdHRoaXMuY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggdGhpc01vZGVsICkge1xuXHRcdFx0XHRcdFx0aWYoIF8uY29udGFpbnMoIG5ld1NlbGVjdGVkSXRlbXMsIHRoaXNNb2RlbC5pZCApICkgbmV3U2VsZWN0ZWRDaWRzLnB1c2goIHRoaXNNb2RlbC5jaWQgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJtb2RlbFwiIDpcblx0XHRcdFx0XHRuZXdTZWxlY3RlZENpZHMgPSBfLnBsdWNrKCBuZXdTZWxlY3RlZEl0ZW1zLCBcImNpZFwiICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ2aWV3XCIgOlxuXHRcdFx0XHRcdF8uZWFjaCggbmV3U2VsZWN0ZWRJdGVtcywgZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0XHRcdFx0XHRuZXdTZWxlY3RlZENpZHMucHVzaCggaXRlbS5tb2RlbC5jaWQgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJvZmZzZXRcIiA6XG5cdFx0XHRcdFx0dmFyIGN1ckxpbmVOdW1iZXIgPSAwO1xuXHRcdFx0XHRcdHZhciBzZWxlY3RlZEl0ZW1zID0gW107XG5cblx0XHRcdFx0XHR2YXIgaXRlbUVsZW1lbnRzID0gdGhpcy5fZ2V0VmlzaWJsZUl0ZW1FbHMoKTtcblx0XHRcdFx0XHRpdGVtRWxlbWVudHMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR2YXIgdGhpc0l0ZW1FbCA9ICQoIHRoaXMgKTtcblx0XHRcdFx0XHRcdGlmKCBfLmNvbnRhaW5zKCBuZXdTZWxlY3RlZEl0ZW1zLCBjdXJMaW5lTnVtYmVyICkgKVxuXHRcdFx0XHRcdFx0XHRuZXdTZWxlY3RlZENpZHMucHVzaCggdGhpc0l0ZW1FbC5hdHRyKCBcImRhdGEtbW9kZWwtY2lkXCIgKSApO1xuXHRcdFx0XHRcdFx0Y3VyTGluZU51bWJlcisrO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdCA6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcIkludmFsaWQgcmVmZXJlbmNlQnkgb3B0aW9uOiBcIiArIHJlZmVyZW5jZUJ5ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBvbGRTZWxlY3RlZE1vZGVscyA9IHRoaXMuZ2V0U2VsZWN0ZWRNb2RlbHMoKTtcblx0XHRcdHZhciBvbGRTZWxlY3RlZENpZHMgPSBfLmNsb25lKCB0aGlzLnNlbGVjdGVkSXRlbXMgKTtcblxuXHRcdFx0dGhpcy5zZWxlY3RlZEl0ZW1zID0gdGhpcy5fY29udmVydFN0cmluZ3NUb0ludHMoIG5ld1NlbGVjdGVkQ2lkcyApO1xuXHRcdFx0dGhpcy5fdmFsaWRhdGVTZWxlY3Rpb24oKTtcblxuXHRcdFx0dmFyIG5ld1NlbGVjdGVkTW9kZWxzID0gdGhpcy5nZXRTZWxlY3RlZE1vZGVscygpO1xuXG5cdFx0XHRpZiggISB0aGlzLl9jb250YWluU2FtZUVsZW1lbnRzKCBvbGRTZWxlY3RlZENpZHMsIHRoaXMuc2VsZWN0ZWRJdGVtcyApIClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5fYWRkU2VsZWN0ZWRDbGFzc1RvU2VsZWN0ZWRJdGVtcyggb2xkU2VsZWN0ZWRDaWRzICk7XG5cblx0XHRcdFx0aWYoICEgb3B0aW9ucy5zaWxlbnQgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYoIHRoaXMuX2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlKCkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNwYXduKCBcInNlbGVjdGlvbkNoYW5nZWRcIiwge1xuXHRcdFx0XHRcdFx0XHRzZWxlY3RlZE1vZGVscyA6IG5ld1NlbGVjdGVkTW9kZWxzLFxuXHRcdFx0XHRcdFx0XHRvbGRTZWxlY3RlZE1vZGVscyA6IG9sZFNlbGVjdGVkTW9kZWxzXG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSBlbHNlIHRoaXMudHJpZ2dlciggXCJzZWxlY3Rpb25DaGFuZ2VkXCIsIG5ld1NlbGVjdGVkTW9kZWxzLCBvbGRTZWxlY3RlZE1vZGVscyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy51cGRhdGVEZXBlbmRlbnRDb250cm9scygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXRTZWxlY3RlZE1vZGVsIDogZnVuY3Rpb24oIG5ld1NlbGVjdGVkSXRlbSwgb3B0aW9ucyApIHtcblx0XHRcdGlmKCAhIG5ld1NlbGVjdGVkSXRlbSAmJiBuZXdTZWxlY3RlZEl0ZW0gIT09IDAgKVxuXHRcdFx0XHR0aGlzLnNldFNlbGVjdGVkTW9kZWxzKCBbXSwgb3B0aW9ucyApO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzLnNldFNlbGVjdGVkTW9kZWxzKCBbIG5ld1NlbGVjdGVkSXRlbSBdLCBvcHRpb25zICk7XG5cdFx0fSxcblxuXHRcdGdldFZpZXcgOiBmdW5jdGlvbiggcmVmZXJlbmNlLCBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucyA9IF8uZXh0ZW5kKCB7fSwge1xuXHRcdFx0XHRieSA6IGtEZWZhdWx0UmVmZXJlbmNlQnlcblx0XHRcdH0sIG9wdGlvbnMgKTtcblxuXHRcdFx0c3dpdGNoKCBvcHRpb25zLmJ5ICkge1xuXHRcdFx0XHRjYXNlIFwiaWRcIiA6XG5cdFx0XHRcdGNhc2UgXCJjaWRcIiA6XG5cdFx0XHRcdFx0dmFyIG1vZGVsID0gdGhpcy5jb2xsZWN0aW9uLmdldCggcmVmZXJlbmNlICkgfHwgbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gbW9kZWwgJiYgdGhpcy52aWV3TWFuYWdlci5maW5kQnlNb2RlbCggbW9kZWwgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm9mZnNldFwiIDpcblx0XHRcdFx0XHR2YXIgaXRlbUVsZW1lbnRzID0gdGhpcy5fZ2V0VmlzaWJsZUl0ZW1FbHMoKTtcblx0XHRcdFx0XHRyZXR1cm4gJCggaXRlbUVsZW1lbnRzLmdldCggcmVmZXJlbmNlICkgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm1vZGVsXCIgOlxuXHRcdFx0XHRcdHJldHVybiB0aGlzLnZpZXdNYW5hZ2VyLmZpbmRCeU1vZGVsKCByZWZlcmVuY2UgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdCA6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcIkludmFsaWQgcmVmZXJlbmNlQnkgb3B0aW9uOiBcIiArIHJlZmVyZW5jZUJ5ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHJlbmRlciA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdFx0dGhpcy5faGFzQmVlblJlbmRlcmVkID0gdHJ1ZTtcblxuXHRcdFx0aWYoIHRoaXMuc2VsZWN0YWJsZSApIHRoaXMuX3NhdmVTZWxlY3Rpb24oKTtcblxuXHRcdFx0dmFyIG1vZGVsVmlld0NvbnRhaW5lckVsO1xuXG5cdFx0XHQvLyBJZiBjb2xsZWN0aW9uIHZpZXcgZWxlbWVudCBpcyBhIHRhYmxlIGFuZCBpdCBoYXMgYSB0Ym9keVxuXHRcdFx0Ly8gd2l0aGluIGl0LCByZW5kZXIgdGhlIG1vZGVsIHZpZXdzIGluc2lkZSBvZiB0aGUgdGJvZHlcblx0XHRcdG1vZGVsVmlld0NvbnRhaW5lckVsID0gdGhpcy5fZ2V0Q29udGFpbmVyRWwoKTtcblxuXHRcdFx0dmFyIG9sZFZpZXdNYW5hZ2VyID0gdGhpcy52aWV3TWFuYWdlcjtcblx0XHRcdHRoaXMudmlld01hbmFnZXIgPSBuZXcgQ2hpbGRWaWV3Q29udGFpbmVyKCk7XG5cblx0XHRcdC8vIGRldGFjaCBlYWNoIG9mIG91ciBzdWJ2aWV3cyB0aGF0IHdlIGhhdmUgYWxyZWFkeSBjcmVhdGVkIHRvIHJlcHJlc2VudCBtb2RlbHNcblx0XHRcdC8vIGluIHRoZSBjb2xsZWN0aW9uLiBXZSBhcmUgZ29pbmcgdG8gcmUtdXNlIHRoZSBvbmVzIHRoYXQgcmVwcmVzZW50IG1vZGVscyB0aGF0XG5cdFx0XHQvLyBhcmUgc3RpbGwgaGVyZSwgaW5zdGVhZCBvZiBjcmVhdGluZyBuZXcgb25lcywgc28gdGhhdCB3ZSBkb24ndCBsb29zZSBzdGF0ZVxuXHRcdFx0Ly8gaW5mb3JtYXRpb24gaW4gdGhlIHZpZXdzLlxuXHRcdFx0b2xkVmlld01hbmFnZXIuZWFjaCggZnVuY3Rpb24oIHRoaXNNb2RlbFZpZXcgKSB7XG5cdFx0XHRcdC8vIHRvIGJvb3N0IHBlcmZvcm1hbmNlLCBvbmx5IGRldGFjaCB0aG9zZSB2aWV3cyB0aGF0IHdpbGwgYmUgc3RpY2tpbmcgYXJvdW5kLlxuXHRcdFx0XHQvLyB3ZSB3b24ndCBuZWVkIHRoZSBvdGhlciBvbmVzIGxhdGVyLCBzbyBubyBuZWVkIHRvIGRldGFjaCB0aGVtIGluZGl2aWR1YWxseS5cblx0XHRcdFx0aWYoIHRoaXMucmV1c2VNb2RlbFZpZXdzICYmIHRoaXMuY29sbGVjdGlvbi5nZXQoIHRoaXNNb2RlbFZpZXcubW9kZWwuY2lkICkgKSB7XG5cdFx0XHRcdFx0dGhpc01vZGVsVmlldy4kZWwuZGV0YWNoKCk7XG5cdFx0XHRcdH0gZWxzZSB0aGlzTW9kZWxWaWV3LnJlbW92ZSgpO1xuXHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0XHRtb2RlbFZpZXdDb250YWluZXJFbC5lbXB0eSgpO1xuXHRcdFx0dmFyIGZyYWdtZW50Q29udGFpbmVyO1xuXG5cdFx0XHRpZiggdGhpcy5kZXRhY2hlZFJlbmRlcmluZyApXG5cdFx0XHRcdGZyYWdtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG5cdFx0XHR0aGlzLmNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIHRoaXNNb2RlbCApIHtcblx0XHRcdFx0dmFyIHRoaXNNb2RlbFZpZXcgPSBvbGRWaWV3TWFuYWdlci5maW5kQnlNb2RlbENpZCggdGhpc01vZGVsLmNpZCApO1xuXHRcdFx0XHRpZiggISB0aGlzLnJldXNlTW9kZWxWaWV3cyB8fCBfLmlzVW5kZWZpbmVkKCB0aGlzTW9kZWxWaWV3ICkgKSB7XG5cdFx0XHRcdFx0Ly8gaWYgdGhlIG1vZGVsIHZpZXcgaGFzIG5vdCBhbHJlYWR5IGJlZW4gY3JlYXRlZCBvbiBhXG5cdFx0XHRcdFx0Ly8gcHJldmlvdXMgcmVuZGVyIHRoZW4gY3JlYXRlIGFuZCBpbml0aWFsaXplIGl0IG5vdy5cblx0XHRcdFx0XHR0aGlzTW9kZWxWaWV3ID0gdGhpcy5fY3JlYXRlTmV3TW9kZWxWaWV3KCB0aGlzTW9kZWwsIHRoaXMuX2dldE1vZGVsVmlld09wdGlvbnMoIHRoaXNNb2RlbCApICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9pbnNlcnRBbmRSZW5kZXJNb2RlbFZpZXcoIHRoaXNNb2RlbFZpZXcsIGZyYWdtZW50Q29udGFpbmVyIHx8IG1vZGVsVmlld0NvbnRhaW5lckVsICk7XG5cdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdGlmKCB0aGlzLmRldGFjaGVkUmVuZGVyaW5nIClcblx0XHRcdFx0bW9kZWxWaWV3Q29udGFpbmVyRWwuYXBwZW5kKCBmcmFnbWVudENvbnRhaW5lciApO1xuXG5cdFx0XHRpZiggdGhpcy5zb3J0YWJsZSApIHRoaXMuX3NldHVwU29ydGFibGUoKTtcblxuXHRcdFx0dGhpcy5fc2hvd0VtcHR5TGlzdENhcHRpb25JZkFwcHJvcHJpYXRlKCk7XG5cblx0XHRcdGlmKCB0aGlzLl9pc0JhY2tib25lQ291cmllckF2YWlsYWJsZSgpIClcblx0XHRcdFx0dGhpcy5zcGF3biggXCJyZW5kZXJcIiApO1xuXHRcdFx0ZWxzZSB0aGlzLnRyaWdnZXIoIFwicmVuZGVyXCIgKTtcblxuXHRcdFx0aWYoIHRoaXMuc2VsZWN0YWJsZSApIHtcblx0XHRcdFx0dGhpcy5fcmVzdG9yZVNlbGVjdGlvbigpO1xuXHRcdFx0XHR0aGlzLnVwZGF0ZURlcGVuZGVudENvbnRyb2xzKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZm9yY2VSZXJlbmRlck9uTmV4dFNvcnRFdmVudCA9IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRfc2hvd0VtcHR5TGlzdENhcHRpb25JZkFwcHJvcHJpYXRlIDogZnVuY3Rpb24gKCApIHtcblx0XHRcdHRoaXMuX3JlbW92ZUVtcHR5TGlzdENhcHRpb24oKTtcblxuXHRcdFx0aWYoIHRoaXMuZW1wdHlMaXN0Q2FwdGlvbiApIHtcblx0XHRcdFx0dmFyIHZpc2libGVFbHMgPSB0aGlzLl9nZXRWaXNpYmxlSXRlbUVscygpO1xuXG5cdFx0XHRcdGlmKCB2aXNpYmxlRWxzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHR2YXIgZW1wdHlMaXN0U3RyaW5nO1xuXG5cdFx0XHRcdFx0aWYoIF8uaXNGdW5jdGlvbiggdGhpcy5lbXB0eUxpc3RDYXB0aW9uICkgKVxuXHRcdFx0XHRcdFx0ZW1wdHlMaXN0U3RyaW5nID0gdGhpcy5lbXB0eUxpc3RDYXB0aW9uKCk7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZW1wdHlMaXN0U3RyaW5nID0gdGhpcy5lbXB0eUxpc3RDYXB0aW9uO1xuXG5cdFx0XHRcdFx0dmFyICRlbXB0eUxpc3RDYXB0aW9uRWw7XG5cdFx0XHRcdFx0dmFyICR2YXJFbCA9ICQoIFwiPHZhciBjbGFzcz0nZW1wdHktbGlzdC1jYXB0aW9uJz5cIiArIGVtcHR5TGlzdFN0cmluZyArIFwiPC92YXI+XCIgKTtcblxuXHRcdFx0XHRcdC8vIG5lZWQgdG8gd3JhcCB0aGUgZW1wdHkgY2FwdGlvbiB0byBtYWtlIGl0IGZpdCB0aGUgcmVuZGVyZWQgbGlzdCBzdHJ1Y3R1cmUgKGVpdGhlciB3aXRoIGFuIGxpIG9yIGEgdHIgdGQpXG5cdFx0XHRcdFx0aWYoIHRoaXMuX2lzUmVuZGVyZWRBc0xpc3QoKSApXG5cdFx0XHRcdFx0XHQkZW1wdHlMaXN0Q2FwdGlvbkVsID0gJHZhckVsLndyYXBBbGwoIFwiPGxpIGNsYXNzPSdub3Qtc29ydGFibGUnPjwvbGk+XCIgKS5wYXJlbnQoKS5jc3MoIGtTdHlsZXNGb3JFbXB0eUxpc3RDYXB0aW9uICk7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0JGVtcHR5TGlzdENhcHRpb25FbCA9ICR2YXJFbC53cmFwQWxsKCBcIjx0ciBjbGFzcz0nbm90LXNvcnRhYmxlJz48dGQgY29sc3Bhbj0nMTAwMCc+PC90ZD48L3RyPlwiICkucGFyZW50KCkucGFyZW50KCkuY3NzKCBrU3R5bGVzRm9yRW1wdHlMaXN0Q2FwdGlvbiApO1xuXG5cdFx0XHRcdFx0dGhpcy5fZ2V0Q29udGFpbmVyRWwoKS5hcHBlbmQoICRlbXB0eUxpc3RDYXB0aW9uRWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfcmVtb3ZlRW1wdHlMaXN0Q2FwdGlvbiA6IGZ1bmN0aW9uKCApIHtcblx0XHRcdGlmKCB0aGlzLl9pc1JlbmRlcmVkQXNMaXN0KCkgKVxuXHRcdFx0XHR0aGlzLl9nZXRDb250YWluZXJFbCgpLmZpbmQoIFwiPiBsaSA+IHZhci5lbXB0eS1saXN0LWNhcHRpb25cIiApLnBhcmVudCgpLnJlbW92ZSgpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzLl9nZXRDb250YWluZXJFbCgpLmZpbmQoIFwiPiB0ciA+IHRkID4gdmFyLmVtcHR5LWxpc3QtY2FwdGlvblwiICkucGFyZW50KCkucGFyZW50KCkucmVtb3ZlKCk7XG5cdFx0fSxcblxuXHRcdC8vIFJlbmRlciBhIHNpbmdsZSBtb2RlbCB2aWV3IGluIGNvbnRhaW5lciBvYmplY3QgXCJwYXJlbnRFbE9yRG9jdW1lbnRGcmFnbWVudFwiLCB3aGljaCBpcyBlaXRoZXJcblx0XHQvLyBhIGRvY3VtZW50RnJhZ21lbnQgb3IgYSBqcXVlcnkgb2JqZWN0LiBvcHRpb25hbCBhcmcgYXRJbmRleCBpcyBub3Qgc3VwcG9ydCBmb3IgZG9jdW1lbnQgZnJhZ21lbnRzLlxuXHRcdF9pbnNlcnRBbmRSZW5kZXJNb2RlbFZpZXcgOiBmdW5jdGlvbiggbW9kZWxWaWV3LCBwYXJlbnRFbE9yRG9jdW1lbnRGcmFnbWVudCwgYXRJbmRleCApIHtcblx0XHRcdHZhciB0aGlzTW9kZWxWaWV3V3JhcHBlZCA9IHRoaXMuX3dyYXBNb2RlbFZpZXcoIG1vZGVsVmlldyApO1xuXG5cdFx0XHRpZiggcGFyZW50RWxPckRvY3VtZW50RnJhZ21lbnQubm9kZVR5cGUgPT09IDExICkgLy8gaWYgd2UgYXJlIGluc2VydGluZyBpbnRvIGEgZG9jdW1lbnQgZnJhZ21lbnQsIHdlIG5lZWQgdG8gdXNlIHRoZSBET00gYXBwZW5kQ2hpbGQgbWV0aG9kXG5cdFx0XHRcdHBhcmVudEVsT3JEb2N1bWVudEZyYWdtZW50LmFwcGVuZENoaWxkKCB0aGlzTW9kZWxWaWV3V3JhcHBlZC5nZXQoIDAgKSApO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHZhciBudW1iZXJPZk1vZGVsVmlld3NDdXJyZW50bHlJbkRPTSA9IHBhcmVudEVsT3JEb2N1bWVudEZyYWdtZW50LmNoaWxkcmVuKCkubGVuZ3RoO1xuXHRcdFx0XHRpZiggISBfLmlzVW5kZWZpbmVkKCBhdEluZGV4ICkgJiYgYXRJbmRleCA+PSAwICYmIGF0SW5kZXggPCBudW1iZXJPZk1vZGVsVmlld3NDdXJyZW50bHlJbkRPTSApXG5cdFx0XHRcdFx0Ly8gbm90ZSB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoIG1pZ2h0IGJlIGdyZWF0ZXIgdGhhbiBwYXJlbnRFbE9yRG9jdW1lbnRGcmFnbWVudC5jaGlsZHJlbigpLmxlbmd0aCBoZXJlXG5cdFx0XHRcdFx0cGFyZW50RWxPckRvY3VtZW50RnJhZ21lbnQuY2hpbGRyZW4oKS5lcSggYXRJbmRleCApLmJlZm9yZSggdGhpc01vZGVsVmlld1dyYXBwZWQgKTtcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaWYgd2UgYXJlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IGEgbW9kZWxWaWV3IGluIGFuIHBvc2l0aW9uIHRoYXQgaXMgYmV5b25kIHdoYXQgaXMgY3VycmVudGx5IGluIHRoZVxuXHRcdFx0XHRcdC8vIERPTSwgdGhlbiBtYWtlIGEgbm90ZSB0aGF0IHdlIG5lZWQgdG8gcmUtcmVuZGVyIHRoZSBjb2xsZWN0aW9uIHZpZXcgb24gdGhlIG5leHQgc29ydCBldmVudC4gSWYgd2UgZG9udFxuXHRcdFx0XHRcdC8vIGZvcmNlIHRoaXMgcmUtcmVuZGVyLCB3ZSBjYW4gZW5kIHVwIHdpdGggbW9kZWxWaWV3cyBpbiB0aGUgd3Jvbmcgb3JkZXIgd2hlbiB0aGUgY29sbGVjdGlvbiBkZWZpbmVzXG5cdFx0XHRcdFx0Ly8gYSBjb21wYXJhdG9yIGFuZCBtdWx0aXBsZSBtb2RlbHMgYXJlIGFkZGVkIGF0IG9uY2UuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcm90dW5kYXNvZnR3YXJlL2JhY2tib25lLmNvbGxlY3Rpb25WaWV3L2lzc3Vlcy82OVxuXHRcdFx0XHRcdGlmKCAhIF8uaXNVbmRlZmluZWQoIGF0SW5kZXggKSAmJiBhdEluZGV4ID4gbnVtYmVyT2ZNb2RlbFZpZXdzQ3VycmVudGx5SW5ET00gKSB0aGlzLmZvcmNlUmVyZW5kZXJPbk5leHRTb3J0RXZlbnQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0cGFyZW50RWxPckRvY3VtZW50RnJhZ21lbnQuYXBwZW5kKCB0aGlzTW9kZWxWaWV3V3JhcHBlZCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudmlld01hbmFnZXIuYWRkKCBtb2RlbFZpZXcgKTtcblxuXHRcdFx0Ly8gd2UgaGF2ZSB0byByZW5kZXIgdGhlIG1vZGVsVmlldyBhZnRlciBpdCBoYXMgYmVlbiBwdXQgaW4gY29udGV4dCwgYXMgb3Bwb3NlZCB0byBpbiB0aGVcblx0XHRcdC8vIGluaXRpYWxpemUgZnVuY3Rpb24gb2YgdGhlIG1vZGVsVmlldywgYmVjYXVzZSBzb21lIHJlbmRlcmluZyBtaWdodCBiZSBkZXBlbmRlbnQgb25cblx0XHRcdC8vIHRoZSBtb2RlbFZpZXcncyBjb250ZXh0IGluIHRoZSBET00gdHJlZS4gRm9yIGV4YW1wbGUsIGlmIHRoZSBtb2RlbFZpZXcgc3RyZXRjaCgpJ3MgaXRzZWxmLFxuXHRcdFx0Ly8gaXQgbXVzdCBiZSBpbiBmdWxsIGNvbnRleHQgaW4gdGhlIERPTSB0cmVlIG9yIGVsc2UgdGhlIHN0cmV0Y2ggd2lsbCBub3QgYmVoYXZlIGFzIGludGVuZGVkLlxuXHRcdFx0dmFyIHJlbmRlclJlc3VsdCA9IG1vZGVsVmlldy5yZW5kZXIoKTtcblxuXHRcdFx0Ly8gcmV0dXJuIGZhbHNlIGZyb20gdGhlIHZpZXcncyByZW5kZXIgZnVuY3Rpb24gdG8gaGlkZSB0aGlzIGl0ZW1cblx0XHRcdGlmKCByZW5kZXJSZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHR0aGlzTW9kZWxWaWV3V3JhcHBlZC5oaWRlKCk7XG5cdFx0XHRcdHRoaXNNb2RlbFZpZXdXcmFwcGVkLmFkZENsYXNzKCBcIm5vdC12aXNpYmxlXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGhpZGVUaGlzTW9kZWxWaWV3ID0gZmFsc2U7XG5cdFx0XHRpZiggXy5pc0Z1bmN0aW9uKCB0aGlzLnZpc2libGVNb2RlbHNGaWx0ZXIgKSApXG5cdFx0XHRcdGhpZGVUaGlzTW9kZWxWaWV3ID0gISB0aGlzLnZpc2libGVNb2RlbHNGaWx0ZXIoIG1vZGVsVmlldy5tb2RlbCApO1xuXG5cdFx0XHRpZiggdGhpc01vZGVsVmlld1dyYXBwZWQuY2hpbGRyZW4oKS5sZW5ndGggPT09IDEgKVxuXHRcdFx0XHR0aGlzTW9kZWxWaWV3V3JhcHBlZC50b2dnbGUoICEgaGlkZVRoaXNNb2RlbFZpZXcgKTtcblx0XHRcdGVsc2UgbW9kZWxWaWV3LiRlbC50b2dnbGUoICEgaGlkZVRoaXNNb2RlbFZpZXcgKTtcblxuXHRcdFx0dGhpc01vZGVsVmlld1dyYXBwZWQudG9nZ2xlQ2xhc3MoIFwibm90LXZpc2libGVcIiwgaGlkZVRoaXNNb2RlbFZpZXcgKTtcblxuXHRcdFx0aWYoICEgaGlkZVRoaXNNb2RlbFZpZXcgJiYgdGhpcy5lbXB0eUxpc3RDYXB0aW9uICkgdGhpcy5fcmVtb3ZlRW1wdHlMaXN0Q2FwdGlvbigpO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVEZXBlbmRlbnRDb250cm9scyA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoIHRoaXMuX2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlKCkgKSB7XG5cdFx0XHRcdHRoaXMuc3Bhd24oIFwidXBkYXRlRGVwZW5kZW50Q29udHJvbHNcIiwge1xuXHRcdFx0XHRcdHNlbGVjdGVkTW9kZWxzIDogdGhpcy5nZXRTZWxlY3RlZE1vZGVscygpXG5cdFx0XHRcdH0gKTtcblx0XHRcdH0gZWxzZSB0aGlzLnRyaWdnZXIoIFwidXBkYXRlRGVwZW5kZW50Q29udHJvbHNcIiwgdGhpcy5nZXRTZWxlY3RlZE1vZGVscygpICk7XG5cdFx0fSxcblxuXHRcdC8vIE92ZXJyaWRlIGBCYWNrYm9uZS5WaWV3LnJlbW92ZWAgdG8gYWxzbyBkZXN0cm95IGFsbCBWaWV3cyBpbiBgdmlld01hbmFnZXJgXG5cdFx0cmVtb3ZlIDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnZpZXdNYW5hZ2VyLmVhY2goIGZ1bmN0aW9uKCB2aWV3ICkge1xuXHRcdFx0XHR2aWV3LnJlbW92ZSgpO1xuXHRcdFx0fSApO1xuXG5cdFx0XHRCYWNrYm9uZS5WaWV3LnByb3RvdHlwZS5yZW1vdmUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH0sXG5cblx0XHRyZWFwcGx5RmlsdGVyIDogZnVuY3Rpb24oIHdoaWNoRmlsdGVyICkge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdFx0aWYoICEgXy5jb250YWlucyggWyBcInNlbGVjdGFibGVNb2RlbHNcIiwgXCJzb3J0YWJsZU1vZGVsc1wiLCBcInZpc2libGVNb2RlbHNcIiBdLCB3aGljaEZpbHRlciApICkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiSW52YWxpZCBmaWx0ZXIgaWRlbnRpZmllciBzdXBwbGllZCB0byByZWFwcGx5RmlsdGVyOiBcIiArIHdoaWNoRmlsdGVyICk7XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCggd2hpY2hGaWx0ZXIgKSB7XG5cdFx0XHRcdGNhc2UgXCJ2aXNpYmxlTW9kZWxzXCI6XG5cdFx0XHRcdFx0X3RoaXMudmlld01hbmFnZXIuZWFjaCggZnVuY3Rpb24oIHRoaXNNb2RlbFZpZXcgKSB7XG5cdFx0XHRcdFx0XHR2YXIgbm90VmlzaWJsZSA9IF90aGlzLnZpc2libGVNb2RlbHNGaWx0ZXIgJiYgISBfdGhpcy52aXNpYmxlTW9kZWxzRmlsdGVyLmNhbGwoIF90aGlzLCB0aGlzTW9kZWxWaWV3Lm1vZGVsICk7XG5cblx0XHRcdFx0XHRcdHRoaXNNb2RlbFZpZXcuJGVsLnRvZ2dsZUNsYXNzKCBcIm5vdC12aXNpYmxlXCIsIG5vdFZpc2libGUgKTtcblx0XHRcdFx0XHRcdGlmKCBfdGhpcy5fbW9kZWxWaWV3SGFzV3JhcHBlckxJKCB0aGlzTW9kZWxWaWV3ICkgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXNNb2RlbFZpZXcuJGVsLmNsb3Nlc3QoIFwibGlcIiApLnRvZ2dsZUNsYXNzKCBcIm5vdC12aXNpYmxlXCIsIG5vdFZpc2libGUgKS50b2dnbGUoICEgbm90VmlzaWJsZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHRoaXNNb2RlbFZpZXcuJGVsLnRvZ2dsZSggISBub3RWaXNpYmxlICk7XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0dGhpcy5fc2hvd0VtcHR5TGlzdENhcHRpb25JZkFwcHJvcHJpYXRlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJzb3J0YWJsZU1vZGVsc1wiOlxuXHRcdFx0XHRcdF90aGlzLiRlbC5zb3J0YWJsZSggXCJkZXN0cm95XCIgKTtcblxuXHRcdFx0XHRcdF90aGlzLnZpZXdNYW5hZ2VyLmVhY2goIGZ1bmN0aW9uKCB0aGlzTW9kZWxWaWV3ICkge1xuXHRcdFx0XHRcdFx0dmFyIG5vdFNvcnRhYmxlID0gX3RoaXMuc29ydGFibGVNb2RlbHNGaWx0ZXIgJiYgISBfdGhpcy5zb3J0YWJsZU1vZGVsc0ZpbHRlci5jYWxsKCBfdGhpcywgdGhpc01vZGVsVmlldy5tb2RlbCApO1xuXG5cdFx0XHRcdFx0XHR0aGlzTW9kZWxWaWV3LiRlbC50b2dnbGVDbGFzcyggXCJub3Qtc29ydGFibGVcIiwgbm90U29ydGFibGUgKTtcblx0XHRcdFx0XHRcdGlmKCBfdGhpcy5fbW9kZWxWaWV3SGFzV3JhcHBlckxJKCB0aGlzTW9kZWxWaWV3ICkgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXNNb2RlbFZpZXcuJGVsLmNsb3Nlc3QoIFwibGlcIiApLnRvZ2dsZUNsYXNzKCBcIm5vdC1zb3J0YWJsZVwiLCBub3RTb3J0YWJsZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdF90aGlzLl9zZXR1cFNvcnRhYmxlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJzZWxlY3RhYmxlTW9kZWxzXCI6XG5cdFx0XHRcdFx0X3RoaXMudmlld01hbmFnZXIuZWFjaCggZnVuY3Rpb24oIHRoaXNNb2RlbFZpZXcgKSB7XG5cdFx0XHRcdFx0XHR2YXIgbm90U2VsZWN0YWJsZSA9IF90aGlzLnNlbGVjdGFibGVNb2RlbHNGaWx0ZXIgJiYgISBfdGhpcy5zZWxlY3RhYmxlTW9kZWxzRmlsdGVyLmNhbGwoIF90aGlzLCB0aGlzTW9kZWxWaWV3Lm1vZGVsICk7XG5cblx0XHRcdFx0XHRcdHRoaXNNb2RlbFZpZXcuJGVsLnRvZ2dsZUNsYXNzKCBcIm5vdC1zZWxlY3RhYmxlXCIsIG5vdFNlbGVjdGFibGUgKTtcblx0XHRcdFx0XHRcdGlmKCBfdGhpcy5fbW9kZWxWaWV3SGFzV3JhcHBlckxJKCB0aGlzTW9kZWxWaWV3ICkgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXNNb2RlbFZpZXcuJGVsLmNsb3Nlc3QoIFwibGlcIiApLnRvZ2dsZUNsYXNzKCBcIm5vdC1zZWxlY3RhYmxlXCIsIG5vdFNlbGVjdGFibGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRfdGhpcy5fdmFsaWRhdGVTZWxlY3Rpb24oKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQSBtZXRob2QgdG8gcmVtb3ZlIHRoZSB2aWV3IHJlbGF0aW5nIHRvIG1vZGVsLlxuXHRcdF9yZW1vdmVNb2RlbFZpZXcgOiBmdW5jdGlvbiggbW9kZWxWaWV3ICkge1xuXHRcdFx0aWYoIHRoaXMuc2VsZWN0YWJsZSApIHRoaXMuX3NhdmVTZWxlY3Rpb24oKTtcblxuXHRcdFx0dGhpcy52aWV3TWFuYWdlci5yZW1vdmUoIG1vZGVsVmlldyApOyAvLyBSZW1vdmUgdGhlIHZpZXcgZnJvbSB0aGUgdmlld01hbmFnZXJcblx0XHRcdGlmKCB0aGlzLl9tb2RlbFZpZXdIYXNXcmFwcGVyTEkoIG1vZGVsVmlldyApICkgbW9kZWxWaWV3LiRlbC5wYXJlbnQoKS5yZW1vdmUoKTsgLy8gUmVtb3ZlIHRoZSBsaSB3cmFwcGVyIGZyb20gdGhlIERPTVxuXHRcdFx0bW9kZWxWaWV3LnJlbW92ZSgpOyAvLyBSZW1vdmUgdGhlIHZpZXcgZnJvbSB0aGUgRE9NIGFuZCBzdG9wIGxpc3RlbmluZyB0byBldmVudHNcblxuXHRcdFx0aWYoIHRoaXMuc2VsZWN0YWJsZSApIHRoaXMuX3Jlc3RvcmVTZWxlY3Rpb24oKTtcblxuXHRcdFx0dGhpcy5fc2hvd0VtcHR5TGlzdENhcHRpb25JZkFwcHJvcHJpYXRlKCk7XG5cdFx0fSxcblxuXHRcdF92YWxpZGF0ZVNlbGVjdGlvbkFuZFJlbmRlciA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fdmFsaWRhdGVTZWxlY3Rpb24oKTtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblxuXHRcdF9yZWdpc3RlckNvbGxlY3Rpb25FdmVudHMgOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5jb2xsZWN0aW9uLCBcImFkZFwiLCBmdW5jdGlvbiggbW9kZWwgKSB7XG5cdFx0XHRcdHZhciBtb2RlbFZpZXc7XG5cdFx0XHRcdGlmKCB0aGlzLl9oYXNCZWVuUmVuZGVyZWQgKSB7XG5cdFx0XHRcdFx0bW9kZWxWaWV3ID0gdGhpcy5fY3JlYXRlTmV3TW9kZWxWaWV3KCBtb2RlbCwgdGhpcy5fZ2V0TW9kZWxWaWV3T3B0aW9ucyggbW9kZWwgKSApO1xuXHRcdFx0XHRcdHRoaXMuX2luc2VydEFuZFJlbmRlck1vZGVsVmlldyggbW9kZWxWaWV3LCB0aGlzLl9nZXRDb250YWluZXJFbCgpLCB0aGlzLmNvbGxlY3Rpb24uaW5kZXhPZiggbW9kZWwgKSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIHRoaXMuX2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlKCkgKVxuXHRcdFx0XHRcdHRoaXMuc3Bhd24oIFwiYWRkXCIsIG1vZGVsVmlldyApO1xuXHRcdFx0XHRlbHNlIHRoaXMudHJpZ2dlciggXCJhZGRcIiwgbW9kZWxWaWV3ICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMubGlzdGVuVG8oIHRoaXMuY29sbGVjdGlvbiwgXCJyZW1vdmVcIiwgZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0XHR2YXIgbW9kZWxWaWV3O1xuXG5cdFx0XHRcdGlmKCB0aGlzLl9oYXNCZWVuUmVuZGVyZWQgKSB7XG5cdFx0XHRcdFx0bW9kZWxWaWV3ID0gdGhpcy52aWV3TWFuYWdlci5maW5kQnlNb2RlbENpZCggbW9kZWwuY2lkICk7XG5cdFx0XHRcdFx0dGhpcy5fcmVtb3ZlTW9kZWxWaWV3KCBtb2RlbFZpZXcgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKCB0aGlzLl9pc0JhY2tib25lQ291cmllckF2YWlsYWJsZSgpIClcblx0XHRcdFx0XHR0aGlzLnNwYXduKCBcInJlbW92ZVwiICk7XG5cdFx0XHRcdGVsc2UgdGhpcy50cmlnZ2VyKCBcInJlbW92ZVwiICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMubGlzdGVuVG8oIHRoaXMuY29sbGVjdGlvbiwgXCJyZXNldFwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoIHRoaXMuX2hhc0JlZW5SZW5kZXJlZCApIHRoaXMucmVuZGVyKCk7XG5cdFx0XHRcdGlmKCB0aGlzLl9pc0JhY2tib25lQ291cmllckF2YWlsYWJsZSgpIClcblx0XHRcdFx0XHR0aGlzLnNwYXduKCBcInJlc2V0XCIgKTtcblx0XHRcdFx0ZWxzZSB0aGlzLnRyaWdnZXIoIFwicmVzZXRcIiApO1xuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyB3ZSBzaG91bGQgbm90IGJlIGxpc3RlbmluZyB0byBjaGFuZ2UgZXZlbnRzIG9uIHRoZSBtb2RlbCBhcyBhIGRlZmF1bHQgYmVoYXZpb3IuIHRoZSBtb2RlbHNcblx0XHRcdC8vIHNob3VsZCBiZSByZXNwb25zaWJsZSBmb3IgcmUtcmVuZGVyaW5nIHRoZW1zZWx2ZXMgaWYgbmVjZXNzYXJ5LCBhbmQgaWYgdGhlIGNvbGxlY3Rpb24gZG9lc1xuXHRcdFx0Ly8gYWxzbyBuZWVkIHRvIHJlLXJlbmRlciBhcyBhIHJlc3VsdCBvZiBhIG1vZGVsIGNoYW5nZSwgdGhpcyBzaG91bGQgYmUgaGFuZGxlZCBieSBvdmVycmlkaW5nXG5cdFx0XHQvLyB0aGlzIG1ldGhvZC4gYnkgZGVmYXVsdCB0aGUgY29sbGVjdGlvbiB2aWV3IHNob3VsZCBub3QgcmUtcmVuZGVyIGluIHJlc3BvbnNlIHRvIG1vZGVsIGNoYW5nZXNcblx0XHRcdC8vIHRoaXMubGlzdGVuVG8oIHRoaXMuY29sbGVjdGlvbiwgXCJjaGFuZ2VcIiwgZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0Ly8gXHRpZiggdGhpcy5faGFzQmVlblJlbmRlcmVkICkgdGhpcy52aWV3TWFuYWdlci5maW5kQnlNb2RlbCggbW9kZWwgKS5yZW5kZXIoKTtcblx0XHRcdC8vIFx0aWYoIHRoaXMuX2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlKCkgKVxuXHRcdFx0Ly8gXHRcdHRoaXMuc3Bhd24oIFwiY2hhbmdlXCIsIHsgbW9kZWwgOiBtb2RlbCB9ICk7XG5cdFx0XHQvLyB9ICk7XG5cblx0XHRcdHRoaXMubGlzdGVuVG8oIHRoaXMuY29sbGVjdGlvbiwgXCJzb3J0XCIsIGZ1bmN0aW9uKCBjb2xsZWN0aW9uLCBvcHRpb25zICkge1xuXHRcdFx0XHRpZiggdGhpcy5faGFzQmVlblJlbmRlcmVkICYmICggb3B0aW9ucy5hZGQgIT09IHRydWUgfHwgdGhpcy5mb3JjZVJlcmVuZGVyT25OZXh0U29ydEV2ZW50ICkgKSB0aGlzLnJlbmRlcigpO1xuXHRcdFx0XHRpZiggdGhpcy5faXNCYWNrYm9uZUNvdXJpZXJBdmFpbGFibGUoKSApXG5cdFx0XHRcdFx0dGhpcy5zcGF3biggXCJzb3J0XCIgKTtcblx0XHRcdFx0ZWxzZSB0aGlzLnRyaWdnZXIoIFwic29ydFwiICk7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdF9nZXRDb250YWluZXJFbCA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0aGlzLl9pc1JlbmRlcmVkQXNUYWJsZSgpICkge1xuXHRcdFx0XHQvLyBub3QgYWxsIHRhYmxlcyBoYXZlIGEgdGJvZHksIHNvIHdlIHRlc3Rcblx0XHRcdFx0dmFyIHRib2R5ID0gdGhpcy4kZWwuZmluZCggXCI+IHRib2R5XCIgKTtcblx0XHRcdFx0aWYgKCB0Ym9keS5sZW5ndGggPiAwIClcblx0XHRcdFx0XHRyZXR1cm4gdGJvZHk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy4kZWw7XG5cdFx0fSxcblxuXHRcdF9nZXRDbGlja2VkSXRlbUlkIDogZnVuY3Rpb24oIHRoZUV2ZW50ICkge1xuXHRcdFx0dmFyIGNsaWNrZWRJdGVtSWQgPSBudWxsO1xuXG5cdFx0XHQvLyBpbXBvcnRhbnQgdG8gdXNlIGN1cnJlbnRUYXJnZXQgYXMgb3Bwb3NlZCB0byB0YXJnZXQsIHNpbmNlIHdlIGNvdWxkIGJlIGJ1YmJsaW5nXG5cdFx0XHQvLyBhbiBldmVudCB0aGF0IHRvb2sgcGxhY2Ugd2l0aGluIGFub3RoZXIgY29sbGVjdGlvbkxpc3Rcblx0XHRcdHZhciBjbGlja2VkSXRlbUVsID0gJCggdGhlRXZlbnQuY3VycmVudFRhcmdldCApO1xuXHRcdFx0aWYoIGNsaWNrZWRJdGVtRWwuY2xvc2VzdCggXCIuY29sbGVjdGlvbi12aWV3XCIgKS5nZXQoMCkgIT09IHRoaXMuJGVsLmdldCgwKSApIHJldHVybjtcblxuXHRcdFx0Ly8gZGV0ZXJtaW5lIHdoaWNoIGxpc3QgaXRlbSB3YXMgY2xpY2tlZC4gSWYgd2UgY2xpY2tlZCBpbiB0aGUgYmxhbmsgYXJlYVxuXHRcdFx0Ly8gdW5kZXJuZWF0aCBhbGwgdGhlIGVsZW1lbnRzLCB3ZSB3YW50IHRvIGtub3cgdGhhdCB0b28sIHNpbmNlIGluIHRoaXNcblx0XHRcdC8vIGNhc2Ugd2Ugd2lsbCB3YW50IHRvIGRlc2VsZWN0IGFsbCBlbGVtZW50cy4gc28gY2hlY2sgdG8gc2VlIGlmIHRoZSBjbGlja2VkXG5cdFx0XHQvLyBET00gZWxlbWVudCBpcyB0aGUgbGlzdCBpdHNlbGYgdG8gZmluZCB0aGF0IG91dC5cblx0XHRcdHZhciBjbGlja2VkSXRlbSA9IGNsaWNrZWRJdGVtRWwuY2xvc2VzdCggXCJbZGF0YS1tb2RlbC1jaWRdXCIgKTtcblx0XHRcdGlmKCBjbGlja2VkSXRlbS5sZW5ndGggPiAwIClcblx0XHRcdHtcblx0XHRcdFx0Y2xpY2tlZEl0ZW1JZCA9IGNsaWNrZWRJdGVtLmF0dHIoIFwiZGF0YS1tb2RlbC1jaWRcIiApO1xuXHRcdFx0XHRpZiggJC5pc051bWVyaWMoIGNsaWNrZWRJdGVtSWQgKSApIGNsaWNrZWRJdGVtSWQgPSBwYXJzZUludCggY2xpY2tlZEl0ZW1JZCwgMTAgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNsaWNrZWRJdGVtSWQ7XG5cdFx0fSxcblxuXHRcdF91cGRhdGVJdGVtVGVtcGxhdGUgOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtVGVtcGxhdGVIdG1sO1xuXHRcdFx0aWYoIHRoaXMuaXRlbVRlbXBsYXRlIClcblx0XHRcdHtcblx0XHRcdFx0aWYoICQoIHRoaXMuaXRlbVRlbXBsYXRlICkubGVuZ3RoID09PSAwIClcblx0XHRcdFx0XHR0aHJvdyBcIkNvdWxkIG5vdCBmaW5kIGl0ZW0gdGVtcGxhdGUgZnJvbSBzZWxlY3RvcjogXCIgKyB0aGlzLml0ZW1UZW1wbGF0ZTtcblxuXHRcdFx0XHRpdGVtVGVtcGxhdGVIdG1sID0gJCggdGhpcy5pdGVtVGVtcGxhdGUgKS5odG1sKCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGl0ZW1UZW1wbGF0ZUh0bWwgPSB0aGlzLiQoIFwiLml0ZW0tdGVtcGxhdGVcIiApLmh0bWwoKTtcblxuXHRcdFx0aWYoIGl0ZW1UZW1wbGF0ZUh0bWwgKSB0aGlzLml0ZW1UZW1wbGF0ZUZ1bmN0aW9uID0gXy50ZW1wbGF0ZSggaXRlbVRlbXBsYXRlSHRtbCApO1xuXG5cdFx0fSxcblxuXHRcdF92YWxpZGF0ZVNlbGVjdGlvbiA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gbm90ZSBjYW4ndCB1c2UgdGhlIGNvbGxlY3Rpb24ncyBwcm94eSB0byB1bmRlcnNjb3JlIGJlY2F1c2UgXCJjaWRcIiBpcyBub3QgYW4gYXR0cmlidXRlLFxuXHRcdFx0Ly8gYnV0IGFuIGVsZW1lbnQgb2YgdGhlIG1vZGVsIG9iamVjdCBpdHNlbGYuXG5cdFx0XHR2YXIgbW9kZWxSZWZlcmVuY2VJZHMgPSBfLnBsdWNrKCB0aGlzLmNvbGxlY3Rpb24ubW9kZWxzLCBcImNpZFwiICk7XG5cdFx0XHR0aGlzLnNlbGVjdGVkSXRlbXMgPSBfLmludGVyc2VjdGlvbiggbW9kZWxSZWZlcmVuY2VJZHMsIHRoaXMuc2VsZWN0ZWRJdGVtcyApO1xuXG5cdFx0XHRpZiggXy5pc0Z1bmN0aW9uKCB0aGlzLnNlbGVjdGFibGVNb2RlbHNGaWx0ZXIgKSApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWRJdGVtcyA9IF8uZmlsdGVyKCB0aGlzLnNlbGVjdGVkSXRlbXMsIGZ1bmN0aW9uKCB0aGlzSXRlbUlkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnNlbGVjdGFibGVNb2RlbHNGaWx0ZXIuY2FsbCggdGhpcywgdGhpcy5jb2xsZWN0aW9uLmdldCggdGhpc0l0ZW1JZCApICk7XG5cdFx0XHRcdH0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X3NhdmVTZWxlY3Rpb24gOiBmdW5jdGlvbigpIHtcblx0XHRcdC8vIHNhdmUgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLiB1c2UgcmVzdG9yZVNlbGVjdGlvbigpIHRvIHJlc3RvcmUgdGhlIHNlbGVjdGlvbiB0byB0aGUgc3RhdGUgaXQgd2FzIGluIHRoZSBsYXN0IHRpbWUgc2F2ZVNlbGVjdGlvbigpIHdhcyBjYWxsZWQuXG5cdFx0XHRpZiggISB0aGlzLnNlbGVjdGFibGUgKSB0aHJvdyBcIkF0dGVtcHQgdG8gc2F2ZSBzZWxlY3Rpb24gb24gbm9uLXNlbGVjdGFibGUgbGlzdFwiO1xuXHRcdFx0dGhpcy5zYXZlZFNlbGVjdGlvbiA9IHtcblx0XHRcdFx0aXRlbXMgOiBfLmNsb25lKCB0aGlzLnNlbGVjdGVkSXRlbXMgKSxcblx0XHRcdFx0b2Zmc2V0IDogdGhpcy5nZXRTZWxlY3RlZE1vZGVsKCB7IGJ5IDogXCJvZmZzZXRcIiB9IClcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdF9yZXN0b3JlU2VsZWN0aW9uIDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiggISB0aGlzLnNhdmVkU2VsZWN0aW9uICkgdGhyb3cgXCJBdHRlbXB0IHRvIHJlc3RvcmUgc2VsZWN0aW9uIGJ1dCBubyBzZWxlY3Rpb24gaGFzIGJlZW4gc2F2ZWQhXCI7XG5cblx0XHRcdC8vIHJlc2V0IHNlbGVjdGVkSXRlbXMgdG8gZW1wdHkgc28gdGhhdCB3ZSBcInJlZHJhd1wiIGFsbCBcInNlbGVjdGVkXCIgY2xhc3Nlc1xuXHRcdFx0Ly8gd2hlbiB3ZSBzZXQgb3VyIG5ldyBzZWxlY3Rpb24uIFdlIGRvIHRoaXMgYmVjYXVzZSBpdCBpcyBsaWtlbHkgdGhhdCBvdXJcblx0XHRcdC8vIGNvbnRlbnRzIGhhdmUgYmVlbiByZWZyZXNoZWQsIGFuZCB3ZSBoYXZlIHRodXMgbG9zdCBhbGwgb2xkIFwic2VsZWN0ZWRcIiBjbGFzc2VzLlxuXHRcdFx0dGhpcy5zZXRTZWxlY3RlZE1vZGVscyggW10sIHsgc2lsZW50IDogdHJ1ZSB9ICk7XG5cblx0XHRcdGlmKCB0aGlzLnNhdmVkU2VsZWN0aW9uLml0ZW1zLmxlbmd0aCA+IDAgKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBmaXJzdCB0cnkgdG8gcmVzdG9yZSB0aGUgb2xkIHNlbGVjdGVkIGl0ZW1zIHVzaW5nIHRoZWlyIHJlZmVyZW5jZSBpZHMuXG5cdFx0XHRcdHRoaXMuc2V0U2VsZWN0ZWRNb2RlbHMoIHRoaXMuc2F2ZWRTZWxlY3Rpb24uaXRlbXMsIHsgYnkgOiBcImNpZFwiLCBzaWxlbnQgOiB0cnVlIH0gKTtcblxuXHRcdFx0XHQvLyBhbGwgdGhlIGl0ZW1zIHdpdGggdGhlIHNhdmVkIHJlZmVyZW5jZSBpZHMgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cblx0XHRcdFx0Ly8gb2suIHRyeSB0byByZXN0b3JlIHRoZSBzZWxlY3Rpb24gYmFzZWQgb24gdGhlIG9mZnNldCB0aGF0IHVzZWQgdG8gYmUgc2VsZWN0ZWQuXG5cdFx0XHRcdC8vIHRoaXMgaXMgdGhlIGV4cGVjdGVkIGJlaGF2aW9yIGFmdGVyIGEgaXRlbSBpcyBkZWxldGVkIGZyb20gYSBsaXN0IChpLmUuIHNlbGVjdFxuXHRcdFx0XHQvLyB0aGUgbGluZSB0aGF0IGltbWVkaWF0ZWx5IGZvbGxvd3MgdGhlIGRlbGV0ZWQgbGluZSkuXG5cdFx0XHRcdGlmKCB0aGlzLnNlbGVjdGVkSXRlbXMubGVuZ3RoID09PSAwIClcblx0XHRcdFx0XHR0aGlzLnNldFNlbGVjdGVkTW9kZWwoIHRoaXMuc2F2ZWRTZWxlY3Rpb24ub2Zmc2V0LCB7IGJ5IDogXCJvZmZzZXRcIiB9ICk7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlciBhIHNlbGVjdGlvbiBjaGFuZ2VkIGlmIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIGl0ZW1zIHdlcmUgbm90IGFsbCBmb3VuZFxuXHRcdFx0XHRpZiAodGhpcy5zZWxlY3RlZEl0ZW1zLmxlbmd0aCAhPT0gdGhpcy5zYXZlZFNlbGVjdGlvbi5pdGVtcy5sZW5ndGgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiggdGhpcy5faXNCYWNrYm9uZUNvdXJpZXJBdmFpbGFibGUoKSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc3Bhd24oIFwic2VsZWN0aW9uQ2hhbmdlZFwiLCB7XG5cdFx0XHRcdFx0XHRcdHNlbGVjdGVkTW9kZWxzIDogdGhpcy5nZXRTZWxlY3RlZE1vZGVscygpLFxuXHRcdFx0XHRcdFx0XHRvbGRTZWxlY3RlZE1vZGVscyA6IFtdXG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSBlbHNlIHRoaXMudHJpZ2dlciggXCJzZWxlY3Rpb25DaGFuZ2VkXCIsIHRoaXMuZ2V0U2VsZWN0ZWRNb2RlbHMoKSwgW10gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfYWRkU2VsZWN0ZWRDbGFzc1RvU2VsZWN0ZWRJdGVtcyA6IGZ1bmN0aW9uKCBvbGRJdGVtc0lkc1dpdGhTZWxlY3RlZENsYXNzICkge1xuXHRcdFx0aWYoIF8uaXNVbmRlZmluZWQoIG9sZEl0ZW1zSWRzV2l0aFNlbGVjdGVkQ2xhc3MgKSApIG9sZEl0ZW1zSWRzV2l0aFNlbGVjdGVkQ2xhc3MgPSBbXTtcblxuXHRcdFx0Ly8gb2xkSXRlbXNJZHNXaXRoU2VsZWN0ZWRDbGFzcyBpcyB1c2VkIGZvciBvcHRpbWl6YXRpb24gcHVycG9zZXMgb25seS4gSWYgdGhpcyBpbmZvIGlzIHN1cHBsaWVkIHRoZW4gd2Vcblx0XHRcdC8vIG9ubHkgaGF2ZSB0byBhZGQgLyByZW1vdmUgdGhlIFwic2VsZWN0ZWRcIiBjbGFzcyBmcm9tIHRob3NlIGl0ZW1zIHRoYXQgXCJzZWxlY3RlZFwiIHN0YXRlIGhhcyBjaGFuZ2VkLlxuXG5cdFx0XHR2YXIgaXRlbXNJZHNGcm9tV2hpY2hTZWxlY3RlZENsYXNzTmVlZHNUb0JlUmVtb3ZlZCA9IG9sZEl0ZW1zSWRzV2l0aFNlbGVjdGVkQ2xhc3M7XG5cdFx0XHRpdGVtc0lkc0Zyb21XaGljaFNlbGVjdGVkQ2xhc3NOZWVkc1RvQmVSZW1vdmVkID0gXy53aXRob3V0KCBpdGVtc0lkc0Zyb21XaGljaFNlbGVjdGVkQ2xhc3NOZWVkc1RvQmVSZW1vdmVkLCB0aGlzLnNlbGVjdGVkSXRlbXMgKTtcblxuXHRcdFx0Xy5lYWNoKCBpdGVtc0lkc0Zyb21XaGljaFNlbGVjdGVkQ2xhc3NOZWVkc1RvQmVSZW1vdmVkLCBmdW5jdGlvbiggdGhpc0l0ZW1JZCApIHtcblx0XHRcdFx0dGhpcy5fZ2V0Q29udGFpbmVyRWwoKS5maW5kKCBcIltkYXRhLW1vZGVsLWNpZD1cIiArIHRoaXNJdGVtSWQgKyBcIl1cIiApLnJlbW92ZUNsYXNzKCBcInNlbGVjdGVkXCIgKTtcblxuXHRcdFx0XHRpZiggdGhpcy5faXNSZW5kZXJlZEFzTGlzdCgpICkge1xuXHRcdFx0XHRcdHRoaXMuX2dldENvbnRhaW5lckVsKCkuZmluZCggXCJsaVtkYXRhLW1vZGVsLWNpZD1cIiArIHRoaXNJdGVtSWQgKyBcIl0gPiAqXCIgKS5yZW1vdmVDbGFzcyggXCJzZWxlY3RlZFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMgKTtcblxuXHRcdFx0dmFyIGl0ZW1zSWRzRnJvbVdoaWNoU2VsZWN0ZWRDbGFzc05lZWRzVG9CZUFkZGVkID0gdGhpcy5zZWxlY3RlZEl0ZW1zO1xuXHRcdFx0aXRlbXNJZHNGcm9tV2hpY2hTZWxlY3RlZENsYXNzTmVlZHNUb0JlQWRkZWQgPSBfLndpdGhvdXQoIGl0ZW1zSWRzRnJvbVdoaWNoU2VsZWN0ZWRDbGFzc05lZWRzVG9CZUFkZGVkLCBvbGRJdGVtc0lkc1dpdGhTZWxlY3RlZENsYXNzICk7XG5cblx0XHRcdF8uZWFjaCggaXRlbXNJZHNGcm9tV2hpY2hTZWxlY3RlZENsYXNzTmVlZHNUb0JlQWRkZWQsIGZ1bmN0aW9uKCB0aGlzSXRlbUlkICkge1xuXHRcdFx0XHR0aGlzLl9nZXRDb250YWluZXJFbCgpLmZpbmQoIFwiW2RhdGEtbW9kZWwtY2lkPVwiICsgdGhpc0l0ZW1JZCArIFwiXVwiICkuYWRkQ2xhc3MoIFwic2VsZWN0ZWRcIiApO1xuXG5cdFx0XHRcdGlmKCB0aGlzLl9pc1JlbmRlcmVkQXNMaXN0KCkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fZ2V0Q29udGFpbmVyRWwoKS5maW5kKCBcImxpW2RhdGEtbW9kZWwtY2lkPVwiICsgdGhpc0l0ZW1JZCArIFwiXSA+ICpcIiApLmFkZENsYXNzKCBcInNlbGVjdGVkXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyApO1xuXHRcdH0sXG5cblx0XHRfcmVvcmRlckNvbGxlY3Rpb25CYXNlZE9uSFRNTCA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLl9nZXRDb250YWluZXJFbCgpLmNoaWxkcmVuKCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciB0aGlzTW9kZWxDaWQgPSAkKCB0aGlzICkuYXR0ciggXCJkYXRhLW1vZGVsLWNpZFwiICk7XG5cblx0XHRcdFx0aWYoIHRoaXNNb2RlbENpZCApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvLyByZW1vdmUgdGhlIGN1cnJlbnQgbW9kZWwgYW5kIHRoZW4gYWRkIGl0IGJhY2sgKGF0IHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24pLlxuXHRcdFx0XHRcdC8vIFdoZW4gd2UgYXJlIGRvbmUgbG9vcGluZyB0aHJvdWdoIGFsbCBtb2RlbHMsIHRoZXkgd2lsbCBiZSBpbiB0aGUgY29ycmVjdCBvcmRlci5cblx0XHRcdFx0XHR2YXIgdGhpc01vZGVsID0gX3RoaXMuY29sbGVjdGlvbi5nZXQoIHRoaXNNb2RlbENpZCApO1xuXHRcdFx0XHRcdGlmKCB0aGlzTW9kZWwgKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdF90aGlzLmNvbGxlY3Rpb24ucmVtb3ZlKCB0aGlzTW9kZWwsIHsgc2lsZW50IDogdHJ1ZSB9ICk7XG5cdFx0XHRcdFx0XHRfdGhpcy5jb2xsZWN0aW9uLmFkZCggdGhpc01vZGVsLCB7IHNpbGVudCA6IHRydWUsIHNvcnQgOiAhIF90aGlzLmNvbGxlY3Rpb24uY29tcGFyYXRvciB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmKCB0aGlzLl9pc0JhY2tib25lQ291cmllckF2YWlsYWJsZSgpICkgdGhpcy5zcGF3biggXCJyZW9yZGVyXCIgKTtcblx0XHRcdGVsc2UgdGhpcy5jb2xsZWN0aW9uLnRyaWdnZXIoIFwicmVvcmRlclwiICk7XG5cblx0XHRcdGlmKCB0aGlzLmNvbGxlY3Rpb24uY29tcGFyYXRvciApIHRoaXMuY29sbGVjdGlvbi5zb3J0KCk7XG5cblx0XHR9LFxuXG5cdFx0X2dldE1vZGVsVmlld0NvbnN0cnVjdG9yIDogZnVuY3Rpb24oIHRoaXNNb2RlbCApIHtcblx0XHRcdHJldHVybiB0aGlzLm1vZGVsVmlldyB8fCBtRGVmYXVsdE1vZGVsVmlld0NvbnN0cnVjdG9yO1xuXHRcdH0sXG5cblx0XHRfZ2V0TW9kZWxWaWV3T3B0aW9ucyA6IGZ1bmN0aW9uKCB0aGlzTW9kZWwgKSB7XG5cdFx0XHR2YXIgbW9kZWxWaWV3T3B0aW9ucyA9IHRoaXMubW9kZWxWaWV3T3B0aW9ucztcblx0XHRcdGlmKCBfLmlzRnVuY3Rpb24oIG1vZGVsVmlld09wdGlvbnMgKSApIG1vZGVsVmlld09wdGlvbnMgPSBtb2RlbFZpZXdPcHRpb25zKCB0aGlzTW9kZWwgKTtcblxuXHRcdFx0cmV0dXJuIF8uZXh0ZW5kKCB7IG1vZGVsIDogdGhpc01vZGVsIH0sIG1vZGVsVmlld09wdGlvbnMgKTtcblx0XHR9LFxuXG5cdFx0X2NyZWF0ZU5ld01vZGVsVmlldyA6IGZ1bmN0aW9uKCBtb2RlbCwgbW9kZWxWaWV3T3B0aW9ucyApIHtcblx0XHRcdHZhciBtb2RlbFZpZXdDb25zdHJ1Y3RvciA9IHRoaXMuX2dldE1vZGVsVmlld0NvbnN0cnVjdG9yKCBtb2RlbCApO1xuXHRcdFx0aWYoIF8uaXNVbmRlZmluZWQoIG1vZGVsVmlld0NvbnN0cnVjdG9yICkgKSB0aHJvdyBcIkNvdWxkIG5vdCBmaW5kIG1vZGVsVmlldyBjb25zdHJ1Y3RvciBmb3IgbW9kZWxcIjtcblxuXHRcdFx0dmFyIG5ld01vZGVsVmlldyA9IG5ldyggbW9kZWxWaWV3Q29uc3RydWN0b3IgKSggbW9kZWxWaWV3T3B0aW9ucyApO1xuXHRcdFx0bmV3TW9kZWxWaWV3LmNvbGxlY3Rpb25MaXN0VmlldyA9IG5ld01vZGVsVmlldy5jb2xsZWN0aW9uVmlldyA9IHRoaXM7ICAvLyBjb2xsZWN0aW9uTGlzdFZpZXcgZm9yIGxlZ2FjeVxuXG5cdFx0XHRyZXR1cm4gbmV3TW9kZWxWaWV3O1xuXHRcdH0sXG5cblx0XHRfd3JhcE1vZGVsVmlldyA6IGZ1bmN0aW9uKCBtb2RlbFZpZXcgKSB7XG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdFx0XHQvLyB3ZSB1c2UgaXRlbXMgY2xpZW50IGlkcyBhcyBvcHBvc2VkIHRvIHJlYWwgaWRzLCBzaW5jZSB3ZSBtYXkgbm90IGhhdmUgYSByZXByZXNlbnRhdGlvblxuXHRcdFx0Ly8gb2YgdGhlc2UgbW9kZWxzIG9uIHRoZSBzZXJ2ZXJcblx0XHRcdHZhciBtb2RlbFZpZXdXcmFwcGVyRWw7XG5cblx0XHRcdGlmKCB0aGlzLl9pc1JlbmRlcmVkQXNUYWJsZSgpICkge1xuXHRcdFx0XHQvLyBpZiB3ZSBhcmUgcmVuZGVyaW5nIHRoZSBjb2xsZWN0aW9uIGluIGEgdGFibGUsIHRoZSB0ZW1wbGF0ZSAkZWwgaXMgYSB0ciBzbyB3ZSBqdXN0IG5lZWQgdG8gc2V0IHRoZSBkYXRhLW1vZGVsLWNpZFxuXHRcdFx0XHRtb2RlbFZpZXdXcmFwcGVyRWwgPSBtb2RlbFZpZXcuJGVsO1xuXHRcdFx0XHRtb2RlbFZpZXcuJGVsLmF0dHIoIFwiZGF0YS1tb2RlbC1jaWRcIiwgbW9kZWxWaWV3Lm1vZGVsLmNpZCApO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiggdGhpcy5faXNSZW5kZXJlZEFzTGlzdCgpICkge1xuXHRcdFx0XHQvLyBpZiB3ZSBhcmUgcmVuZGVyaW5nIHRoZSBjb2xsZWN0aW9uIGluIGEgbGlzdCwgd2UgbmVlZCB3cmFwIGVhY2ggaXRlbSBpbiBhbiA8bGk+PC9saT4gKGlmIGl0cyBub3QgYWxyZWFkeSBhbiA8bGk+KVxuXHRcdFx0XHQvLyBhbmQgc2V0IHRoZSBkYXRhLW1vZGVsLWNpZFxuXHRcdFx0XHRpZiggbW9kZWxWaWV3LiRlbC5pcyggXCJsaVwiICkgKSB7XG5cdFx0XHRcdFx0bW9kZWxWaWV3V3JhcHBlckVsID0gbW9kZWxWaWV3LiRlbDtcblx0XHRcdFx0XHRtb2RlbFZpZXcuJGVsLmF0dHIoIFwiZGF0YS1tb2RlbC1jaWRcIiwgbW9kZWxWaWV3Lm1vZGVsLmNpZCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1vZGVsVmlld1dyYXBwZXJFbCA9IG1vZGVsVmlldy4kZWwud3JhcEFsbCggXCI8bGkgZGF0YS1tb2RlbC1jaWQ9J1wiICsgbW9kZWxWaWV3Lm1vZGVsLmNpZCArIFwiJz48L2xpPlwiICkucGFyZW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoIF8uaXNGdW5jdGlvbiggdGhpcy5zb3J0YWJsZU1vZGVsc0ZpbHRlciApIClcblx0XHRcdFx0aWYoICEgdGhpcy5zb3J0YWJsZU1vZGVsc0ZpbHRlci5jYWxsKCBfdGhpcywgbW9kZWxWaWV3Lm1vZGVsICkgKSB7XG5cdFx0XHRcdFx0bW9kZWxWaWV3V3JhcHBlckVsLmFkZENsYXNzKCBcIm5vdC1zb3J0YWJsZVwiICk7XG5cdFx0XHRcdFx0bW9kZWxWaWV3LiRlbC5hZGRDbGFzcyggXCJub3Qtc2VsZWN0YWJsZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0aWYoIF8uaXNGdW5jdGlvbiggdGhpcy5zZWxlY3RhYmxlTW9kZWxzRmlsdGVyICkgKVxuXHRcdFx0XHRpZiggISB0aGlzLnNlbGVjdGFibGVNb2RlbHNGaWx0ZXIuY2FsbCggX3RoaXMsIG1vZGVsVmlldy5tb2RlbCApICkge1xuXHRcdFx0XHRcdG1vZGVsVmlld1dyYXBwZXJFbC5hZGRDbGFzcyggXCJub3Qtc2VsZWN0YWJsZVwiICk7XG5cdFx0XHRcdFx0bW9kZWxWaWV3LiRlbC5hZGRDbGFzcyggXCJub3Qtc2VsZWN0YWJsZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1vZGVsVmlld1dyYXBwZXJFbDtcblx0XHR9LFxuXG5cdFx0X2NvbnZlcnRTdHJpbmdzVG9JbnRzIDogZnVuY3Rpb24oIHRoZUFycmF5ICkge1xuXHRcdFx0cmV0dXJuIF8ubWFwKCB0aGVBcnJheSwgZnVuY3Rpb24oIHRoaXNFbCApIHtcblx0XHRcdFx0aWYoICEgXy5pc1N0cmluZyggdGhpc0VsICkgKSByZXR1cm4gdGhpc0VsO1xuXHRcdFx0XHR2YXIgdGhpc0VsQXNOdW1iZXIgPSBwYXJzZUludCggdGhpc0VsLCAxMCApO1xuXHRcdFx0XHRyZXR1cm4oIHRoaXNFbEFzTnVtYmVyID09IHRoaXNFbCA/IHRoaXNFbEFzTnVtYmVyIDogdGhpc0VsICk7XG5cdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdF9jb250YWluU2FtZUVsZW1lbnRzIDogZnVuY3Rpb24oIGFycmF5QSwgYXJyYXlCICkge1xuXHRcdFx0aWYoIGFycmF5QS5sZW5ndGggIT0gYXJyYXlCLmxlbmd0aCApIHJldHVybiBmYWxzZTtcblx0XHRcdHZhciBpbnRlcnNlY3Rpb25TaXplID0gXy5pbnRlcnNlY3Rpb24oIGFycmF5QSwgYXJyYXlCICkubGVuZ3RoO1xuXHRcdFx0cmV0dXJuIGludGVyc2VjdGlvblNpemUgPT0gYXJyYXlBLmxlbmd0aDsgLy8gYW5kIG11c3QgYWxzbyBlcXVhbCBhcnJheUIubGVuZ3RoLCBzaW5jZSBhcnJheUEubGVuZ3RoID09IGFycmF5Qi5sZW5ndGhcblx0XHR9LFxuXG5cdFx0X2lzUmVuZGVyZWRBc1RhYmxlIDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy4kZWwucHJvcCggXCJ0YWdOYW1lXCIgKS50b0xvd2VyQ2FzZSgpID09PSBcInRhYmxlXCI7XG5cdFx0fSxcblxuXHRcdF9pc1JlbmRlcmVkQXNMaXN0IDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gISB0aGlzLl9pc1JlbmRlcmVkQXNUYWJsZSgpO1xuXHRcdH0sXG5cblx0XHRfbW9kZWxWaWV3SGFzV3JhcHBlckxJIDogZnVuY3Rpb24oIG1vZGVsVmlldyApIHtcblx0XHRcdHJldHVybiB0aGlzLl9pc1JlbmRlcmVkQXNMaXN0KCkgJiYgISBtb2RlbFZpZXcuJGVsLmlzKCBcImxpXCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJucyB0aGUgd3JhcHBlciBIVE1MIGVsZW1lbnQgZm9yIGVhY2ggdmlzaWJsZSBtb2RlbFZpZXcuXG5cdFx0Ly8gV2hlbiByZW5kZXJpbmcgaW4gYSB0YWJsZSBjb250ZXh0LCB0aGUgcmV0dXJuZWQgZWxlbWVudHMgYXJlIHRoZSAkZWwgb2YgZWFjaCBtb2RlbFZpZXcuXG5cdFx0Ly8gV2hlbiByZW5kZXJpbmcgaW4gYSBsaXN0IGNvbnRleHQsXG5cdFx0Ly8gICBJZiB0aGUgJGVsIG9mIHRoZSBtb2RlbFZpZXcgaXMgYW4gPGxpPiwgdGhlIHJldHVybmVkIGVsZW1lbnRzIGFyZSB0aGUgJGVsIG9mIGVhY2ggbW9kZWxWaWV3LlxuXHRcdC8vICAgT3RoZXJ3aXNlLCB0aGUgcmV0dXJuZWQgZWxlbWVudHMgYXJlIHRoZSA8bGk+J3MgdGhlIGNvbGxlY3Rpb25WaWV3IHdyYXBwZWQgYXJvdW5kIGVhY2ggbW9kZWxWaWV3ICRlbC5cblx0XHRfZ2V0VmlzaWJsZUl0ZW1FbHMgOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtRWxlbWVudHMgPSBbXTtcblx0XHRcdGl0ZW1FbGVtZW50cyA9IHRoaXMuX2dldENvbnRhaW5lckVsKCkuZmluZCggXCI+IFtkYXRhLW1vZGVsLWNpZF06bm90KC5ub3QtdmlzaWJsZSlcIiApO1xuXG5cdFx0XHRyZXR1cm4gaXRlbUVsZW1lbnRzO1xuXHRcdH0sXG5cblx0XHRfY2hhckNvZGVzIDoge1xuXHRcdFx0dXBBcnJvdyA6IDM4LFxuXHRcdFx0ZG93bkFycm93IDogNDBcblx0XHR9LFxuXG5cdFx0X2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlIDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gIV8uaXNVbmRlZmluZWQoIEJhY2tib25lLkNvdXJpZXIgKTtcblx0XHR9LFxuXG5cdFx0X3NldHVwU29ydGFibGUgOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzb3J0YWJsZU9wdGlvbnMgPSBfLmV4dGVuZCgge1xuXHRcdFx0XHRheGlzIDogXCJ5XCIsXG5cdFx0XHRcdGRpc3RhbmNlIDogMTAsXG5cdFx0XHRcdGZvcmNlUGxhY2Vob2xkZXJTaXplIDogdHJ1ZSxcblx0XHRcdFx0aXRlbXMgOiB0aGlzLl9pc1JlbmRlcmVkQXNUYWJsZSgpID8gXCI+IHRib2R5ID4gdHI6bm90KC5ub3Qtc29ydGFibGUpXCIgOiBcIj4gbGk6bm90KC5ub3Qtc29ydGFibGUpXCIsXG5cdFx0XHRcdHN0YXJ0IDogXy5iaW5kKCB0aGlzLl9zb3J0U3RhcnQsIHRoaXMgKSxcblx0XHRcdFx0Y2hhbmdlIDogXy5iaW5kKCB0aGlzLl9zb3J0Q2hhbmdlLCB0aGlzICksXG5cdFx0XHRcdHN0b3AgOiBfLmJpbmQoIHRoaXMuX3NvcnRTdG9wLCB0aGlzICksXG5cdFx0XHRcdHJlY2VpdmUgOiBfLmJpbmQoIHRoaXMuX3JlY2VpdmUsIHRoaXMgKSxcblx0XHRcdFx0b3ZlciA6IF8uYmluZCggdGhpcy5fb3ZlciwgdGhpcyApXG5cdFx0XHR9LCBfLnJlc3VsdCggdGhpcywgXCJzb3J0YWJsZU9wdGlvbnNcIiApICk7XG5cblx0XHRcdHRoaXMuJGVsID0gdGhpcy4kZWwuc29ydGFibGUoIHNvcnRhYmxlT3B0aW9ucyApO1xuXHRcdFx0Ly90aGlzLiRlbC5zb3J0YWJsZSggXCJlbmFibGVcIiApOyAvLyBpbiBjYXNlIGl0IHdhcyBkaXNhYmxlZCBwcmV2aW91c2x5XG5cdFx0fSxcblxuXHRcdF9zb3J0U3RhcnQgOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0dmFyIG1vZGVsQmVpbmdTb3J0ZWQgPSB0aGlzLmNvbGxlY3Rpb24uZ2V0KCB1aS5pdGVtLmF0dHIoIFwiZGF0YS1tb2RlbC1jaWRcIiApICk7XG5cdFx0XHRpZiggdGhpcy5faXNCYWNrYm9uZUNvdXJpZXJBdmFpbGFibGUoKSApXG5cdFx0XHRcdHRoaXMuc3Bhd24oIFwic29ydFN0YXJ0XCIsIHsgbW9kZWxCZWluZ1NvcnRlZCA6IG1vZGVsQmVpbmdTb3J0ZWQgfSApO1xuXHRcdFx0ZWxzZSB0aGlzLnRyaWdnZXIoIFwic29ydFN0YXJ0XCIsIG1vZGVsQmVpbmdTb3J0ZWQgKTtcblx0XHR9LFxuXG5cdFx0X3NvcnRDaGFuZ2UgOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0dmFyIG1vZGVsQmVpbmdTb3J0ZWQgPSB0aGlzLmNvbGxlY3Rpb24uZ2V0KCB1aS5pdGVtLmF0dHIoIFwiZGF0YS1tb2RlbC1jaWRcIiApICk7XG5cblx0XHRcdGlmKCB0aGlzLl9pc0JhY2tib25lQ291cmllckF2YWlsYWJsZSgpIClcblx0XHRcdFx0dGhpcy5zcGF3biggXCJzb3J0Q2hhbmdlXCIsIHsgbW9kZWxCZWluZ1NvcnRlZCA6IG1vZGVsQmVpbmdTb3J0ZWQgfSApO1xuXHRcdFx0ZWxzZSB0aGlzLnRyaWdnZXIoIFwic29ydENoYW5nZVwiLCBtb2RlbEJlaW5nU29ydGVkICk7XG5cdFx0fSxcblxuXHRcdF9zb3J0U3RvcCA6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHR2YXIgbW9kZWxCZWluZ1NvcnRlZCA9IHRoaXMuY29sbGVjdGlvbi5nZXQoIHVpLml0ZW0uYXR0ciggXCJkYXRhLW1vZGVsLWNpZFwiICkgKTtcblx0XHRcdHZhciBtb2RlbFZpZXdDb250YWluZXJFbCA9IHRoaXMuX2dldENvbnRhaW5lckVsKCk7XG5cdFx0XHR2YXIgbmV3SW5kZXggPSBtb2RlbFZpZXdDb250YWluZXJFbC5jaGlsZHJlbigpLmluZGV4KCB1aS5pdGVtICk7XG5cblx0XHRcdGlmKCBuZXdJbmRleCA9PSAtMSAmJiBtb2RlbEJlaW5nU29ydGVkICkge1xuXHRcdFx0XHQvLyB0aGUgZWxlbWVudCB3YXMgcmVtb3ZlZCBmcm9tIHRoaXMgbGlzdC4gY2FuIGhhcHBlbiBpZiB0aGlzIHNvcnRhYmxlIGlzIGNvbm5lY3RlZFxuXHRcdFx0XHQvLyB0byBhbm90aGVyIHNvcnRhYmxlLCBhbmQgdGhlIGl0ZW0gd2FzIGRyb3BwZWQgaW50byB0aGUgb3RoZXIgc29ydGFibGUuXG5cdFx0XHRcdHRoaXMuY29sbGVjdGlvbi5yZW1vdmUoIG1vZGVsQmVpbmdTb3J0ZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoICEgbW9kZWxCZWluZ1NvcnRlZCApIHJldHVybjsgLy8gc29tZXRoaW5nIGlzIHdhY2t5LiB3ZSBkb24ndCBtZXNzIHdpdGggdGhpcyBjYXNlLCBwcmVmZXJyaW5nIHRvIGd1YXJhbnRlZSB0aGF0IHdlIGNhbiBhbHdheXMgcHJvdmlkZSBhIHJlZmVyZW5jZSB0byB0aGUgbW9kZWxcblxuXHRcdFx0dGhpcy5fcmVvcmRlckNvbGxlY3Rpb25CYXNlZE9uSFRNTCgpO1xuXHRcdFx0dGhpcy51cGRhdGVEZXBlbmRlbnRDb250cm9scygpO1xuXG5cdFx0XHRpZiggdGhpcy5faXNCYWNrYm9uZUNvdXJpZXJBdmFpbGFibGUoKSApXG5cdFx0XHRcdHRoaXMuc3Bhd24oIFwic29ydFN0b3BcIiwgeyBtb2RlbEJlaW5nU29ydGVkIDogbW9kZWxCZWluZ1NvcnRlZCwgbmV3SW5kZXggOiBuZXdJbmRleCB9ICk7XG5cdFx0XHRlbHNlIHRoaXMudHJpZ2dlciggXCJzb3J0U3RvcFwiLCBtb2RlbEJlaW5nU29ydGVkLCBuZXdJbmRleCApO1xuXHRcdH0sXG5cblx0XHRfcmVjZWl2ZSA6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cblx0XHRcdHZhciBzZW5kZXJMaXN0RWwgPSB1aS5zZW5kZXI7XG5cdFx0XHR2YXIgc2VuZGVyQ29sbGVjdGlvbkxpc3RWaWV3ID0gc2VuZGVyTGlzdEVsLmRhdGEoIFwidmlld1wiICk7XG5cdFx0XHRpZiggISBzZW5kZXJDb2xsZWN0aW9uTGlzdFZpZXcgfHwgISBzZW5kZXJDb2xsZWN0aW9uTGlzdFZpZXcuY29sbGVjdGlvbiApIHJldHVybjtcblxuXHRcdFx0dmFyIG5ld0luZGV4ID0gdGhpcy5fZ2V0Q29udGFpbmVyRWwoKS5jaGlsZHJlbigpLmluZGV4KCB1aS5pdGVtICk7XG5cdFx0XHR2YXIgbW9kZWxSZWNlaXZlZCA9IHNlbmRlckNvbGxlY3Rpb25MaXN0Vmlldy5jb2xsZWN0aW9uLmdldCggdWkuaXRlbS5hdHRyKCBcImRhdGEtbW9kZWwtY2lkXCIgKSApO1xuXHRcdFx0c2VuZGVyQ29sbGVjdGlvbkxpc3RWaWV3LmNvbGxlY3Rpb24ucmVtb3ZlKCBtb2RlbFJlY2VpdmVkICk7XG5cdFx0XHR0aGlzLmNvbGxlY3Rpb24uYWRkKCBtb2RlbFJlY2VpdmVkLCB7IGF0IDogbmV3SW5kZXggfSApO1xuXHRcdFx0bW9kZWxSZWNlaXZlZC5jb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uOyAvLyBvdGhlcndpc2Ugd2lsbCBub3QgZ2V0IHByb3Blcmx5IHNldCwgc2luY2UgbW9kZWxSZWNlaXZlZC5jb2xsZWN0aW9uIG1pZ2h0IGFscmVhZHkgaGF2ZSBhIHZhbHVlLlxuXHRcdFx0dGhpcy5zZXRTZWxlY3RlZE1vZGVsKCBtb2RlbFJlY2VpdmVkICk7XG5cdFx0fSxcblxuXHRcdF9vdmVyIDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdC8vIHdoZW4gYW4gaXRlbSBpcyBiZWluZyBkcmFnZ2VkIGludG8gdGhlIHNvcnRhYmxlLFxuXHRcdFx0Ly8gaGlkZSB0aGUgZW1wdHkgbGlzdCBjYXB0aW9uIGlmIGl0IGV4aXN0c1xuXHRcdFx0dGhpcy5fZ2V0Q29udGFpbmVyRWwoKS5maW5kKCBcIj4gdmFyLmVtcHR5LWxpc3QtY2FwdGlvblwiICkuaGlkZSgpO1xuXHRcdH0sXG5cblx0XHRfb25LZXlkb3duIDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0aWYoICEgdGhpcy5wcm9jZXNzS2V5RXZlbnRzICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdHZhciB0cmFwID0gZmFsc2U7XG5cblx0XHRcdGlmKCB0aGlzLmdldFNlbGVjdGVkTW9kZWxzKCB7IGJ5IDogXCJvZmZzZXRcIiB9ICkubGVuZ3RoID09IDEgKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBuZWVkIHRvIHRyYXAgZG93biBhbmQgdXAgYXJyb3dzIG9yIGVsc2UgdGhlIGJyb3dzZXJcblx0XHRcdFx0Ly8gd2lsbCBlbmQgdXAgc2Nyb2xsaW5nIGEgYXV0b3Njcm9sbCBkaXYuXG5cblx0XHRcdFx0dmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLmdldFNlbGVjdGVkTW9kZWwoIHsgYnkgOiBcIm9mZnNldFwiIH0gKTtcblx0XHRcdFx0aWYoIGV2ZW50LndoaWNoID09PSB0aGlzLl9jaGFyQ29kZXMudXBBcnJvdyAmJiBjdXJyZW50T2Zmc2V0ICE9PSAwIClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRoaXMuc2V0U2VsZWN0ZWRNb2RlbCggY3VycmVudE9mZnNldCAtIDEsIHsgYnkgOiBcIm9mZnNldFwiIH0gKTtcblx0XHRcdFx0XHR0cmFwID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmKCBldmVudC53aGljaCA9PT0gdGhpcy5fY2hhckNvZGVzLmRvd25BcnJvdyAmJiBjdXJyZW50T2Zmc2V0ICE9PSB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoIC0gMSApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aGlzLnNldFNlbGVjdGVkTW9kZWwoIGN1cnJlbnRPZmZzZXQgKyAxLCB7IGJ5IDogXCJvZmZzZXRcIiB9ICk7XG5cdFx0XHRcdFx0dHJhcCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICEgdHJhcDtcblx0XHR9LFxuXG5cdFx0X2xpc3RJdGVtX29uTW91c2Vkb3duIDogZnVuY3Rpb24oIHRoZUV2ZW50ICkge1xuXHRcdFx0dmFyIGNsaWNrZWRJdGVtSWQgPSB0aGlzLl9nZXRDbGlja2VkSXRlbUlkKCB0aGVFdmVudCApO1xuXG5cdFx0XHRpZiggY2xpY2tlZEl0ZW1JZCApIHtcblx0XHRcdFx0dmFyIGNsaWNrZWRNb2RlbCA9IHRoaXMuY29sbGVjdGlvbi5nZXQoIGNsaWNrZWRJdGVtSWQgKTtcblx0XHRcdFx0aWYoIHRoaXMuX2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlKCkgKSB7XG5cdFx0XHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdFx0XHRjbGlja2VkTW9kZWwgOiBjbGlja2VkTW9kZWwsXG5cdFx0XHRcdFx0XHRtZXRhS2V5UHJlc3NlZCA6IHRoZUV2ZW50LmN0cmxLZXkgfHwgdGhlRXZlbnQubWV0YUtleVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRfLmVhY2goIFsgJ3ByZXZlbnREZWZhdWx0JywgJ3N0b3BQcm9wYWdhdGlvbicsICdzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24nIF0sIGZ1bmN0aW9uKCB0aGlzTWV0aG9kICkge1xuXHRcdFx0XHRcdFx0ZGF0YVsgdGhpc01ldGhvZCBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHRoZUV2ZW50WyB0aGlzTWV0aG9kIF0oKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0dGhpcy5zcGF3biggXCJjbGlja1wiLCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB0aGlzLnRyaWdnZXIoIFwiY2xpY2tcIiwgY2xpY2tlZE1vZGVsICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCAhIHRoaXMuc2VsZWN0YWJsZSB8fCAhIHRoaXMuY2xpY2tUb1NlbGVjdCApIHJldHVybjtcblxuXHRcdFx0aWYoIGNsaWNrZWRJdGVtSWQgKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBFeGl0IGlmIGFuIHVuc2VsZWN0YWJsZSBpdGVtIHdhcyBjbGlja2VkXG5cdFx0XHRcdGlmKCBfLmlzRnVuY3Rpb24oIHRoaXMuc2VsZWN0YWJsZU1vZGVsc0ZpbHRlciApICYmXG5cdFx0XHRcdFx0ISB0aGlzLnNlbGVjdGFibGVNb2RlbHNGaWx0ZXIuY2FsbCggdGhpcywgdGhpcy5jb2xsZWN0aW9uLmdldCggY2xpY2tlZEl0ZW1JZCApICkgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gYSBzZWxlY3RhYmxlIGxpc3QgaXRlbSB3YXMgY2xpY2tlZFxuXHRcdFx0XHRpZiggdGhpcy5zZWxlY3RNdWx0aXBsZSAmJiB0aGVFdmVudC5zaGlmdEtleSApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgZmlyc3RTZWxlY3RlZEl0ZW1JbmRleCA9IC0xO1xuXG5cdFx0XHRcdFx0aWYoIHRoaXMuc2VsZWN0ZWRJdGVtcy5sZW5ndGggPiAwIClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbGxlY3Rpb24uZmluZCggZnVuY3Rpb24oIHRoaXNJdGVtTW9kZWwgKSB7XG5cdFx0XHRcdFx0XHRcdGZpcnN0U2VsZWN0ZWRJdGVtSW5kZXgrKztcblxuXHRcdFx0XHRcdFx0XHQvLyBleGl0IHdoZW4gd2UgZmluZCBvdXIgZmlyc3Qgc2VsZWN0ZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gXy5jb250YWlucyggdGhpcy5zZWxlY3RlZEl0ZW1zLCB0aGlzSXRlbU1vZGVsLmNpZCApO1xuXHRcdFx0XHRcdFx0fSwgdGhpcyApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBjbGlja2VkSXRlbUluZGV4ID0gLTE7XG5cdFx0XHRcdFx0dGhpcy5jb2xsZWN0aW9uLmZpbmQoIGZ1bmN0aW9uKCB0aGlzSXRlbU1vZGVsICkge1xuXHRcdFx0XHRcdFx0Y2xpY2tlZEl0ZW1JbmRleCsrO1xuXG5cdFx0XHRcdFx0XHQvLyBleGl0IHdoZW4gd2UgZmluZCB0aGUgY2xpY2tlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpc0l0ZW1Nb2RlbC5jaWQgPT0gY2xpY2tlZEl0ZW1JZDtcblx0XHRcdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdFx0XHR2YXIgc2hpZnRLZXlSb290U2VsZWN0ZWRJdGVtSW5kZXggPSBmaXJzdFNlbGVjdGVkSXRlbUluZGV4ID09IC0xID8gY2xpY2tlZEl0ZW1JbmRleCA6IGZpcnN0U2VsZWN0ZWRJdGVtSW5kZXg7XG5cdFx0XHRcdFx0dmFyIG1pblNlbGVjdGVkSXRlbUluZGV4ID0gTWF0aC5taW4oIGNsaWNrZWRJdGVtSW5kZXgsIHNoaWZ0S2V5Um9vdFNlbGVjdGVkSXRlbUluZGV4ICk7XG5cdFx0XHRcdFx0dmFyIG1heFNlbGVjdGVkSXRlbUluZGV4ID0gTWF0aC5tYXgoIGNsaWNrZWRJdGVtSW5kZXgsIHNoaWZ0S2V5Um9vdFNlbGVjdGVkSXRlbUluZGV4ICk7XG5cblx0XHRcdFx0XHR2YXIgbmV3U2VsZWN0ZWRJdGVtcyA9IFtdO1xuXHRcdFx0XHRcdGZvciggdmFyIHRoaXNJbmRleCA9IG1pblNlbGVjdGVkSXRlbUluZGV4OyB0aGlzSW5kZXggPD0gbWF4U2VsZWN0ZWRJdGVtSW5kZXg7IHRoaXNJbmRleCArKyApXG5cdFx0XHRcdFx0XHRuZXdTZWxlY3RlZEl0ZW1zLnB1c2goIHRoaXMuY29sbGVjdGlvbi5hdCggdGhpc0luZGV4ICkuY2lkICk7XG5cdFx0XHRcdFx0dGhpcy5zZXRTZWxlY3RlZE1vZGVscyggbmV3U2VsZWN0ZWRJdGVtcywgeyBieSA6IFwiY2lkXCIgfSApO1xuXG5cdFx0XHRcdFx0Ly8gc2hpZnQgY2xpY2tpbmcgd2lsbCB1c3VhbGx5IGhpZ2hsaWdodCBzZWxlY3RhYmxlIHRleHQsIHdoaWNoIHdlIGRvIG5vdCB3YW50LlxuXHRcdFx0XHRcdC8vIHRoaXMgaXMgYSBjcm9zcyBicm93c2VyIChob3BlZnVsbHkpIHNuaXBwZXQgdGhhdCBkZXNlbGVjdHMgYWxsIHRleHQgc2VsZWN0aW9uLlxuXHRcdFx0XHRcdGlmKCBkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5IClcblx0XHRcdFx0XHRcdGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpO1xuXHRcdFx0XHRcdGVsc2UgaWYod2luZG93LmdldFNlbGVjdGlvbikge1xuXHRcdFx0XHRcdFx0dmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblx0XHRcdFx0XHRcdGlmKCBzZWwgJiYgc2VsLnJlbW92ZUFsbFJhbmdlcyApXG5cdFx0XHRcdFx0XHRcdHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiggKCB0aGlzLnNlbGVjdE11bHRpcGxlIHx8IF8uY29udGFpbnMoIHRoaXMuc2VsZWN0ZWRJdGVtcywgY2xpY2tlZEl0ZW1JZCApICkgJiYgKCB0aGlzLmNsaWNrVG9Ub2dnbGUgfHwgdGhlRXZlbnQubWV0YUtleSB8fCB0aGVFdmVudC5jdHJsS2V5ICkgKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYoIF8uY29udGFpbnMoIHRoaXMuc2VsZWN0ZWRJdGVtcywgY2xpY2tlZEl0ZW1JZCApIClcblx0XHRcdFx0XHRcdHRoaXMuc2V0U2VsZWN0ZWRNb2RlbHMoIF8ud2l0aG91dCggdGhpcy5zZWxlY3RlZEl0ZW1zLCBjbGlja2VkSXRlbUlkICksIHsgYnkgOiBcImNpZFwiIH0gKTtcblx0XHRcdFx0XHRlbHNlIHRoaXMuc2V0U2VsZWN0ZWRNb2RlbHMoIF8udW5pb24oIHRoaXMuc2VsZWN0ZWRJdGVtcywgW2NsaWNrZWRJdGVtSWRdICksIHsgYnkgOiBcImNpZFwiIH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0dGhpcy5zZXRTZWxlY3RlZE1vZGVscyggWyBjbGlja2VkSXRlbUlkIF0sIHsgYnkgOiBcImNpZFwiIH0gKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0Ly8gdGhlIGJsYW5rIGFyZWEgb2YgdGhlIGxpc3Qgd2FzIGNsaWNrZWRcblx0XHRcdFx0dGhpcy5zZXRTZWxlY3RlZE1vZGVscyggW10gKTtcblxuXHRcdH0sXG5cblx0XHRfbGlzdEl0ZW1fb25Eb3VibGVDbGljayA6IGZ1bmN0aW9uKCB0aGVFdmVudCApIHtcblxuXHRcdFx0dmFyIGNsaWNrZWRJdGVtSWQgPSB0aGlzLl9nZXRDbGlja2VkSXRlbUlkKCB0aGVFdmVudCApO1xuXG5cdFx0XHRpZiggY2xpY2tlZEl0ZW1JZCApXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBjbGlja2VkTW9kZWwgPSB0aGlzLmNvbGxlY3Rpb24uZ2V0KCBjbGlja2VkSXRlbUlkICk7XG5cblx0XHRcdFx0aWYoIHRoaXMuX2lzQmFja2JvbmVDb3VyaWVyQXZhaWxhYmxlKCkgKVxuXHRcdFx0XHRcdHRoaXMuc3Bhd24oIFwiZG91YmxlQ2xpY2tcIiwgeyBjbGlja2VkTW9kZWwgOiBjbGlja2VkTW9kZWwsIG1ldGFLZXlQcmVzc2VkIDogdGhlRXZlbnQuY3RybEtleSB8fCB0aGVFdmVudC5tZXRhS2V5IH0gKTtcblx0XHRcdFx0ZWxzZSB0aGlzLnRyaWdnZXIoIFwiZG91YmxlQ2xpY2tcIiwgY2xpY2tlZE1vZGVsICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9saXN0QmFja2dyb3VuZF9vbkNsaWNrIDogZnVuY3Rpb24oIHRoZUV2ZW50ICkge1xuXHRcdFx0aWYoICEgdGhpcy5zZWxlY3RhYmxlIHx8ICEgdGhpcy5jbGlja1RvU2VsZWN0ICkgcmV0dXJuO1xuXHRcdFx0aWYoICEgJCggdGhlRXZlbnQudGFyZ2V0ICkuaXMoIFwiLmNvbGxlY3Rpb24tdmlld1wiICkgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuc2V0U2VsZWN0ZWRNb2RlbHMoIFtdICk7XG5cdFx0fVxuXG5cdH0sIHtcblx0XHRzZXREZWZhdWx0TW9kZWxWaWV3Q29uc3RydWN0b3IgOiBmdW5jdGlvbiggdGhlQ29uc3RydWN0b3IgKSB7XG5cdFx0XHRtRGVmYXVsdE1vZGVsVmlld0NvbnN0cnVjdG9yID0gdGhlQ29uc3RydWN0b3I7XG5cdFx0fVxuXHR9KTtcblxuXHQvKlxuXHQqIEJhY2tib25lLlZpZXdPcHRpb25zLCB2MC4yLjRcblx0KiBDb3B5cmlnaHQgKGMpMjAxNCBSb3R1bmRhIFNvZnR3YXJlLCBMTEMuXG5cdCogRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIGxpY2Vuc2Vcblx0KiBodHRwOi8vZ2l0aHViLmNvbS9yb3R1bmRhc29mdHdhcmUvYmFja2JvbmUudmlld09wdGlvbnNcblx0Ki9cblxuXHRCYWNrYm9uZS5WaWV3T3B0aW9ucyA9IHt9O1xuXG5cdEJhY2tib25lLlZpZXdPcHRpb25zLmFkZCA9IGZ1bmN0aW9uKCB2aWV3LCBvcHRpb25zRGVjbGFyYXRpb25zUHJvcGVydHkgKSB7XG5cdFx0aWYoIF8uaXNVbmRlZmluZWQoIG9wdGlvbnNEZWNsYXJhdGlvbnNQcm9wZXJ0eSApICkgb3B0aW9uc0RlY2xhcmF0aW9uc1Byb3BlcnR5ID0gXCJvcHRpb25zXCI7XG5cblx0XHQvLyAqKioqKioqKioqKioqKioqKiogUHVibGljIG1ldGhvZHMgYWRkZWQgdG8gdmlldyAqKioqKioqKioqKioqKioqKipcblxuXHRcdHZpZXcuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcztcblx0XHRcdHZhciBvcHRpb25zVGhhdFdlcmVDaGFuZ2VkID0ge307XG5cdFx0XHR2YXIgb3B0aW9uc1RoYXRXZXJlQ2hhbmdlZFByZXZpb3VzVmFsdWVzID0ge307XG5cblx0XHRcdHZhciBvcHRpb25EZWNsYXJhdGlvbnMgPSBfLnJlc3VsdCggdGhpcywgb3B0aW9uc0RlY2xhcmF0aW9uc1Byb3BlcnR5ICk7XG5cblx0XHRcdGlmKCAhIF8uaXNVbmRlZmluZWQoIG9wdGlvbkRlY2xhcmF0aW9ucyApICkge1xuXHRcdFx0XHR2YXIgbm9ybWFsaXplZE9wdGlvbkRlY2xhcmF0aW9ucyA9IF9ub3JtYWxpemVPcHRpb25EZWNsYXJhdGlvbnMoIG9wdGlvbkRlY2xhcmF0aW9ucyApO1xuXG5cdFx0XHRcdF8uZWFjaCggbm9ybWFsaXplZE9wdGlvbkRlY2xhcmF0aW9ucywgZnVuY3Rpb24oIHRoaXNPcHRpb25Qcm9wZXJ0aWVzLCB0aGlzT3B0aW9uTmFtZSApIHtcblx0XHRcdFx0XHR2YXIgdGhpc09wdGlvblJlcXVpcmVkID0gdGhpc09wdGlvblByb3BlcnRpZXMucmVxdWlyZWQ7XG5cdFx0XHRcdFx0dmFyIHRoaXNPcHRpb25EZWZhdWx0VmFsdWUgPSB0aGlzT3B0aW9uUHJvcGVydGllcy5kZWZhdWx0VmFsdWU7XG5cblx0XHRcdFx0XHRpZiggdGhpc09wdGlvblJlcXVpcmVkICkge1xuXHRcdFx0XHRcdFx0Ly8gbm90ZSB3ZSBkbyBub3QgdGhyb3cgYW4gZXJyb3IgaWYgYSByZXF1aXJlZCBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBidXQgaXQgaXNcblx0XHRcdFx0XHRcdC8vIGZvdW5kIG9uIHRoZSBvYmplY3QgaXRzZWxmIChkdWUgdG8gYSBwcmlvciBjYWxsIG9mIHZpZXcuc2V0T3B0aW9ucywgbW9zdCBsaWtlbHkpXG5cblx0XHRcdFx0XHRcdGlmKCAoICEgb3B0aW9ucyB8fCAhIF8uY29udGFpbnMoIF8ua2V5cyggb3B0aW9ucyApLCB0aGlzT3B0aW9uTmFtZSApICkgJiYgXy5pc1VuZGVmaW5lZCggX3RoaXNbIHRoaXNPcHRpb25OYW1lIF0gKSApXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJSZXF1aXJlZCBvcHRpb24gXFxcIlwiICsgdGhpc09wdGlvbk5hbWUgKyBcIlxcXCIgd2FzIG5vdCBzdXBwbGllZC5cIiApO1xuXG5cdFx0XHRcdFx0XHRpZiggb3B0aW9ucyAmJiBfLmNvbnRhaW5zKCBfLmtleXMoIG9wdGlvbnMgKSwgdGhpc09wdGlvbk5hbWUgKSAmJiBfLmlzVW5kZWZpbmVkKCBvcHRpb25zWyB0aGlzT3B0aW9uTmFtZSBdICkgKVxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwiUmVxdWlyZWQgb3B0aW9uIFxcXCJcIiArIHRoaXNPcHRpb25OYW1lICsgXCJcXFwiIGNhbiBub3QgYmUgc2V0IHRvIHVuZGVmaW5lZC5cIiApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGF0dGFjaCB0aGUgc3VwcGxpZWQgdmFsdWUgb2YgdGhpcyBvcHRpb24sIG9yIHRoZSBhcHByb3ByaWF0ZSBkZWZhdWx0IHZhbHVlLCB0byB0aGUgdmlldyBvYmplY3Rcblx0XHRcdFx0XHRpZiggb3B0aW9ucyAmJiB0aGlzT3B0aW9uTmFtZSBpbiBvcHRpb25zICYmICEgXy5pc1VuZGVmaW5lZCggb3B0aW9uc1sgdGhpc09wdGlvbk5hbWUgXSApICkge1xuXHRcdFx0XHRcdFx0dmFyIG9sZFZhbHVlID0gX3RoaXNbIHRoaXNPcHRpb25OYW1lIF07XG5cdFx0XHRcdFx0XHR2YXIgbmV3VmFsdWUgPSBvcHRpb25zWyB0aGlzT3B0aW9uTmFtZSBdO1xuXHRcdFx0XHRcdFx0Ly8gaWYgdGhpcyBvcHRpb24gYWxyZWFkeSBleGlzdHMgb24gdGhlIHZpZXcsIGFuZCB0aGUgbmV3IHZhbHVlIGlzIGRpZmZlcmVudCxcblx0XHRcdFx0XHRcdC8vIG1ha2UgYSBub3RlIHRoYXQgd2Ugd2lsbCBiZSBjaGFuZ2luZyBpdFxuXHRcdFx0XHRcdFx0aWYoICEgXy5pc1VuZGVmaW5lZCggb2xkVmFsdWUgKSAmJiBvbGRWYWx1ZSAhPT0gbmV3VmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnNUaGF0V2VyZUNoYW5nZWRQcmV2aW91c1ZhbHVlc1sgdGhpc09wdGlvbk5hbWUgXSA9IG9sZFZhbHVlO1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zVGhhdFdlcmVDaGFuZ2VkWyB0aGlzT3B0aW9uTmFtZSBdID0gbmV3VmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRfdGhpc1sgdGhpc09wdGlvbk5hbWUgXSA9IG5ld1ZhbHVlO1xuXHRcdFx0XHRcdFx0Ly8gbm90ZSB3ZSBkbyBOT1QgZGVsZXRlIHRoZSBvcHRpb24gb2ZmIHRoZSBvcHRpb25zIG9iamVjdCBoZXJlIHNvIHRoYXRcblx0XHRcdFx0XHRcdC8vIG11bHRpcGxlIHZpZXdzIGNhbiBiZSBwYXNzZWQgdGhlIHNhbWUgb3B0aW9ucyBvYmplY3Qgd2l0aG91dCBpc3N1ZS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiggXy5pc1VuZGVmaW5lZCggX3RoaXNbIHRoaXNPcHRpb25OYW1lIF0gKSApIHtcblx0XHRcdFx0XHRcdC8vIG5vdGUgZGVmYXVsdHMgZG8gbm90IHdyaXRlIG92ZXIgYW55IGV4aXN0aW5nIHByb3BlcnRpZXMgb24gdGhlIHZpZXcgaXRzZWxmLlxuXHRcdFx0XHRcdFx0X3RoaXNbIHRoaXNPcHRpb25OYW1lIF0gPSB0aGlzT3B0aW9uRGVmYXVsdFZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiggXy5rZXlzKCBvcHRpb25zVGhhdFdlcmVDaGFuZ2VkICkubGVuZ3RoID4gMCApIHtcblx0XHRcdFx0aWYoIF8uaXNGdW5jdGlvbiggX3RoaXMub25PcHRpb25zQ2hhbmdlZCApIClcblx0XHRcdFx0XHRfdGhpcy5vbk9wdGlvbnNDaGFuZ2VkKCBvcHRpb25zVGhhdFdlcmVDaGFuZ2VkLCBvcHRpb25zVGhhdFdlcmVDaGFuZ2VkUHJldmlvdXNWYWx1ZXMgKTtcblx0XHRcdFx0ZWxzZSBpZiggXy5pc0Z1bmN0aW9uKCBfdGhpcy5fb25PcHRpb25zQ2hhbmdlZCApIClcblx0XHRcdFx0XHRfdGhpcy5fb25PcHRpb25zQ2hhbmdlZCggb3B0aW9uc1RoYXRXZXJlQ2hhbmdlZCwgb3B0aW9uc1RoYXRXZXJlQ2hhbmdlZFByZXZpb3VzVmFsdWVzICk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZpZXcuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9wdGlvbkRlY2xhcmF0aW9ucyA9IF8ucmVzdWx0KCB0aGlzLCBvcHRpb25zRGVjbGFyYXRpb25zUHJvcGVydHkgKTtcblx0XHRcdGlmKCBfLmlzVW5kZWZpbmVkKCBvcHRpb25EZWNsYXJhdGlvbnMgKSApIHJldHVybiB7fTtcblxuXHRcdFx0dmFyIG5vcm1hbGl6ZWRPcHRpb25EZWNsYXJhdGlvbnMgPSBfbm9ybWFsaXplT3B0aW9uRGVjbGFyYXRpb25zKCBvcHRpb25EZWNsYXJhdGlvbnMgKTtcblx0XHRcdHZhciBvcHRpb25zTmFtZXMgPSBfLmtleXMoIG5vcm1hbGl6ZWRPcHRpb25EZWNsYXJhdGlvbnMgKTtcblxuXHRcdFx0cmV0dXJuIF8ucGljayggdGhpcywgb3B0aW9uc05hbWVzICk7XG5cdFx0fTtcblx0fTtcblxuXHQvLyAqKioqKioqKioqKioqKioqKiogUHJpdmF0ZSBVdGlsaXR5IEZ1bmN0aW9ucyAqKioqKioqKioqKioqKioqKipcblxuXHRmdW5jdGlvbiBfbm9ybWFsaXplT3B0aW9uRGVjbGFyYXRpb25zKCBvcHRpb25EZWNsYXJhdGlvbnMgKSB7XG5cdFx0Ly8gY29udmVydCBvdXIgc2hvcnQtaGFuZCBvcHRpb24gc3ludGF4ICh3aXRoIGV4Y2xhbWF0aW9uIG1hcmtzLCBldGMuKVxuXHRcdC8vIHRvIGEgc2ltcGxlIGFycmF5IG9mIHN0YW5kYXJkIG9wdGlvbiBkZWNsYXJhdGlvbiBvYmplY3RzLlxuXG5cdFx0dmFyIG5vcm1hbGl6ZWRPcHRpb25EZWNsYXJhdGlvbnMgPSB7fTtcblxuXHRcdGlmKCAhIF8uaXNBcnJheSggb3B0aW9uRGVjbGFyYXRpb25zICkgKSB0aHJvdyBuZXcgRXJyb3IoIFwiT3B0aW9uIGRlY2xhcmF0aW9ucyBtdXN0IGJlIGFuIGFycmF5LlwiICk7XG5cblx0XHRfLmVhY2goIG9wdGlvbkRlY2xhcmF0aW9ucywgZnVuY3Rpb24oIHRoaXNPcHRpb25EZWNsYXJhdGlvbiApIHtcblx0XHRcdHZhciB0aGlzT3B0aW9uTmFtZSwgdGhpc09wdGlvblJlcXVpcmVkLCB0aGlzT3B0aW9uRGVmYXVsdFZhbHVlO1xuXG5cdFx0XHR0aGlzT3B0aW9uUmVxdWlyZWQgPSBmYWxzZTtcblx0XHRcdHRoaXNPcHRpb25EZWZhdWx0VmFsdWUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmKCBfLmlzU3RyaW5nKCB0aGlzT3B0aW9uRGVjbGFyYXRpb24gKSApXG5cdFx0XHRcdHRoaXNPcHRpb25OYW1lID0gdGhpc09wdGlvbkRlY2xhcmF0aW9uO1xuXHRcdFx0ZWxzZSBpZiggXy5pc09iamVjdCggdGhpc09wdGlvbkRlY2xhcmF0aW9uICkgKSB7XG5cdFx0XHRcdHRoaXNPcHRpb25OYW1lID0gXy5maXJzdCggXy5rZXlzKCB0aGlzT3B0aW9uRGVjbGFyYXRpb24gKSApO1xuXHRcdFx0XHRpZiggXy5pc0Z1bmN0aW9uKCB0aGlzT3B0aW9uRGVjbGFyYXRpb25bIHRoaXNPcHRpb25OYW1lIF0gKSApXG5cdFx0XHRcdFx0dGhpc09wdGlvbkRlZmF1bHRWYWx1ZSA9IHRoaXNPcHRpb25EZWNsYXJhdGlvblsgdGhpc09wdGlvbk5hbWUgXTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHRoaXNPcHRpb25EZWZhdWx0VmFsdWUgPSBfLmNsb25lKCB0aGlzT3B0aW9uRGVjbGFyYXRpb25bIHRoaXNPcHRpb25OYW1lIF0gKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgdGhyb3cgbmV3IEVycm9yKCBcIkVhY2ggZWxlbWVudCBpbiB0aGUgb3B0aW9uIGRlY2xhcmF0aW9ucyBhcnJheSBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiBvYmplY3QuXCIgKTtcblxuXHRcdFx0aWYoIHRoaXNPcHRpb25OYW1lWyB0aGlzT3B0aW9uTmFtZS5sZW5ndGggLSAxIF0gPT09IFwiIVwiICkge1xuXHRcdFx0XHR0aGlzT3B0aW9uUmVxdWlyZWQgPSB0cnVlO1xuXHRcdFx0XHR0aGlzT3B0aW9uTmFtZSA9IHRoaXNPcHRpb25OYW1lLnNsaWNlKCAwLCB0aGlzT3B0aW9uTmFtZS5sZW5ndGggLSAxICk7XG5cdFx0XHR9XG5cblx0XHRcdG5vcm1hbGl6ZWRPcHRpb25EZWNsYXJhdGlvbnNbIHRoaXNPcHRpb25OYW1lIF0gPSBub3JtYWxpemVkT3B0aW9uRGVjbGFyYXRpb25zWyB0aGlzT3B0aW9uTmFtZSBdIHx8IHt9O1xuXHRcdFx0bm9ybWFsaXplZE9wdGlvbkRlY2xhcmF0aW9uc1sgdGhpc09wdGlvbk5hbWUgXS5yZXF1aXJlZCA9IHRoaXNPcHRpb25SZXF1aXJlZDtcblx0XHRcdGlmKCAhIF8uaXNVbmRlZmluZWQoIHRoaXNPcHRpb25EZWZhdWx0VmFsdWUgKSApIG5vcm1hbGl6ZWRPcHRpb25EZWNsYXJhdGlvbnNbIHRoaXNPcHRpb25OYW1lIF0uZGVmYXVsdFZhbHVlID0gdGhpc09wdGlvbkRlZmF1bHRWYWx1ZTtcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gbm9ybWFsaXplZE9wdGlvbkRlY2xhcmF0aW9ucztcblx0fVxuXG5cblx0Ly8gQmFja2JvbmUuQmFieVNpdHRlclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIHYwLjAuNlxuXHQvL1xuXHQvLyBDb3B5cmlnaHQgKGMpMjAxMyBEZXJpY2sgQmFpbGV5LCBNdXRlZCBTb2x1dGlvbnMsIExMQy5cblx0Ly8gRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIGxpY2Vuc2Vcblx0Ly9cblx0Ly8gaHR0cDovL2dpdGh1Yi5jb20vYmFieXNpdHRlcmpzL2JhY2tib25lLmJhYnlzaXR0ZXJcblxuXHQvLyBCYWNrYm9uZS5DaGlsZFZpZXdDb250YWluZXJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vXG5cdC8vIFByb3ZpZGUgYSBjb250YWluZXIgdG8gc3RvcmUsIHJldHJpZXZlIGFuZFxuXHQvLyBzaHV0IGRvd24gY2hpbGQgdmlld3MuXG5cblx0Q2hpbGRWaWV3Q29udGFpbmVyID0gKGZ1bmN0aW9uKEJhY2tib25lLCBfKXtcblxuXHRcdC8vIENvbnRhaW5lciBDb25zdHJ1Y3RvclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0dmFyIENvbnRhaW5lciA9IGZ1bmN0aW9uKHZpZXdzKXtcblx0XHRcdHRoaXMuX3ZpZXdzID0ge307XG5cdFx0XHR0aGlzLl9pbmRleEJ5TW9kZWwgPSB7fTtcblx0XHRcdHRoaXMuX2luZGV4QnlDdXN0b20gPSB7fTtcblx0XHRcdHRoaXMuX3VwZGF0ZUxlbmd0aCgpO1xuXG5cdFx0XHRfLmVhY2godmlld3MsIHRoaXMuYWRkLCB0aGlzKTtcblx0XHR9O1xuXG5cdFx0Ly8gQ29udGFpbmVyIE1ldGhvZHNcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0Xy5leHRlbmQoQ29udGFpbmVyLnByb3RvdHlwZSwge1xuXG5cdFx0XHQvLyBBZGQgYSB2aWV3IHRvIHRoaXMgY29udGFpbmVyLiBTdG9yZXMgdGhlIHZpZXdcblx0XHRcdC8vIGJ5IGBjaWRgIGFuZCBtYWtlcyBpdCBzZWFyY2hhYmxlIGJ5IHRoZSBtb2RlbFxuXHRcdFx0Ly8gY2lkIChhbmQgbW9kZWwgaXRzZWxmKS4gT3B0aW9uYWxseSBzcGVjaWZ5XG5cdFx0XHQvLyBhIGN1c3RvbSBrZXkgdG8gc3RvcmUgYW4gcmV0cmlldmUgdGhlIHZpZXcuXG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKHZpZXcsIGN1c3RvbUluZGV4KXtcblx0XHRcdFx0dmFyIHZpZXdDaWQgPSB2aWV3LmNpZDtcblxuXHRcdFx0XHQvLyBzdG9yZSB0aGUgdmlld1xuXHRcdFx0XHR0aGlzLl92aWV3c1t2aWV3Q2lkXSA9IHZpZXc7XG5cblx0XHRcdFx0Ly8gaW5kZXggaXQgYnkgbW9kZWxcblx0XHRcdFx0aWYgKHZpZXcubW9kZWwpe1xuXHRcdFx0XHRcdHRoaXMuX2luZGV4QnlNb2RlbFt2aWV3Lm1vZGVsLmNpZF0gPSB2aWV3Q2lkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaW5kZXggYnkgY3VzdG9tXG5cdFx0XHRcdGlmIChjdXN0b21JbmRleCl7XG5cdFx0XHRcdFx0dGhpcy5faW5kZXhCeUN1c3RvbVtjdXN0b21JbmRleF0gPSB2aWV3Q2lkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fdXBkYXRlTGVuZ3RoKCk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGaW5kIGEgdmlldyBieSB0aGUgbW9kZWwgdGhhdCB3YXMgYXR0YWNoZWQgdG9cblx0XHRcdC8vIGl0LiBVc2VzIHRoZSBtb2RlbCdzIGBjaWRgIHRvIGZpbmQgaXQuXG5cdFx0XHRmaW5kQnlNb2RlbDogZnVuY3Rpb24obW9kZWwpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlNb2RlbENpZChtb2RlbC5jaWQpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRmluZCBhIHZpZXcgYnkgdGhlIGBjaWRgIG9mIHRoZSBtb2RlbCB0aGF0IHdhcyBhdHRhY2hlZCB0b1xuXHRcdFx0Ly8gaXQuIFVzZXMgdGhlIG1vZGVsJ3MgYGNpZGAgdG8gZmluZCB0aGUgdmlldyBgY2lkYCBhbmRcblx0XHRcdC8vIHJldHJpZXZlIHRoZSB2aWV3IHVzaW5nIGl0LlxuXHRcdFx0ZmluZEJ5TW9kZWxDaWQ6IGZ1bmN0aW9uKG1vZGVsQ2lkKXtcblx0XHRcdFx0dmFyIHZpZXdDaWQgPSB0aGlzLl9pbmRleEJ5TW9kZWxbbW9kZWxDaWRdO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlDaWQodmlld0NpZCk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGaW5kIGEgdmlldyBieSBhIGN1c3RvbSBpbmRleGVyLlxuXHRcdFx0ZmluZEJ5Q3VzdG9tOiBmdW5jdGlvbihpbmRleCl7XG5cdFx0XHRcdHZhciB2aWV3Q2lkID0gdGhpcy5faW5kZXhCeUN1c3RvbVtpbmRleF07XG5cdFx0XHRcdHJldHVybiB0aGlzLmZpbmRCeUNpZCh2aWV3Q2lkKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZpbmQgYnkgaW5kZXguIFRoaXMgaXMgbm90IGd1YXJhbnRlZWQgdG8gYmUgYVxuXHRcdFx0Ly8gc3RhYmxlIGluZGV4LlxuXHRcdFx0ZmluZEJ5SW5kZXg6IGZ1bmN0aW9uKGluZGV4KXtcblx0XHRcdFx0cmV0dXJuIF8udmFsdWVzKHRoaXMuX3ZpZXdzKVtpbmRleF07XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyByZXRyaWV2ZSBhIHZpZXcgYnkgaXQncyBgY2lkYCBkaXJlY3RseVxuXHRcdFx0ZmluZEJ5Q2lkOiBmdW5jdGlvbihjaWQpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdmlld3NbY2lkXTtcblx0XHRcdH0sXG5cblx0XHRcdGZpbmRJbmRleEJ5Q2lkIDogZnVuY3Rpb24oIGNpZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0XHRcdHZhciB2aWV3ID0gXy5maW5kKCB0aGlzLl92aWV3cywgZnVuY3Rpb24gKCB2aWV3ICkge1xuXHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0aWYoIHZpZXcubW9kZWwuY2lkID09IGNpZCApXG5cdFx0XHRcdFx0XHRyZXR1cm4gdmlldztcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gKCB2aWV3ICkgPyBpbmRleCA6IC0xO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgdmlld1xuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbih2aWV3KXtcblx0XHRcdFx0dmFyIHZpZXdDaWQgPSB2aWV3LmNpZDtcblxuXHRcdFx0XHQvLyBkZWxldGUgbW9kZWwgaW5kZXhcblx0XHRcdFx0aWYgKHZpZXcubW9kZWwpe1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLl9pbmRleEJ5TW9kZWxbdmlldy5tb2RlbC5jaWRdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gZGVsZXRlIGN1c3RvbSBpbmRleFxuXHRcdFx0XHRfLmFueSh0aGlzLl9pbmRleEJ5Q3VzdG9tLCBmdW5jdGlvbihjaWQsIGtleSkge1xuXHRcdFx0XHRcdGlmIChjaWQgPT09IHZpZXdDaWQpIHtcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLl9pbmRleEJ5Q3VzdG9tW2tleV07XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIHRoaXMpO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSB0aGUgdmlldyBmcm9tIHRoZSBjb250YWluZXJcblx0XHRcdFx0ZGVsZXRlIHRoaXMuX3ZpZXdzW3ZpZXdDaWRdO1xuXG5cdFx0XHRcdC8vIHVwZGF0ZSB0aGUgbGVuZ3RoXG5cdFx0XHRcdHRoaXMuX3VwZGF0ZUxlbmd0aCgpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhIG1ldGhvZCBvbiBldmVyeSB2aWV3IGluIHRoZSBjb250YWluZXIsXG5cdFx0XHQvLyBwYXNzaW5nIHBhcmFtZXRlcnMgdG8gdGhlIGNhbGwgbWV0aG9kIG9uZSBhdCBhXG5cdFx0XHQvLyB0aW1lLCBsaWtlIGBmdW5jdGlvbi5jYWxsYC5cblx0XHRcdGNhbGw6IGZ1bmN0aW9uKG1ldGhvZCl7XG5cdFx0XHRcdHRoaXMuYXBwbHkobWV0aG9kLCBfLnRhaWwoYXJndW1lbnRzKSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBBcHBseSBhIG1ldGhvZCBvbiBldmVyeSB2aWV3IGluIHRoZSBjb250YWluZXIsXG5cdFx0XHQvLyBwYXNzaW5nIHBhcmFtZXRlcnMgdG8gdGhlIGNhbGwgbWV0aG9kIG9uZSBhdCBhXG5cdFx0XHQvLyB0aW1lLCBsaWtlIGBmdW5jdGlvbi5hcHBseWAuXG5cdFx0XHRhcHBseTogZnVuY3Rpb24obWV0aG9kLCBhcmdzKXtcblx0XHRcdFx0Xy5lYWNoKHRoaXMuX3ZpZXdzLCBmdW5jdGlvbih2aWV3KXtcblx0XHRcdFx0XHRpZiAoXy5pc0Z1bmN0aW9uKHZpZXdbbWV0aG9kXSkpe1xuXHRcdFx0XHRcdFx0dmlld1ttZXRob2RdLmFwcGx5KHZpZXcsIGFyZ3MgfHwgW10pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBVcGRhdGUgdGhlIGAubGVuZ3RoYCBhdHRyaWJ1dGUgb24gdGhpcyBjb250YWluZXJcblx0XHRcdF91cGRhdGVMZW5ndGg6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHRoaXMubGVuZ3RoID0gXy5zaXplKHRoaXMuX3ZpZXdzKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEJvcnJvd2luZyB0aGlzIGNvZGUgZnJvbSBCYWNrYm9uZS5Db2xsZWN0aW9uOlxuXHRcdC8vIGh0dHA6Ly9iYWNrYm9uZWpzLm9yZy9kb2NzL2JhY2tib25lLmh0bWwjc2VjdGlvbi0xMDZcblx0XHQvL1xuXHRcdC8vIE1peCBpbiBtZXRob2RzIGZyb20gVW5kZXJzY29yZSwgZm9yIGl0ZXJhdGlvbiwgYW5kIG90aGVyXG5cdFx0Ly8gY29sbGVjdGlvbiByZWxhdGVkIGZlYXR1cmVzLlxuXHRcdHZhciBtZXRob2RzID0gWydmb3JFYWNoJywgJ2VhY2gnLCAnbWFwJywgJ2ZpbmQnLCAnZGV0ZWN0JywgJ2ZpbHRlcicsXG5cdFx0XHQgICAgICAgJ3NlbGVjdCcsICdyZWplY3QnLCAnZXZlcnknLCAnYWxsJywgJ3NvbWUnLCAnYW55JywgJ2luY2x1ZGUnLFxuXHRcdFx0ICAgICAgICdjb250YWlucycsICdpbnZva2UnLCAndG9BcnJheScsICdmaXJzdCcsICdpbml0aWFsJywgJ3Jlc3QnLFxuXHRcdFx0ICAgICAgICdsYXN0JywgJ3dpdGhvdXQnLCAnaXNFbXB0eScsICdwbHVjayddO1xuXG5cdFx0Xy5lYWNoKG1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuXHRcdFx0Q29udGFpbmVyLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciB2aWV3cyA9IF8udmFsdWVzKHRoaXMuX3ZpZXdzKTtcblx0XHRcdFx0dmFyIGFyZ3MgPSBbdmlld3NdLmNvbmNhdChfLnRvQXJyYXkoYXJndW1lbnRzKSk7XG5cdFx0XHRcdHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgYXJncyk7XG5cdFx0XHR9O1xuXHRcdH0pO1xuXG5cdFx0Ly8gcmV0dXJuIHRoZSBwdWJsaWMgQVBJXG5cdFx0cmV0dXJuIENvbnRhaW5lcjtcblx0fSkoQmFja2JvbmUsIF8pO1xuXG5cdHJldHVybiBCYWNrYm9uZS5Db2xsZWN0aW9uVmlldztcbn0gKSApO1xuXG4vL1xuLy8gYmFja2JvbmUudHJhY2tpdCAtIDAuMS4wXG4vLyBUaGUgTUlUIExpY2Vuc2Vcbi8vIENvcHlyaWdodCAoYykgMjAxMyBUaGUgTmV3IFlvcmsgVGltZXMsIENNUyBHcm91cCwgTWF0dGhldyBEZUxhbWJvIDxkZWxhbWJvQGdtYWlsLmNvbT5cbi8vXG4oZnVuY3Rpb24oKSB7XG5cblx0Ly8gVW5zYXZlZCBSZWNvcmQgS2VlcGluZ1xuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0Ly8gQ29sbGVjdGlvbiBvZiBhbGwgbW9kZWxzIGluIGFuIGFwcCB0aGF0IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLlxuXHR2YXIgdW5zYXZlZE1vZGVscyA9IFtdO1xuXG5cdC8vIElmIHRoZSBnaXZlbiBtb2RlbCBoYXMgdW5zYXZlZCBjaGFuZ2VzIHRoZW4gYWRkIGl0IHRvXG5cdC8vIHRoZSBgdW5zYXZlZE1vZGVsc2AgY29sbGVjdGlvbiwgb3RoZXJ3aXNlIHJlbW92ZSBpdC5cblx0dmFyIHVwZGF0ZVVuc2F2ZWRNb2RlbHMgPSBmdW5jdGlvbihtb2RlbCkge1xuXHRcdGlmICghXy5pc0VtcHR5KG1vZGVsLl91bnNhdmVkQ2hhbmdlcykpIHtcblx0XHRcdGlmICghXy5maW5kV2hlcmUodW5zYXZlZE1vZGVscywge2NpZDptb2RlbC5jaWR9KSkgdW5zYXZlZE1vZGVscy5wdXNoKG1vZGVsKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dW5zYXZlZE1vZGVscyA9IF8uZmlsdGVyKHVuc2F2ZWRNb2RlbHMsIGZ1bmN0aW9uKG0pIHsgcmV0dXJuIG1vZGVsLmNpZCAhPSBtLmNpZDsgfSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIFVubG9hZCBIYW5kbGVyc1xuXHQvLyAtLS0tLS0tLS0tLS0tLS1cblxuXHQvLyBIZWxwZXIgd2hpY2ggcmV0dXJucyBhIHByb21wdCBtZXNzYWdlIGZvciBhbiB1bmxvYWQgaGFuZGxlci5cblx0Ly8gVXNlcyB0aGUgZ2l2ZW4gZnVuY3Rpb24gbmFtZSAob25lIG9mIHRoZSBjYWxsYmFjayBuYW1lc1xuXHQvLyBmcm9tIHRoZSBgbW9kZWwudW5zYXZlZGAgY29uZmlndXJhdGlvbiBoYXNoKSB0byBldmFsdWF0ZVxuXHQvLyB3aGV0aGVyIGEgcHJvbXB0IGlzIG5lZWRlZC9yZXR1cm5lZC5cblx0dmFyIGdldFByb21wdCA9IGZ1bmN0aW9uKGZuTmFtZSkge1xuXHRcdHZhciBwcm9tcHQsIGFyZ3MgPSBfLnJlc3QoYXJndW1lbnRzKTtcblx0XHQvLyBFdmFsdWF0ZSBhbmQgcmV0dXJuIGEgYm9vbGVhbiByZXN1bHQuIFRoZSBnaXZlbiBgZm5gIG1heSBiZSBhXG5cdFx0Ly8gYm9vbGVhbiB2YWx1ZSwgYSBmdW5jdGlvbiwgb3IgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbiBvbiB0aGUgbW9kZWwuXG5cdFx0dmFyIGV2YWx1YXRlTW9kZWxGbiA9IGZ1bmN0aW9uKG1vZGVsLCBmbikge1xuXHRcdFx0aWYgKF8uaXNCb29sZWFuKGZuKSkgcmV0dXJuIGZuO1xuXHRcdFx0cmV0dXJuIChfLmlzU3RyaW5nKGZuKSA/IG1vZGVsW2ZuXSA6IGZuKS5hcHBseShtb2RlbCwgYXJncyk7XG5cdFx0fTtcblx0XHRfLmVhY2godW5zYXZlZE1vZGVscywgZnVuY3Rpb24obW9kZWwpIHtcblx0XHRcdGlmICghcHJvbXB0ICYmIGV2YWx1YXRlTW9kZWxGbihtb2RlbCwgbW9kZWwuX3Vuc2F2ZWRDb25maWdbZm5OYW1lXSkpXG5cdFx0XHRcdHByb21wdCA9IG1vZGVsLl91bnNhdmVkQ29uZmlnLnByb21wdDtcblx0XHR9KTtcblx0XHRyZXR1cm4gcHJvbXB0O1xuXHR9O1xuXG5cdC8vIFdyYXAgQmFja2JvbmUuSGlzdG9yeS5uYXZpZ2F0ZSBzbyB0aGF0IGluLWFwcCByb3V0aW5nXG5cdC8vIChgcm91dGVyLm5hdmlnYXRlKCcvcGF0aCcpYCkgY2FuIGJlIGludGVyY2VwdGVkIHdpdGggYVxuXHQvLyBjb25maXJtYXRpb24gaWYgdGhlcmUgYXJlIGFueSB1bnNhdmVkIG1vZGVscy5cblx0QmFja2JvbmUuSGlzdG9yeS5wcm90b3R5cGUubmF2aWdhdGUgPSBfLndyYXAoQmFja2JvbmUuSGlzdG9yeS5wcm90b3R5cGUubmF2aWdhdGUsIGZ1bmN0aW9uKG9sZE5hdiwgZnJhZ21lbnQsIG9wdGlvbnMpIHtcblx0XHR2YXIgcHJvbXB0ID0gZ2V0UHJvbXB0KCd1bmxvYWRSb3V0ZXJQcm9tcHQnLCBmcmFnbWVudCwgb3B0aW9ucyk7XG5cdFx0aWYgKHByb21wdCkge1xuXHRcdFx0aWYgKGNvbmZpcm0ocHJvbXB0ICsgJyBcXG5cXG5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmUgdGhpcyBwYWdlPycpKSB7XG5cdFx0XHRcdG9sZE5hdi5jYWxsKHRoaXMsIGZyYWdtZW50LCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2xkTmF2LmNhbGwodGhpcywgZnJhZ21lbnQsIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gQ3JlYXRlIGEgYnJvd3NlciB1bmxvYWQgaGFuZGxlciB3aGljaCBpcyB0cmlnZ2VyZWRcblx0Ly8gb24gdGhlIHJlZnJlc2gsIGJhY2ssIG9yIGZvcndhcmQgYnV0dG9uLlxuXHR3aW5kb3cub25iZWZvcmV1bmxvYWQgPSBmdW5jdGlvbihlKSB7XG5cdFx0cmV0dXJuIGdldFByb21wdCgndW5sb2FkV2luZG93UHJvbXB0JywgZSk7XG5cdH07XG5cblx0Ly8gQmFja2JvbmUuTW9kZWwgQVBJXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdF8uZXh0ZW5kKEJhY2tib25lLk1vZGVsLnByb3RvdHlwZSwge1xuXG5cdFx0dW5zYXZlZDoge30sXG5cdFx0X3RyYWNraW5nQ2hhbmdlczogZmFsc2UsXG5cdFx0X29yaWdpbmFsQXR0cnM6IHt9LFxuXHRcdF91bnNhdmVkQ2hhbmdlczoge30sXG5cblx0XHQvLyBPcHQgaW4gdG8gdHJhY2tpbmcgYXR0cmlidXRlIGNoYW5nZXNcblx0XHQvLyBiZXR3ZWVuIHNhdmVzLlxuXHRcdHN0YXJ0VHJhY2tpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fdW5zYXZlZENvbmZpZyA9IF8uZXh0ZW5kKHt9LCB7XG5cdFx0XHRcdHByb21wdDogJ1lvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcyEnLFxuXHRcdFx0XHR1bmxvYWRSb3V0ZXJQcm9tcHQ6IGZhbHNlLFxuXHRcdFx0XHR1bmxvYWRXaW5kb3dQcm9tcHQ6IGZhbHNlXG5cdFx0XHR9LCB0aGlzLnVuc2F2ZWQgfHwge30pO1xuXHRcdFx0dGhpcy5fdHJhY2tpbmdDaGFuZ2VzID0gdHJ1ZTtcblx0XHRcdHRoaXMuX3Jlc2V0VHJhY2tpbmcoKTtcblx0XHRcdHRoaXMuX3RyaWdnZXJVbnNhdmVkQ2hhbmdlcygpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdC8vIFJlc2V0cyB0aGUgZGVmYXVsdCB0cmFja2luZyB2YWx1ZXNcblx0XHQvLyBhbmQgc3RvcHMgdHJhY2tpbmcgYXR0cmlidXRlIGNoYW5nZXMuXG5cdFx0c3RvcFRyYWNraW5nOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3RyYWNraW5nQ2hhbmdlcyA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fb3JpZ2luYWxBdHRycyA9IHt9O1xuXHRcdFx0dGhpcy5fdW5zYXZlZENoYW5nZXMgPSB7fTtcblx0XHRcdHRoaXMuX3RyaWdnZXJVbnNhdmVkQ2hhbmdlcygpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdC8vIEdldHMgcmlkIG9mIGFjY3J1ZWQgY2hhbmdlcyBhbmRcblx0XHQvLyByZXNldHMgc3RhdGUuXG5cdFx0cmVzdGFydFRyYWNraW5nOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3Jlc2V0VHJhY2tpbmcoKTtcblx0XHRcdHRoaXMuX3RyaWdnZXJVbnNhdmVkQ2hhbmdlcygpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdC8vIFJlc3RvcmVzIHRoaXMgbW9kZWwncyBhdHRyaWJ1dGVzIHRvXG5cdFx0Ly8gdGhlaXIgb3JpZ2luYWwgdmFsdWVzIHNpbmNlIHRyYWNraW5nXG5cdFx0Ly8gc3RhcnRlZCwgdGhlIGxhc3Qgc2F2ZSwgb3IgbGFzdCByZXN0YXJ0LlxuXHRcdHJlc2V0QXR0cmlidXRlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMuX3RyYWNraW5nQ2hhbmdlcykgcmV0dXJuO1xuXHRcdFx0dGhpcy5hdHRyaWJ1dGVzID0gdGhpcy5fb3JpZ2luYWxBdHRycztcblx0XHRcdHRoaXMuX3Jlc2V0VHJhY2tpbmcoKTtcblx0XHRcdHRoaXMuX3RyaWdnZXJVbnNhdmVkQ2hhbmdlcygpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdC8vIFN5bW1ldHJpYyB0byBCYWNrYm9uZSdzIGBtb2RlbC5jaGFuZ2VkQXR0cmlidXRlcygpYCxcblx0XHQvLyBleGNlcHQgdGhhdCB0aGlzIHJldHVybnMgYSBoYXNoIG9mIHRoZSBtb2RlbCdzIGF0dHJpYnV0ZXMgdGhhdFxuXHRcdC8vIGhhdmUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBzYXZlLCBvciBgZmFsc2VgIGlmIHRoZXJlIGFyZSBub25lLlxuXHRcdC8vIExpa2UgYGNoYW5nZWRBdHRyaWJ1dGVzYCwgYW4gZXh0ZXJuYWwgYXR0cmlidXRlcyBoYXNoIGNhbiBiZVxuXHRcdC8vIHBhc3NlZCBpbiwgcmV0dXJuaW5nIHRoZSBhdHRyaWJ1dGVzIGluIHRoYXQgaGFzaCB3aGljaCBkaWZmZXJcblx0XHQvLyBmcm9tIHRoZSBtb2RlbC5cblx0XHR1bnNhdmVkQXR0cmlidXRlczogZnVuY3Rpb24oYXR0cnMpIHtcblx0XHRcdGlmICghYXR0cnMpIHJldHVybiBfLmlzRW1wdHkodGhpcy5fdW5zYXZlZENoYW5nZXMpID8gZmFsc2UgOiBfLmNsb25lKHRoaXMuX3Vuc2F2ZWRDaGFuZ2VzKTtcblx0XHRcdHZhciB2YWwsIGNoYW5nZWQgPSBmYWxzZSwgb2xkID0gdGhpcy5fdW5zYXZlZENoYW5nZXM7XG5cdFx0XHRmb3IgKHZhciBhdHRyIGluIGF0dHJzKSB7XG5cdFx0XHRcdGlmIChfLmlzRXF1YWwob2xkW2F0dHJdLCAodmFsID0gYXR0cnNbYXR0cl0pKSkgY29udGludWU7XG5cdFx0XHRcdChjaGFuZ2VkIHx8IChjaGFuZ2VkID0ge30pKVthdHRyXSA9IHZhbDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH0sXG5cblx0XHRfcmVzZXRUcmFja2luZzogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9vcmlnaW5hbEF0dHJzID0gXy5jbG9uZSh0aGlzLmF0dHJpYnV0ZXMpO1xuXHRcdFx0dGhpcy5fdW5zYXZlZENoYW5nZXMgPSB7fTtcblx0XHR9LFxuXG5cdFx0Ly8gVHJpZ2dlciBhbiBgdW5zYXZlZENoYW5nZXNgIGV2ZW50IG9uIHRoaXMgbW9kZWwsXG5cdFx0Ly8gc3VwcGx5aW5nIHRoZSByZXN1bHQgb2Ygd2hldGhlciB0aGVyZSBhcmUgdW5zYXZlZFxuXHRcdC8vIGNoYW5nZXMgYW5kIGEgY2hhbmdlZCBhdHRyaWJ1dGVzIGhhc2guXG5cdFx0X3RyaWdnZXJVbnNhdmVkQ2hhbmdlczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnRyaWdnZXIoJ3Vuc2F2ZWRDaGFuZ2VzJywgIV8uaXNFbXB0eSh0aGlzLl91bnNhdmVkQ2hhbmdlcyksIF8uY2xvbmUodGhpcy5fdW5zYXZlZENoYW5nZXMpKTtcblx0XHRcdGlmICh0aGlzLnVuc2F2ZWQpIHVwZGF0ZVVuc2F2ZWRNb2RlbHModGhpcyk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBXcmFwIGBtb2RlbC5zZXQoKWAgYW5kIHVwZGF0ZSB0aGUgaW50ZXJuYWxcblx0Ly8gdW5zYXZlZCBjaGFuZ2VzIHJlY29yZCBrZWVwaW5nLlxuXHRCYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuc2V0ID0gXy53cmFwKEJhY2tib25lLk1vZGVsLnByb3RvdHlwZS5zZXQsIGZ1bmN0aW9uKG9sZFNldCwga2V5LCB2YWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgYXR0cnMsIHJldDtcblx0XHRpZiAoa2V5ID09IG51bGwpIHJldHVybiB0aGlzO1xuXHRcdC8vIEhhbmRsZSBib3RoIGBcImtleVwiLCB2YWx1ZWAgYW5kIGB7a2V5OiB2YWx1ZX1gIC1zdHlsZSBhcmd1bWVudHMuXG5cdFx0aWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRhdHRycyA9IGtleTtcblx0XHRcdG9wdGlvbnMgPSB2YWw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdChhdHRycyA9IHt9KVtrZXldID0gdmFsO1xuXHRcdH1cblx0XHRvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gQmFja2JvbmUncyBzZXQuXG5cdFx0cmV0ID0gb2xkU2V0LmNhbGwodGhpcywgYXR0cnMsIG9wdGlvbnMpO1xuXG5cdFx0aWYgKHRoaXMuX3RyYWNraW5nQ2hhbmdlcyAmJiAhb3B0aW9ucy5zaWxlbnQpIHtcblx0XHRcdF8uZWFjaChhdHRycywgXy5iaW5kKGZ1bmN0aW9uKHZhbCwga2V5KSB7XG5cdFx0XHRcdGlmIChfLmlzRXF1YWwodGhpcy5fb3JpZ2luYWxBdHRyc1trZXldLCB2YWwpKVxuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLl91bnNhdmVkQ2hhbmdlc1trZXldO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0dGhpcy5fdW5zYXZlZENoYW5nZXNba2V5XSA9IHZhbDtcblx0XHRcdH0sIHRoaXMpKTtcblx0XHRcdHRoaXMuX3RyaWdnZXJVbnNhdmVkQ2hhbmdlcygpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9KTtcblxuXHQvLyBJbnRlcmNlcHQgYG1vZGVsLnNhdmUoKWAgYW5kIHJlc2V0IHRyYWNraW5nL3Vuc2F2ZWRcblx0Ly8gY2hhbmdlcyBpZiBpdCB3YXMgc3VjY2Vzc2Z1bC5cblx0QmFja2JvbmUuc3luYyA9IF8ud3JhcChCYWNrYm9uZS5zeW5jLCBmdW5jdGlvbihvbGRTeW5jLCBtZXRob2QsIG1vZGVsLCBvcHRpb25zKSB7XG5cdFx0b3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcblxuXHRcdGlmIChtZXRob2QgPT0gJ3VwZGF0ZScpIHtcblx0XHRcdG9wdGlvbnMuc3VjY2VzcyA9IF8ud3JhcChvcHRpb25zLnN1Y2Nlc3MsIF8uYmluZChmdW5jdGlvbihvbGRTdWNjZXNzLCBkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuXHRcdFx0XHR2YXIgcmV0O1xuXHRcdFx0XHRpZiAob2xkU3VjY2VzcykgcmV0ID0gb2xkU3VjY2Vzcy5jYWxsKHRoaXMsIGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKTtcblx0XHRcdFx0aWYgKG1vZGVsLl90cmFja2luZ0NoYW5nZXMpIHtcblx0XHRcdFx0XHRtb2RlbC5fcmVzZXRUcmFja2luZygpO1xuXHRcdFx0XHRcdG1vZGVsLl90cmlnZ2VyVW5zYXZlZENoYW5nZXMoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fSwgdGhpcykpO1xuXHRcdH1cblx0XHRyZXR1cm4gb2xkU3luYyhtZXRob2QsIG1vZGVsLCBvcHRpb25zKTtcblx0fSk7XG5cbn0pKCk7XG5kZWZpbmUoXCJ2ZW5kb3IvYmFja2JvbmUudHJhY2tpdFwiLCBmdW5jdGlvbigpe30pO1xuXG4vKipcbiAqIEltYWdlIG9iamVjdCBtb2RlbCBmb3IgdXNlIGluIHZhcmlvdXMgbW9kZWxzIGZvciB0aGUgJ2ltYWdlJyBhdHRyaWJ1dGVcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE2LjBcbiAqL1xuZGVmaW5lKCAnTW9kZWxzL0ltYWdlJyxbXSwgZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLk1vZGVsLmV4dGVuZCgge1xuXG5cdFx0ZGVmYXVsdHM6IHtcblx0XHRcdGVuYWJsZWQ6ICdubycsXG5cdFx0XHRpZDogJycsXG5cdFx0XHRzaXplOiAnZnVsbCcsXG5cdFx0XHRzcmM6ICcnLFxuXHRcdH0sXG5cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuc3RhcnRUcmFja2luZygpO1xuXHRcdH0sXG5cblx0fSApO1xufSApO1xuXG4vKipcbiAqIE1vZGVsIHJlbGF0aW9uc2hpcHMgbWl4aW5cbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE2LjExXG4gKi9cbmRlZmluZSggJ01vZGVscy9fUmVsYXRpb25zaGlwcycsW10sIGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiB7XG5cblx0XHQvKipcblx0XHQgKiBEZWZhdWx0IHJlbGF0aW9uc2hpcCBzZXR0aW5ncyBvYmplY3Rcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRyZWxhdGlvbnNoaXBfZGVmYXVsdHM6IHtcblx0XHRcdHBhcmVudDoge30sXG5cdFx0XHRjaGlsZHJlbjoge30sXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbGF0aW9uc2hpcCBzZXR0aW5ncyBvYmplY3Rcblx0XHQgKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHRoZSBtb2RlbFxuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHJlbGF0aW9uc2hpcHM6IHt9LFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZSBhbGwgcGFyZW50IGFuZCBjaGlsZCByZWxhdGlvbnNoaXBzXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGluaXRfcmVsYXRpb25zaGlwczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHRcdHZhciByZWxzID0gdGhpcy5nZXRfcmVsYXRpb25zaGlwcygpO1xuXG5cdFx0XHQvLyBpbml0aWFsaXplIHBhcmVudCByZWxheHRpb25zaGlwc1xuXHRcdFx0Ly8gdXNlZnVsIHdoZW4gYWRkaW5nIGEgbW9kZWwgdG8gZW5zdXJlIHBhcmVudCBpcyBpbml0aWFsaXplZFxuXHRcdFx0aWYgKCByZWxzLnBhcmVudCAmJiBvcHRpb25zICYmIG9wdGlvbnMucGFyZW50ICkge1xuXHRcdFx0XHR0aGlzLnNldF9wYXJlbnQoIG9wdGlvbnMucGFyZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGluaXRpYWxpemUgYWxsIGNoaWxkcmVuIHJlbGF0aW9uc2hpcHNcblx0XHRcdF8uZWFjaCggcmVscy5jaGlsZHJlbiwgZnVuY3Rpb24oIGNoaWxkX2RhdGEsIGNoaWxkX2tleSApIHtcblxuXHRcdFx0XHRpZiAoICEgY2hpbGRfZGF0YS5jb25kaXRpb25hbCB8fCB0cnVlID09PSBjaGlsZF9kYXRhLmNvbmRpdGlvbmFsKCB0aGlzICkgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2hpbGRfdmFsID0gdGhpcy5nZXQoIGNoaWxkX2tleSApLFxuXHRcdFx0XHRcdFx0Y2hpbGQ7XG5cblx0XHRcdFx0XHRpZiAoIGNoaWxkX2RhdGEubG9va3VwICkge1xuXHRcdFx0XHRcdFx0Y2hpbGQgPSBjaGlsZF9kYXRhLmxvb2t1cCggY2hpbGRfdmFsICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggJ21vZGVsJyA9PT0gY2hpbGRfZGF0YS50eXBlICkge1xuXHRcdFx0XHRcdFx0Y2hpbGQgPSB3aW5kb3cubGxtc19idWlsZGVyLmNvbnN0cnVjdC5nZXRfbW9kZWwoIGNoaWxkX2RhdGEuY2xhc3MsIGNoaWxkX3ZhbCApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICdjb2xsZWN0aW9uJyA9PT0gY2hpbGRfZGF0YS50eXBlICkge1xuXHRcdFx0XHRcdFx0Y2hpbGQgPSB3aW5kb3cubGxtc19idWlsZGVyLmNvbnN0cnVjdC5nZXRfY29sbGVjdGlvbiggY2hpbGRfZGF0YS5jbGFzcywgY2hpbGRfdmFsICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5zZXQoIGNoaWxkX2tleSwgY2hpbGQgKTtcblxuXHRcdFx0XHRcdC8vIGlmIHRoZSBjaGlsZCBkZWZpbmVzIGEgcGFyZW50LCBzYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgb24gdGhlIGNoaWxkXG5cdFx0XHRcdFx0aWYgKCAnbW9kZWwnID09PSBjaGlsZF9kYXRhLnR5cGUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9tYXliZV9zZXRfcGFyZW50X3JlZmVyZW5jZSggY2hpbGQgKTtcblxuXHRcdFx0XHRcdC8vIHNhdmUgZGlyZWN0bHkgdG8gZWFjaCBtb2RlbCBpbiB0aGUgY29sbGVjdGlvblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICdjb2xsZWN0aW9uJyA9PT0gY2hpbGRfZGF0YS50eXBlICkge1xuXG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnQgPSB0aGlzO1xuXHRcdFx0XHRcdFx0Y2hpbGQuZWFjaCggZnVuY3Rpb24oIGNoaWxkX21vZGVsICkge1xuXG5cdFx0XHRcdFx0XHRcdHRoaXMuX21heWJlX3NldF9wYXJlbnRfcmVmZXJlbmNlKCBjaGlsZF9tb2RlbCApO1xuXG5cdFx0XHRcdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCB0aGlzICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgdGhlIHByb3BlcnR5IG5hbWVzIGZvciBhbGwgY2hpbGRyZW4gb2YgdGhlIG1vZGVsXG5cdFx0ICogQHJldHVybiAgIGFycmF5XG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMTFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMVxuXHRcdCAqL1xuXHRcdGdldF9jaGlsZF9wcm9wczogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBwcm9wcyA9IFtdO1xuXG5cdFx0XHRfLmVhY2goIHRoaXMuZ2V0X3JlbGF0aW9uc2hpcHMoKS5jaGlsZHJlbiwgZnVuY3Rpb24oIGRhdGEsIGtleSApIHtcblxuXHRcdFx0XHRpZiAoICEgZGF0YS5jb25kaXRpb25hbCB8fCB0cnVlID09PSBkYXRhLmNvbmRpdGlvbmFsKCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHMucHVzaCgga2V5ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0XHRyZXR1cm4gcHJvcHM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgdGhlIG1vZGVsJ3MgcGFyZW50IChpZiBzZXQpXG5cdFx0ICogQHJldHVybiAgIG9ianxmYWxzZVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Z2V0X3BhcmVudDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciByZWxzID0gdGhpcy5nZXRfcmVsYXRpb25zaGlwcygpO1xuXG5cdFx0XHRpZiAoIHJlbHMucGFyZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVscy5wYXJlbnQucmVmZXJlbmNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgcmVsYXRpb25zaGlwcyBmb3IgdGhlIG1vZGVsXG5cdFx0ICogRXh0ZW5kcyB3aXRoIGRlZmF1bHRzXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Z2V0X3JlbGF0aW9uc2hpcHM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRyZXR1cm4gJC5leHRlbmQoIHRydWUsIHRoaXMucmVsYXRpb25zaGlwcywgdGhpcy5yZWxhdGlvbnNoaXBfZGVmYXVsdHMgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZXQgdGhlIHBhcmVudCByZWZlcmVuY2UgZm9yIHRoZSBnaXZlbiBtb2RlbFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBvYmogICBwYXJlbnQgbW9kZWwgb2JqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHNldF9wYXJlbnQ6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHR0aGlzLnJlbGF0aW9uc2hpcHMucGFyZW50LnJlZmVyZW5jZSA9IG9iajtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU2V0IHVwIHRoZSBwYXJlbnQgcmVsYXRpb25zaGlwcyBmb3IgcXVhbGlmeWluZyBjaGlsZHJlbiBkdXJpbmcgcmVsYXRpb25zaGlwIGluaXRpYWxpemF0aW9uXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIG1vZGVsICBjaGlsZCBtb2RlbFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRfbWF5YmVfc2V0X3BhcmVudF9yZWZlcmVuY2U6IGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuXHRcdFx0aWYgKCAhIG1vZGVsIHx8ICEgbW9kZWwuZ2V0X3JlbGF0aW9uc2hpcHMgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciByZWxzID0gbW9kZWwuZ2V0X3JlbGF0aW9uc2hpcHMoKTtcblx0XHRcdGlmICggcmVscy5wYXJlbnQgJiYgcmVscy5wYXJlbnQubW9kZWwgPT09IHRoaXMuZ2V0KCAndHlwZScgKSApIHtcblx0XHRcdFx0bW9kZWwuc2V0X3BhcmVudCggdGhpcyApO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHR9O1xuXG59ICk7XG5cbi8qKlxuICogUXVpeiBRdWVzdGlvbiBDaG9pY2VcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE2LjBcbiAqL1xuZGVmaW5lKCAnTW9kZWxzL1F1ZXN0aW9uQ2hvaWNlJyxbICdNb2RlbHMvSW1hZ2UnLCAnTW9kZWxzL19SZWxhdGlvbnNoaXBzJyBdLCBmdW5jdGlvbiggSW1hZ2UsIFJlbGF0aW9uc2hpcHMgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLk1vZGVsLmV4dGVuZCggXy5kZWZhdWx0cygge1xuXG5cdFx0LyoqXG5cdFx0ICogTW9kZWwgcmVsYXRpb25zaGlwc1xuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHJlbGF0aW9uc2hpcHM6IHtcblx0XHRcdHBhcmVudDoge1xuXHRcdFx0XHRtb2RlbDogJ2xsbXNfcXVlc3Rpb24nLFxuXHRcdFx0XHR0eXBlOiAnbW9kZWwnLFxuXHRcdFx0fSxcblx0XHRcdGNoaWxkcmVuOiB7XG5cdFx0XHRcdGNob2ljZToge1xuXHRcdFx0XHRcdGNvbmRpdGlvbmFsOiBmdW5jdGlvbiggbW9kZWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gKCAnaW1hZ2UnID09PSBtb2RlbC5nZXQoICdjaG9pY2VfdHlwZScgKSApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Y2xhc3M6ICdJbWFnZScsXG5cdFx0XHRcdFx0bW9kZWw6ICdpbWFnZScsXG5cdFx0XHRcdFx0dHlwZTogJ21vZGVsJyxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE1vZGVsIGRlZmF1bHRzXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGRlZmF1bHRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlkOiBfLnVuaXF1ZUlkKCAndGVtcF8nICksXG5cdFx0XHRcdGNob2ljZTogJycsXG5cdFx0XHRcdGNob2ljZV90eXBlOiAndGV4dCcsXG5cdFx0XHRcdGNvcnJlY3Q6IGZhbHNlLFxuXHRcdFx0XHRtYXJrZXI6ICdBJyxcblx0XHRcdFx0cXVlc3Rpb25faWQ6ICcnLFxuXHRcdFx0XHR0eXBlOiAnY2hvaWNlJyxcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXJcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZGF0YSAgICAgb2JqZWN0IG9mIG1vZGVsIGF0dHJpYnV0ZXNcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgb3B0aW9ucyAgYWRkaXRpb25hbCBvcHRpb25zXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCBkYXRhLCBvcHRpb25zICkge1xuXG5cdFx0XHR0aGlzLnN0YXJ0VHJhY2tpbmcoKTtcblx0XHRcdHRoaXMuaW5pdF9yZWxhdGlvbnNoaXBzKCBvcHRpb25zICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgdGhlIGNob2ljZSdzIHBhcmVudCBxdWVzdGlvblxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9wYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29sbGVjdGlvbi5wYXJlbnQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSBJRCB1c2VkIHdoZW4gdHJhc2hpbmcgdGhlIG1vZGVsXG5cdFx0ICogQHJldHVybiAgIHN0cmluZ1xuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4xXG5cdFx0ICovXG5cdFx0Z2V0X3RyYXNoX2lkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldCggJ3F1ZXN0aW9uX2lkJyApICsgJzonICsgdGhpcy5nZXQoICdpZCcgKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lIGlmIFwic2VsZWN0aW9uXCIgaXMgZW5hYmxlZCBmb3IgdGhlIHF1ZXN0aW9uIHR5cGVcblx0XHQgKiBDaG9pY2UgdHlwZSBxdWVzdGlvbnMgYXJlIHNlbGVjdGFibGUgYnkgcmVvcmRlciB0eXBlIHF1ZXN0aW9ucyBhcmUgbm90IGJ1dCBzdGlsbCB1c2UgY2hvaWNlc1xuXHRcdCAqIEByZXR1cm4gICB7Qm9vbGVhbn1cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGlzX3NlbGVjdGFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0X3BhcmVudCgpLmdldCggJ3F1ZXN0aW9uX3R5cGUnICkuZ2V0X2Nob2ljZV9zZWxlY3RhYmxlKCk7XG5cdFx0fSxcblxuXHR9LCBSZWxhdGlvbnNoaXBzICkgKTtcblxufSApO1xuXG4vKipcbiAqIFF1ZXN0aW9uIENob2ljZSBDb2xsZWN0aW9uXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ0NvbGxlY3Rpb25zL1F1ZXN0aW9uQ2hvaWNlcycsWyAnTW9kZWxzL1F1ZXN0aW9uQ2hvaWNlJyBdLCBmdW5jdGlvbiggbW9kZWwgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKCB7XG5cblx0XHQvKipcblx0XHQgKiBNb2RlbCBmb3IgY29sbGVjdGlvbiBpdGVtc1xuXHRcdCAqIEB0eXBlICBvYmpcblx0XHQgKi9cblx0XHRtb2RlbDogbW9kZWwsXG5cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gcmVvcmRlciBjYWxsZWQgYnkgUXVlc3Rpb25MaXN0IHZpZXcgd2hlbiBzb3J0YWJsZSBkcm9wcyBvY2N1clxuXHRcdFx0dGhpcy5vbiggJ3Jlb3JkZXInLCB0aGlzLnVwZGF0ZV9vcmRlciApO1xuXG5cdFx0XHQvLyB3aGVuIGEgY2hvaWNlIGlzIGFkZGVkIG9yIHJlbW92ZWQsIHVwZGF0ZSBvcmRlclxuXHRcdFx0dGhpcy5vbiggJ2FkZCcsIHRoaXMudXBkYXRlX29yZGVyICk7XG5cdFx0XHR0aGlzLm9uKCAncmVtb3ZlJywgdGhpcy51cGRhdGVfb3JkZXIgKTtcblxuXHRcdFx0Ly8gd2hlbiBhIGNob2ljZSBpcyBhZGRlZCBvciByZW1vdmUsIGVuc3VyZSBtaW4vbWF4IGNvcnJlY3QgYW5zd2VycyBleGlzdFxuXHRcdFx0dGhpcy5vbiggJ2FkZCcsIHRoaXMudXBkYXRlX2NvcnJlY3QgKTtcblx0XHRcdHRoaXMub24oICdyZW1vdmUnLCB0aGlzLnVwZGF0ZV9jb3JyZWN0ICk7XG5cblx0XHRcdC8vIHdoZW4gYSBjaG9pY2UgaXMgdG9nZ2xlZCwgZW5zdXJlIG1pbi9tYXggY29ycmVjdCBleGlzdFxuXHRcdFx0dGhpcy5vbiggJ2NvcnJlY3QtdXBkYXRlJywgdGhpcy51cGRhdGVfY29ycmVjdCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSBudW1iZXIgb2YgY29ycmVjdCBjaG9pY2VzIGluIHRoZSBjb2xsZWN0aW9uXG5cdFx0ICogQHJldHVybiAgIGludFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Y291bnRfY29ycmVjdDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHJldHVybiBfLnNpemUoIHRoaXMuZ2V0X2NvcnJlY3QoKSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSBjb2xsZWN0aW9uIHJlZHVjZWQgdG8gb25seSBjb3JyZWN0IGNob2ljZXNcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRnZXRfY29ycmVjdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCBjaG9pY2UgKSB7XG5cdFx0XHRcdHJldHVybiBjaG9pY2UuZ2V0KCAnY29ycmVjdCcgKTtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRW5zdXJlIG1pbi9tYXggY29ycmVjdCBjaG9pY2VzIGV4aXN0IGluIHRoZSBjb2xsZWN0aW9uIGJhc2VkIG9uIHRoZSBxdWVzdGlvbidzIHNldHRpbmdzXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgICAgIGNob2ljZSAgbW9kZWwgb2YgdGhlIGNob2ljZSB0aGF0IHdhcyB0b2dnbGVkXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHVwZGF0ZV9jb3JyZWN0OiBmdW5jdGlvbiggY2hvaWNlICkge1xuXG5cdFx0XHRpZiAoICEgdGhpcy5wYXJlbnQuZ2V0KCAncXVlc3Rpb25fdHlwZScgKS5nZXRfY2hvaWNlX3NlbGVjdGFibGUoKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2libGluZ3MgPSB0aGlzLndpdGhvdXQoIGNob2ljZSApLCAvLyBleGNsdWRlIHRoZSB0b2dnbGVkIGNob2ljZSBmcm9tIGxvb3BzXG5cdFx0XHRcdHF1ZXN0aW9uID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRcdC8vIGlmIG11bHRpcGxlIGNob2ljZXMgYXJlbid0IGVuYWJsZWQgdHVybiBhbGwgb3RoZXIgY2hvaWNlcyB0byBpbmNvcnJlY3Rcblx0XHRcdGlmICggJ25vJyA9PT0gcXVlc3Rpb24uZ2V0KCAnbXVsdGlfY2hvaWNlcycgKSApIHtcblx0XHRcdFx0Xy5lYWNoKCBzaWJsaW5ncywgZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0XHRcdG1vZGVsLnNldCggJ2NvcnJlY3QnLCBmYWxzZSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIHdlIGRvbid0IGhhdmUgYSBzaW5nbGUgY29ycmV0IGFuc3dlciAmIHRoZSBxdWVzdGlvbiBoYXMgcG9pbnRzLCBzZXQgb25lXG5cdFx0XHQvLyBhbGxvd3MgdXNlcnMgdG8gY3JlYXRlIHF1aXp6ZXMgLyBxdWVzdGlvbnMgd2l0aCBubyBwb2ludHMgYW5kIHRoZXJlZm9yZSBubyBjb3JyZWN0IGFuc3dlcnMgYXJlIGFsbG93ZWRcblx0XHRcdGlmICggMCA9PT0gdGhpcy5jb3VudF9jb3JyZWN0KCkgJiYgcXVlc3Rpb24uZ2V0KCAncG9pbnRzJyApID4gMCApIHtcblx0XHRcdFx0dmFyIG1vZGVscyA9IDEgPT09IHRoaXMuc2l6ZSgpID8gdGhpcy5tb2RlbHMgOiBzaWJsaW5ncztcblx0XHRcdFx0Xy5maXJzdCggbW9kZWxzICkuc2V0KCAnY29ycmVjdCcsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBVcGRhdGUgdGhlIG1hcmtlciBhdHRyIG9mIGVhY2ggY2hvaWNlIGluIHRoZSBsaXN0IHRvIHJlZmxlY3QgdGhlIG9yZGVyIG9mIHRoZSBjb2xsZWN0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHVwZGF0ZV9vcmRlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0cXVlc3Rpb24gPSB0aGlzLnBhcmVudDtcblxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggY2hvaWNlICkge1xuXHRcdFx0XHRjaG9pY2Uuc2V0KCAnbWFya2VyJywgcXVlc3Rpb24uZ2V0KCAncXVlc3Rpb25fdHlwZScgKS5nZXRfY2hvaWNlX21hcmtlcnMoKVsgc2VsZi5pbmRleE9mKCBjaG9pY2UgKSBdICk7XG5cdFx0XHR9ICk7XG5cblx0XHR9LFxuXG5cdH0gKTtcblxufSApO1xuXG4vKipcbiAqIFF1aXogUXVlc3Rpb24gVHlwZVxuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTYuMFxuICovXG5kZWZpbmUoICdNb2RlbHMvUXVlc3Rpb25UeXBlJyxbXSwgZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLk1vZGVsLmV4dGVuZCgge1xuXG5cdFx0LyoqXG5cdFx0ICogR2V0IG1vZGVsIGRlZmF1bHQgYXR0cmlidXRlc1xuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGRlZmF1bHRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNob2ljZXM6IGZhbHNlLFxuXHRcdFx0XHRjbGFyaWZpY2F0aW9uczogdHJ1ZSxcblx0XHRcdFx0ZGVmYXVsdF9jaG9pY2VzOiBbXSxcblx0XHRcdFx0ZGVzY3JpcHRpb246IHRydWUsXG5cdFx0XHRcdGljb246ICdxdWVzdGlvbicsXG5cdFx0XHRcdGlkOiAnZ2VuZXJpYycsXG5cdFx0XHRcdGltYWdlOiB0cnVlLFxuXHRcdFx0XHRrZXl3b3JkczogW10sXG5cdFx0XHRcdG5hbWU6ICdHZW5lcmljJyxcblx0XHRcdFx0cGxhY2Vob2xkZXI6ICcnLFxuXHRcdFx0XHRwb2ludHM6IHRydWUsXG5cdFx0XHRcdHZpZGVvOiB0cnVlLFxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXRyaWV2ZSBhbiBhcnJheSBvZiBrZXl3b3JkcyBmb3IgdGhlIHF1ZXN0aW9uIHR5cGVcblx0XHQgKiBVc2VkIGZvciBmaWx0ZXJpbmcgcXVlc3Rpb25zIGJ5IHNlYXJjaCB0ZXJtIGluIHRoZSBxdWl6IGJ1aWxkZXJcblx0XHQgKiBAcmV0dXJuICAgYXJyYXlcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9rZXl3b3JkczogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBuYW1lID0gdGhpcy5nZXQoICduYW1lJyApLFxuXHRcdFx0XHR3b3JkcyA9IFsgbmFtZSBdO1xuXG5cdFx0XHRyZXR1cm4gd29yZHMuY29uY2F0KCB0aGlzLmdldCggJ2tleXdvcmRzJyApICkuY29uY2F0KCBuYW1lLnNwbGl0KCAnICcgKSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEdldCBtYXJrZXIgYXJyYXkgZm9yIHRoZSBxdWVzdGlvbiBjaG9pY2VzXG5cdFx0ICogQHJldHVybiAgIGFycmF5XG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRnZXRfY2hvaWNlX21hcmtlcnM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2V0X2Nob2ljZV9vcHRpb24oICdtYXJrZXJzJyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERldGVybWluZSBpZiB0aGUgcXVlc3Rpb24ncyBjaG9pY2VzIGFyZSBzZWxlY3RhYmxlXG5cdFx0ICogQHJldHVybiAgIGJvb2xcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9jaG9pY2Vfc2VsZWN0YWJsZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl9nZXRfY2hvaWNlX29wdGlvbiggJ3NlbGVjdGFibGUnICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSBjaG9pY2UgdHlwZSAodGV4dCxpbWFnZSlcblx0XHQgKiBAcmV0dXJuICAgc3RyaW5nXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRnZXRfY2hvaWNlX3R5cGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2V0X2Nob2ljZV9vcHRpb24oICd0eXBlJyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIGRlZmluZWQgbWluLiBjaG9pY2VzXG5cdFx0ICogQHJldHVybiAgIGludFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Z2V0X21pbl9jaG9pY2VzOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX2dldF9jaG9pY2Vfb3B0aW9uKCAnbWluJyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEdldCB0eXBlLWRlZmluZWQgbWF4IGNob2ljZXNcblx0XHQgKiBAcmV0dXJuICAgc3RyaW5nXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRnZXRfbWF4X2Nob2ljZXM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2V0X2Nob2ljZV9vcHRpb24oICdtYXgnICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lIGlmIG11bHRpLWNob2ljZSBzZWxlY3Rpb24gaXMgZW5hYmxlZFxuXHRcdCAqIEByZXR1cm4gICBib29sXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRnZXRfbXVsdGlfY2hvaWNlczogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBjaG9pY2VzID0gdGhpcy5nZXQoICdjaG9pY2VzJyApO1xuXG5cdFx0XHRpZiAoICEgY2hvaWNlcyAgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuX2dldF9jaG9pY2Vfb3B0aW9uKCAnbXVsdGknICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgZGF0YSBmcm9tIHRoZSB0eXBlJ3MgXCJjaG9pY2VzXCIgYXR0cmlidXRlXG5cdFx0ICogQWxsb3dzIHF1aWNrIGhhbmRsaW5nIG9mIHR5cGVzIHdpdGggbm8gY2hvaWNlIGRlZmluaXRpb25zIHcvbyBhZGRpdGlvbmFsIGNoZWNrc1xuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBvcHRpb24gIG5hbWUgb2YgdGhlIGNob2ljZSBvcHRpb24gdG8gcmV0cmlldmVcblx0XHQgKiBAcmV0dXJuICAgbWl4ZWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdF9nZXRfY2hvaWNlX29wdGlvbjogZnVuY3Rpb24oIG9wdGlvbiApIHtcblxuXHRcdFx0dmFyIGNob2ljZXMgPSB0aGlzLmdldCggJ2Nob2ljZXMnICk7XG5cblx0XHRcdGlmICggISBjaG9pY2VzIHx8ICEgY2hvaWNlc1sgb3B0aW9uIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNob2ljZXNbIG9wdGlvbiBdO1xuXG5cdFx0fSxcblxuXHR9ICk7XG5cbn0gKTtcblxuLyoqXG4gKiBRdWl6IFF1ZXN0aW9uXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ01vZGVscy9RdWVzdGlvbicsW1xuXHRcdCdNb2RlbHMvSW1hZ2UnLFxuXHRcdCdDb2xsZWN0aW9ucy9RdWVzdGlvbnMnLFxuXHRcdCdDb2xsZWN0aW9ucy9RdWVzdGlvbkNob2ljZXMnLFxuXHRcdCdNb2RlbHMvUXVlc3Rpb25UeXBlJyxcblx0XHQnTW9kZWxzL19SZWxhdGlvbnNoaXBzJ1xuXHRdLCBmdW5jdGlvbihcblx0XHRJbWFnZSxcblx0XHRRdWVzdGlvbnMsXG5cdFx0UXVlc3Rpb25DaG9pY2VzLFxuXHRcdFF1ZXN0aW9uVHlwZSxcblx0XHRSZWxhdGlvbnNoaXBzXG5cdCkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoIF8uZGVmYXVsdHMoIHtcblxuXHRcdC8qKlxuXHRcdCAqIE1vZGVsIHJlbGF0aW9uc2hpcHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRyZWxhdGlvbnNoaXBzOiB7XG5cdFx0XHRwYXJlbnQ6IHtcblx0XHRcdFx0bW9kZWw6ICdsbG1zX3F1aXonLFxuXHRcdFx0XHR0eXBlOiAnbW9kZWwnLFxuXHRcdFx0fSxcblx0XHRcdGNoaWxkcmVuOiB7XG5cdFx0XHRcdGNob2ljZXM6IHtcblx0XHRcdFx0XHRjbGFzczogJ1F1ZXN0aW9uQ2hvaWNlcycsXG5cdFx0XHRcdFx0bW9kZWw6ICdjaG9pY2UnLFxuXHRcdFx0XHRcdHR5cGU6ICdjb2xsZWN0aW9uJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0aW1hZ2U6IHtcblx0XHRcdFx0XHRjbGFzczogJ0ltYWdlJyxcblx0XHRcdFx0XHRtb2RlbDogJ2ltYWdlJyxcblx0XHRcdFx0XHR0eXBlOiAnbW9kZWwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRxdWVzdGlvbnM6IHtcblx0XHRcdFx0XHRjbGFzczogJ1F1ZXN0aW9ucycsXG5cdFx0XHRcdFx0Y29uZGl0aW9uYWw6IGZ1bmN0aW9uKCBtb2RlbCApIHtcblx0XHRcdFx0XHRcdHZhciB0eXBlID0gbW9kZWwuZ2V0KCAncXVlc3Rpb25fdHlwZScgKSxcblx0XHRcdFx0XHRcdFx0dHlwZV9pZCA9IF8uaXNTdHJpbmcoIHR5cGUgKSA/IHR5cGUgOiB0eXBlLmdldCggJ2lkJyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuICggJ2dyb3VwJyA9PT0gdHlwZV9pZCApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bW9kZWw6ICdsbG1zX3F1ZXN0aW9uJyxcblx0XHRcdFx0XHR0eXBlOiAnY29sbGVjdGlvbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHF1ZXN0aW9uX3R5cGU6IHtcblx0XHRcdFx0XHRjbGFzczogJ1F1ZXN0aW9uVHlwZScsXG5cdFx0XHRcdFx0bG9va3VwOiBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdFx0aWYgKCBfLmlzU3RyaW5nKCB2YWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHdpbmRvdy5sbG1zX2J1aWxkZXIucXVlc3Rpb25zLmdldCggdmFsICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bW9kZWw6ICdxdWVzdGlvbl90eXBlJyxcblx0XHRcdFx0XHR0eXBlOiAnbW9kZWwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBNb2RlbCBkZWZhdWx0c1xuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGRlZmF1bHRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlkOiBfLnVuaXF1ZUlkKCAndGVtcF8nICksXG5cdFx0XHRcdGNob2ljZXM6IFtdLFxuXHRcdFx0XHRjb250ZW50OiAnJyxcblx0XHRcdFx0ZGVzY3JpcHRpb25fZW5hYmxlZDogJ25vJyxcblx0XHRcdFx0aW1hZ2U6IHt9LFxuXHRcdFx0XHRtdWx0aV9jaG9pY2VzOiAnbm8nLFxuXHRcdFx0XHRtZW51X29yZGVyOiAxLFxuXHRcdFx0XHRwb2ludHM6IDEsXG5cdFx0XHRcdHF1ZXN0aW9uX3R5cGU6ICdnZW5lcmljJyxcblx0XHRcdFx0cXVlc3Rpb25zOiBbXSwgLy8gZm9yIHF1ZXN0aW9uIGdyb3Vwc1xuXHRcdFx0XHRwYXJlbnRfaWQ6ICcnLFxuXHRcdFx0XHR0aXRsZTogJycsXG5cdFx0XHRcdHR5cGU6ICdsbG1zX3F1ZXN0aW9uJyxcblx0XHRcdFx0dmlkZW9fZW5hYmxlZDogJ25vJyxcblx0XHRcdFx0dmlkZW9fc3JjOiAnJyxcblxuXHRcdFx0XHRfZXhwYW5kZWQ6IGZhbHNlLFxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplclxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBkYXRhICAgICBvYmplY3Qgb2YgZGF0YSBmb3IgdGhlIG1vZGVsXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIG9wdGlvbnMgIGFkZGl0aW9uYWwgb3B0aW9uc1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbiggZGF0YSwgb3B0aW9ucyApIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLnN0YXJ0VHJhY2tpbmcoKTtcblx0XHRcdHRoaXMuaW5pdF9yZWxhdGlvbnNoaXBzKCBvcHRpb25zICk7XG5cblx0XHRcdGlmICggZmFsc2UgIT09IHRoaXMuZ2V0KCAncXVlc3Rpb25fdHlwZScgKS5jaG9pY2VzICkge1xuXG5cdFx0XHRcdHRoaXMuX2Vuc3VyZV9taW5fY2hvaWNlcygpO1xuXG5cdFx0XHRcdC8vIHdoZW4gYSBjaG9pY2UgaXMgcmVtb3ZlZCwgbWF5YmUgYWRkIGJhY2sgc29tZSBkZWZhdWx0cyBzbyB3ZSBhbHdheXMgaGF2ZSB0aGUgbWluaW11bVxuXHRcdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLmdldCggJ2Nob2ljZXMnICksICdyZW1vdmUnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQvLyBuZXcgaXRtZXMgYXJlIGFkZGVkIGF0IGluZGV4IDAgd2hlbiB0aGVyZSdzIG9ubHkgMSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLCBub3Qgc3VyZSB3aHkgZXhhY3RseS4uLlxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c2VsZi5fZW5zdXJlX21pbl9jaG9pY2VzKCk7XG5cdFx0XHRcdFx0fSwgMCApO1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZW5zdXJlIHF1ZXN0aW9uIHR5cGVzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwb2ludHMgZG9uJ3QgcmVjb3JkIGRlZmF1bHQgMSBwb2ludCBpbiBkYXRhYmFzZVxuXHRcdFx0aWYgKCAhIHRoaXMuZ2V0KCAncXVlc3Rpb25fdHlwZScgKS5nZXQoICdwb2ludHMnICkgKSB7XG5cdFx0XHRcdHRoaXMuc2V0KCAncG9pbnRzJywgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHRfLmRlbGF5KCBmdW5jdGlvbiggc2VsZiApIHtcblx0XHRcdFx0c2VsZi5vbiggJ2NoYW5nZTpwb2ludHMnLCBzZWxmLmdldF9wYXJlbnQoKS51cGRhdGVfcG9pbnRzLCBzZWxmLmdldF9wYXJlbnQoKSApO1xuXHRcdFx0fSwgMSwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBhIG5ldyBxdWVzdGlvbiBjaG9pY2Vcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZGF0YSAgICAgb2JqZWN0IG9mIGNob2ljZSBkYXRhXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIG9wdGlvbnMgIGFkZGl0aW9uYWwgb3B0aW9uc1xuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0YWRkX2Nob2ljZTogZnVuY3Rpb24oIGRhdGEsIG9wdGlvbnMgKSB7XG5cblx0XHRcdHZhciBtYXggPSB0aGlzLmdldCggJ3F1ZXN0aW9uX3R5cGUnICkuZ2V0X21heF9jaG9pY2VzKCk7XG5cdFx0XHRpZiAoIHRoaXMuZ2V0KCAnY2hvaWNlcycgKS5zaXplKCkgPj0gbWF4ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHRcdGRhdGEuY2hvaWNlX3R5cGUgPSB0aGlzLmdldCggJ3F1ZXN0aW9uX3R5cGUnICkuZ2V0X2Nob2ljZV90eXBlKCk7XG5cdFx0XHRkYXRhLnF1ZXN0aW9uX2lkID0gdGhpcy5nZXQoICdpZCcgKTtcblx0XHRcdG9wdGlvbnMucGFyZW50ID0gdGhpcztcblxuXHRcdFx0dmFyIGNob2ljZSA9IHRoaXMuZ2V0KCAnY2hvaWNlcycgKS5hZGQoIGRhdGEsIG9wdGlvbnMgKTtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdxdWVzdGlvbi1hZGQtY2hvaWNlJywgY2hvaWNlLCB0aGlzICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ29sbGFwc2UgcXVlc3Rpb25fdHlwZSBhdHRyaWJ1dGUgZHVyaW5nIGZ1bGwgc3luY3MgdG8gc2F2ZSB0byBkYXRhYmFzZVxuXHRcdCAqIE5vdCBuZWVkZWQgYmVjYXVzZSBxdWVzdGlvbiB0eXBlcyBjYW5ub3QgYmUgYWRqdXN0ZWQgYWZ0ZXIgcXVlc3Rpb24gY3JlYXRpb25cblx0XHQgKiBDYWxsZWQgZnJvbSBzeW5jIGNvbnRyb2xsZXJcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgYXR0cyAgICAgICBmbGF0IG9iamVjdCBvZiBhdHRyaWJ1dGVzIHRvIGJlIHNhdmVkIHRvIGRiXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIHN5bmNfdHlwZSAgZnVsbCBvciBwYXJ0aWFsXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsIGluZGljYXRlcyBhIGZvcmNlIHJlc3luYyBvciB0aGF0IHRoZSBtb2RlbCBpc24ndCBwZXJzaXN0ZWQgeWV0XG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0YmVmb3JlX3NhdmU6IGZ1bmN0aW9uKCBhdHRzLCBzeW5jX3R5cGUgICkge1xuXHRcdFx0aWYgKCAnZnVsbCcgPT09IHN5bmNfdHlwZSApIHtcblx0XHRcdFx0YXR0cy5xdWVzdGlvbl90eXBlID0gdGhpcy5nZXQoICdxdWVzdGlvbl90eXBlJyApLmdldCggJ2lkJyApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGF0dHM7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSBtb2RlbCdzIHBhcmVudCAoaWYgc2V0KVxuXHRcdCAqIEByZXR1cm4gICBvYmp8ZmFsc2Vcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9wYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgcmVscyA9IHRoaXMuZ2V0X3JlbGF0aW9uc2hpcHMoKTtcblxuXHRcdFx0aWYgKCByZWxzLnBhcmVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmNvbGxlY3Rpb24gJiYgdGhpcy5jb2xsZWN0aW9uLnBhcmVudCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb2xsZWN0aW9uLnBhcmVudDtcblx0XHRcdFx0fSBlbHNlIGlmICggcmVscy5wYXJlbnQucmVmZXJlbmNlICkge1xuXHRcdFx0XHRcdHJldHVybiByZWxzLnBhcmVudC5yZWZlcmVuY2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEdldHMgdGhlIGluZGV4IG9mIHRoZSBxdWVzdGlvbiB3aXRoaW4gaXQncyBwYXJlbnRcblx0XHQgKiBRdWVzdGlvbiBudW1iZXJzIHNraXAgY29udGVudCBlbGVtZW50c1xuXHRcdCAqICYgY29udGVudCBlbGVtZW50cyBza2lwIHF1ZXN0aW9uc1xuXHRcdCAqIEByZXR1cm4gICBpbnRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF90eXBlX2luZGV4OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gY3VycmVudCBtb2RlbHMgdHlwZSwgdXNlZCB0byBjaGVjayB0aGUgcHJlZGljYXRlIGluIHRoZSBmaWx0ZXIgZnVuY3Rpb24gYmVsb3dcblx0XHRcdHZhciBjdXJyX3R5cGUgPSB0aGlzLmdldCggJ3F1ZXN0aW9uX3R5cGUnICkuZ2V0KCAnaWQnICksXG5cdFx0XHRcdHF1ZXN0aW9ucztcblxuXHRcdFx0cXVlc3Rpb25zID0gdGhpcy5jb2xsZWN0aW9uLmZpbHRlciggZnVuY3Rpb24oIHF1ZXN0aW9uICkge1xuXG5cdFx0XHRcdHZhciB0eXBlID0gcXVlc3Rpb24uZ2V0KCAncXVlc3Rpb25fdHlwZScgKS5nZXQoICdpZCcgKTtcblxuXHRcdFx0XHQvLyBpZiBjdXJyZW50IG1vZGVsIGlzIG5vdCBjb250ZW50LCByZXR1cm4gYWxsIG5vbi1jb250ZW50IHF1ZXN0aW9uc1xuXHRcdFx0XHRpZiAoIGN1cnJfdHlwZSAhPT0gJ2NvbnRlbnQnICkge1xuXHRcdFx0XHRcdHJldHVybiAoICdjb250ZW50JyAhPT0gdHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY3VycmVudCBtb2RlbCBpcyBjb250ZW50LCByZXR1cm4gb25seSBjb250ZW50IHF1ZXN0aW9uc1xuXHRcdFx0XHRyZXR1cm4gJ2NvbnRlbnQnID09PSB0eXBlO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybiBxdWVzdGlvbnMuaW5kZXhPZiggdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEdldHMgaXRlcmF0b3IgZm9yIHRoZSBnaXZlbiB0eXBlXG5cdFx0ICogUXVlc3Rpb25zIHVzZSBudW1iZXJzIGFuZCBjb250ZW50IHVzZXMgYWxwaGFiZXRcblx0XHQgKiBAcmV0dXJuICAgbWl4ZWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF90eXBlX2l0ZXJhdG9yOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGluZGV4ID0gdGhpcy5nZXRfdHlwZV9pbmRleCgpO1xuXG5cdFx0XHRpZiAoIC0xID09PSBpbmRleCApIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICdjb250ZW50JyA9PT0gdGhpcy5nZXQoICdxdWVzdGlvbl90eXBlJyApLmdldCggJ2lkJyApICkge1xuXHRcdFx0XHR2YXIgYWxwaGFiZXQgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonLnNwbGl0KCAnJyApO1xuXHRcdFx0XHRyZXR1cm4gYWxwaGFiZXRbIGluZGV4IF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cblx0XHR9LFxuXG5cblx0XHRnZXRfcWlkOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMuZ2V0X3BhcmVudF9xdWVzdGlvbigpLFxuXHRcdFx0XHRwcmVmaXggPSAnJztcblxuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0cHJlZml4ID0gcGFyZW50LmdldF9xaWQoKSArICcuJztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZXR1cm4gc2hvcnRfaWQgKyB0aGlzLmdldF90eXBlX2l0ZXJhdG9yKCk7XG5cdFx0XHRyZXR1cm4gcHJlZml4ICsgdGhpcy5nZXRfdHlwZV9pdGVyYXRvcigpO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSBwYXJlbnQgcXVlc3Rpb24gKGlmIHRoZSBxdWVzdGlvbiBpcyBpbiBhIHF1ZXN0aW9uIGdyb3VwKVxuXHRcdCAqIEByZXR1cm4gICBvYmp8ZmFsc2Vcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9wYXJlbnRfcXVlc3Rpb246IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHRoaXMuaXNfaW5fZ3JvdXAoKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb2xsZWN0aW9uLnBhcmVudDtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgdGhlIHBhcmVudCBxdWl6XG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Z2V0X3BhcmVudF9xdWl6OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldF9wYXJlbnQoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUG9pbnRzIGdldHRlclxuXHRcdCAqIGVuc3VyZXMgdGhhdCAwIGlzIGFsd2F5cyByZXR1cm5lZCBpZiB0aGUgcXVlc3Rpb24gdHlwZSBkb2Vzbid0IHN1cHBvcnQgcG9pbnRzXG5cdFx0ICogQHJldHVybiAgIGludFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Z2V0X3BvaW50czogZnVuY3Rpb24oKSB7XG5cblx0XHRcdGlmICggISB0aGlzLmdldCggJ3F1ZXN0aW9uX3R5cGUnICkuZ2V0KCAncG9pbnRzJyApICkge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCAncG9pbnRzJyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSBxdWVzdGlvbnMgcGVyY2VudGFnZSB2YWx1ZSB3aXRoaW4gdGhlIHF1aXpcblx0XHQgKiBAcmV0dXJuICAgc3RyaW5nXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRnZXRfcG9pbnRzX3BlcmNlbnRhZ2U6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgdG90YWwgPSB0aGlzLmdldF9wYXJlbnQoKS5nZXQoICdfcG9pbnRzJyApLFxuXHRcdFx0XHRwb2ludHMgPSB0aGlzLmdldCggJ3BvaW50cycgKTtcblxuXHRcdFx0aWYgKCAwID09PSB0b3RhbCApIHtcblx0XHRcdFx0cmV0dXJuICcwJSc7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoICggcG9pbnRzIC8gdG90YWwgKSAqIDEwMCApLnRvRml4ZWQoIDIgKSArICclJztcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEZXRlcmluZSBpZiB0aGUgcXVlc3Rpb24gYmVsb25ncyB0byBhIHF1ZXN0aW9uIGdyb3VwXG5cdFx0ICogQHJldHVybiAgIHtCb29sZWFufVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aXNfaW5fZ3JvdXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRyZXR1cm4gKCAncXVlc3Rpb24nID09PSB0aGlzLmNvbGxlY3Rpb24ucGFyZW50LmdldCggJ3R5cGUnICkgKTtcblxuXHRcdH0sXG5cblx0XHRfZW5zdXJlX21pbl9jaG9pY2VzOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGNob2ljZXMgPSB0aGlzLmdldCggJ2Nob2ljZXMnICk7XG5cdFx0XHR3aGlsZSAoIGNob2ljZXMuc2l6ZSgpIDwgdGhpcy5nZXQoICdxdWVzdGlvbl90eXBlJyApLmdldF9taW5fY2hvaWNlcygpICkge1xuXHRcdFx0XHR0aGlzLmFkZF9jaG9pY2UoKTtcblx0XHRcdH1cblxuXHRcdH0sXG5cblx0fSwgUmVsYXRpb25zaGlwcyApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBRdWVzdGlvbnMgQ29sbGVjdGlvblxuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTYuMFxuICovXG5kZWZpbmUoICdDb2xsZWN0aW9ucy9RdWVzdGlvbnMnLFsgJ01vZGVscy9RdWVzdGlvbicgXSwgZnVuY3Rpb24oIG1vZGVsICkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCgge1xuXG5cdFx0LyoqXG5cdFx0ICogTW9kZWwgZm9yIGNvbGxlY3Rpb24gaXRlbXNcblx0XHQgKiBAdHlwZSAgb2JqXG5cdFx0ICovXG5cdFx0bW9kZWw6IG1vZGVsLFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gcmVvcmRlciBjYWxsZWQgYnkgUXVlc3Rpb25MaXN0IHZpZXcgd2hlbiBzb3J0YWJsZSBkcm9wcyBvY2N1clxuXHRcdFx0dGhpcy5vbiggJ3Jlb3JkZXInLCB0aGlzLnVwZGF0ZV9vcmRlciApO1xuXG5cdFx0XHQvLyB3aGVuIGEgcXVlc3Rpb24gaXMgYWRkZWQgb3IgcmVtb3ZlZCwgdXBkYXRlIG9yZGVyXG5cdFx0XHR0aGlzLm9uKCAnYWRkJywgdGhpcy51cGRhdGVfb3JkZXIgKTtcblx0XHRcdHRoaXMub24oICdyZW1vdmUnLCB0aGlzLnVwZGF0ZV9vcmRlciApO1xuXG5cdFx0XHR0aGlzLm9uKCAnYWRkJywgdGhpcy51cGRhdGVfcGFyZW50ICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlIHRoZSBvcmRlciBhdHRyIG9mIGVhY2ggcXVlc3Rpb24gaW4gdGhlIGxpc3QgdG8gcmVmbGVjdCB0aGUgb3JkZXIgb2YgdGhlIGNvbGxlY3Rpb25cblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0dXBkYXRlX29yZGVyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBxdWVzdGlvbiApIHtcblxuXHRcdFx0XHRxdWVzdGlvbi5zZXQoICdtZW51X29yZGVyJywgc2VsZi5pbmRleE9mKCBxdWVzdGlvbiApICsgMSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBhZGRpbmcgYSBxdWVzdGlvbiB0byBhIHF1ZXN0aW9uIGxpc3QsIHVwZGF0ZSB0aGUgcXVlc3Rpb24ncyBwYXJlbnRcblx0XHQgKiBXaWxsIGVuc3VyZSB0aGF0IHF1ZXN0aW9ucyBtb3ZlZCBpbnRvIGFuZCBvdXQgb2YgZ3JvdXBzIGFsd2F5cyBoYXZlIHRoZSBjb3JlcmN0IHBhcmVudF9pZFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBtb2RlbCAgaW5zdGFuY2Ugb2YgdGhlIHF1ZXN0aW9uIG1vZGVsXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHVwZGF0ZV9wYXJlbnQ6IGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuXHRcdFx0bW9kZWwuc2V0KCAncGFyZW50X2lkJywgdGhpcy5wYXJlbnQuZ2V0KCAnaWQnICkgKTtcblxuXHRcdH0sXG5cblx0fSApO1xuXG59ICk7XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIE1vZGVsc1xuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTcuMVxuICovXG5kZWZpbmUoICdNb2RlbHMvX1V0aWxpdGllcycsW10sIGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiB7XG5cblx0XHRmaWVsZHM6IFtdLFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgdGhlIGVkaXQgcG9zdCBsaW5rIGZvciB0aGUgY3VycmVudCBtb2RlbFxuXHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9lZGl0X3Bvc3RfbGluazogZnVuY3Rpb24oKSB7XG5cblx0XHRcdGlmICggdGhpcy5oYXNfdGVtcF9pZCgpICkge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB3aW5kb3cubGxtc19idWlsZGVyLmFkbWluX3VybCArICdwb3N0LnBocD9wb3N0PScgKyB0aGlzLmdldCggJ2lkJyApICsgJyZhY3Rpb249ZWRpdCc7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgc2NoZW1hIGZpZWxkcyBkZWZpbmVkIGZvciB0aGUgbW9kZWxcblx0XHQgKiBAcmV0dXJuICAgb2JqZWN0XG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjFcblx0XHQgKi9cblx0XHRnZXRfc2V0dGluZ3NfZmllbGRzOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNjaGVtYSA9IHRoaXMuc2NoZW1hIHx8IHt9O1xuXHRcdFx0cmV0dXJuIHdpbmRvdy5sbG1zX2J1aWxkZXIuc2NoZW1hcy5nZXQoIHNjaGVtYSwgdGhpcy5nZXQoICd0eXBlJyApLnJlcGxhY2UoICdsbG1zXycsICcnICksIHRoaXMgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmUgaWYgdGhlIG1vZGVsIGhhcyBhIHRlbXBvcmFyeSBJRFxuXHRcdCAqIEByZXR1cm4gICB7Qm9vbGVhbn1cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGhhc190ZW1wX2lkOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0cmV0dXJuICggISBfLmlzTnVtYmVyKCB0aGlzLmdldCggJ2lkJyApICkgJiYgMCA9PT0gdGhpcy5nZXQoICdpZCcgKS5pbmRleE9mKCAndGVtcF8nICkgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplcyAzcmQgcGFydHkgY3VzdG9tIHNjaGVtYSAoZmllbGQpIGRhdGEgZm9yIGEgbW9kZWxcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4wXG5cdFx0ICovXG5cdFx0aW5pdF9jdXN0b21fc2NoZW1hOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGdyb3VwcyA9IF8uZmlsdGVyKCB0aGlzLmdldF9zZXR0aW5nc19maWVsZHMoKSwgZnVuY3Rpb24oIGdyb3VwICkge1xuXHRcdFx0XHRyZXR1cm4gKCBncm91cC5jdXN0b20gKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0Xy5lYWNoKCBncm91cHMsIGZ1bmN0aW9uKCBncm91cCApIHtcblx0XHRcdFx0Xy5lYWNoKCBfLmZsYXR0ZW4oICBncm91cC5maWVsZHMgKSwgZnVuY3Rpb24oIGZpZWxkICkge1xuXG5cblx0XHRcdFx0XHR2YXIga2V5cyA9IFsgZmllbGQuYXR0cmlidXRlIF0sXG5cdFx0XHRcdFx0XHRjdXN0b21zID0gdGhpcy5nZXQoICdjdXN0b20nICk7XG5cblx0XHRcdFx0XHRpZiAoIGZpZWxkLnN3aXRjaF9hdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0XHRrZXlzLnB1c2goIGZpZWxkLnN3aXRjaF9hdHRyaWJ1dGUgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfLmVhY2goIGtleXMsIGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0XHR2YXIgYXR0ciA9IGZpZWxkLmF0dHJpYnV0ZV9wcmVmaXggPyBmaWVsZC5hdHRyaWJ1dGVfcHJlZml4ICsga2V5IDoga2V5O1xuXHRcdFx0XHRcdFx0aWYgKCBjdXN0b21zICYmIGN1c3RvbXNbIGF0dHIgXSApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5zZXQoIGtleSwgY3VzdG9tc1sgYXR0ciBdWzBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0XHRcdH0sIHRoaXMgKTtcblx0XHRcdH0sIHRoaXMgKTtcblxuXHRcdH0sXG5cblx0fTtcblxufSApO1xuXG4vKipcbiAqIFF1aXogU2NoZW1hXG4gKiBAc2luY2UgICAgMy4xNy42XG4gKiBAdmVyc2lvbiAgMy4xNy42XG4gKi9cbmRlZmluZSggJ1NjaGVtYXMvUXVpeicsW10sIGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiB7XG5cblx0XHRkZWZhdWx0OiB7XG5cdFx0XHR0aXRsZTogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0dlbmVyYWwgU2V0dGluZ3MnICksXG5cdFx0XHR0b2dnbGVhYmxlOiB0cnVlLFxuXHRcdFx0ZmllbGRzOiBbXG5cdFx0XHRcdFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRhdHRyaWJ1dGU6ICdwZXJtYWxpbmsnLFxuXHRcdFx0XHRcdFx0aWQ6ICdwZXJtYWxpbmsnLFxuXHRcdFx0XHRcdFx0dHlwZTogJ3Blcm1hbGluaycsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSwgW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ2NvbnRlbnQnLFxuXHRcdFx0XHRcdFx0aWQ6ICdkZXNjcmlwdGlvbicsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0Rlc2NyaXB0aW9uJyApLFxuXHRcdFx0XHRcdFx0dHlwZTogJ2VkaXRvcicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSwgW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ3Bhc3NpbmdfcGVyY2VudCcsXG5cdFx0XHRcdFx0XHRpZDogJ3Bhc3NpbmctcGVyY2VudCcsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1Bhc3NpbmcgUGVyY2VudGFnZScgKSxcblx0XHRcdFx0XHRcdG1pbjogMCxcblx0XHRcdFx0XHRcdG1heDogMTAwLFxuXHRcdFx0XHRcdFx0dGlwOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnTWluaW11bSBwZXJjZW50YWdlIG9mIHRvdGFsIHBvaW50cyByZXF1aXJlZCB0byBwYXNzIHRoZSBxdWl6JyApLFxuXHRcdFx0XHRcdFx0dHlwZTogJ251bWJlcicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRhdHRyaWJ1dGU6ICdhbGxvd2VkX2F0dGVtcHRzJyxcblx0XHRcdFx0XHRcdGlkOiAnYWxsb3dlZC1hdHRlbXB0cycsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0xpbWl0IEF0dGVtcHRzJyApLFxuXHRcdFx0XHRcdFx0c3dpdGNoX2F0dHJpYnV0ZTogJ2xpbWl0X2F0dGVtcHRzJyxcblx0XHRcdFx0XHRcdHRpcDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0xpbWl0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aW1lcyBhIHN0dWRlbnQgY2FuIHRha2UgdGhpcyBxdWl6JyApLFxuXHRcdFx0XHRcdFx0dHlwZTogJ3N3aXRjaC1udW1iZXInLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YXR0cmlidXRlOiAndGltZV9saW1pdCcsXG5cdFx0XHRcdFx0XHRpZDogJ3RpbWUtbGltaXQnLFxuXHRcdFx0XHRcdFx0bGFiZWw6IExMTVMubDEwbi50cmFuc2xhdGUoICdUaW1lIExpbWl0JyApLFxuXHRcdFx0XHRcdFx0bWluOiAxLFxuXHRcdFx0XHRcdFx0bWF4OiAzNjAsXG5cdFx0XHRcdFx0XHRzd2l0Y2hfYXR0cmlidXRlOiAnbGltaXRfdGltZScsXG5cdFx0XHRcdFx0XHR0aXA6IExMTVMubDEwbi50cmFuc2xhdGUoICdFbmZvcmNlIGEgbWF4aW11bSBudW1iZXIgb2YgbWludXRlcyBhIHN0dWRlbnQgY2FuIHNwZW5kIG9uIGVhY2ggYXR0ZW1wdCcgKSxcblx0XHRcdFx0XHRcdHR5cGU6ICdzd2l0Y2gtbnVtYmVyJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLCBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YXR0cmlidXRlOiAnc2hvd19jb3JyZWN0X2Fuc3dlcicsXG5cdFx0XHRcdFx0XHRpZDogJ3Nob3ctY29ycmVjdC1hbnN3ZXInLFxuXHRcdFx0XHRcdFx0bGFiZWw6IExMTVMubDEwbi50cmFuc2xhdGUoICdTaG93IENvcnJlY3QgQW5zd2VycycgKSxcblx0XHRcdFx0XHRcdHRpcDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1doZW4gZW5hYmxlZCwgc3R1ZGVudHMgd2lsbCBiZSBzaG93biB0aGUgY29ycmVjdCBhbnN3ZXIgdG8gYW55IHF1ZXN0aW9uIHRoZXkgYW5zd2VyZWQgaW5jb3JyZWN0bHkuJyApLFxuXHRcdFx0XHRcdFx0dHlwZTogJ3N3aXRjaCcsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRhdHRyaWJ1dGU6ICdyYW5kb21fcXVlc3Rpb25zJyxcblx0XHRcdFx0XHRcdGlkOiAncmFuZG9tLXF1ZXN0aW9ucycsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1JhbmRvbWl6ZSBRdWVzdGlvbiBPcmRlcicgKSxcblx0XHRcdFx0XHRcdHRpcDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0Rpc3BsYXkgcXVlc3Rpb25zIGluIGEgcmFuZG9tIG9yZGVyIGZvciBlYWNoIGF0dGVtcHQuIENvbnRlbnQgcXVlc3Rpb25zIGFyZSBsb2NrZWQgaW50byB0aGVpciBkZWZpbmVkIHBvc2l0aW9ucy4nICksXG5cdFx0XHRcdFx0XHR0eXBlOiAnc3dpdGNoJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXG5cdFx0XHRdLFxuXHRcdH0sXG5cblx0fTtcblxufSApO1xuXG4vKipcbiAqIFF1aXogTW9kZWxcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE5LjJcbiAqL1xuZGVmaW5lKCAnTW9kZWxzL1F1aXonLFtcblx0XHQnQ29sbGVjdGlvbnMvUXVlc3Rpb25zJyxcblx0XHQnTW9kZWxzL0xlc3NvbicsXG5cdFx0J01vZGVscy9RdWVzdGlvbicsXG5cdFx0J01vZGVscy9fUmVsYXRpb25zaGlwcycsXG5cdFx0J01vZGVscy9fVXRpbGl0aWVzJyxcblx0XHQnU2NoZW1hcy9RdWl6Jyxcblx0XSwgZnVuY3Rpb24oXG5cdFx0UXVlc3Rpb25zLFxuXHRcdExlc3Nvbixcblx0XHRRdWVzdGlvbixcblx0XHRSZWxhdGlvbnNoaXBzLFxuXHRcdFV0aWxpdGllcyxcblx0XHRRdWl6U2NoZW1hXG5cdCkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoIF8uZGVmYXVsdHMoIHtcblxuXHRcdC8qKlxuXHRcdCAqIG1vZGVsIHJlbGF0aW9uc2hpcHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRyZWxhdGlvbnNoaXBzOiB7XG5cdFx0XHRwYXJlbnQ6IHtcblx0XHRcdFx0bW9kZWw6ICdsZXNzb24nLFxuXHRcdFx0XHR0eXBlOiAnbW9kZWwnLFxuXHRcdFx0fSxcblx0XHRcdGNoaWxkcmVuOiB7XG5cdFx0XHRcdHF1ZXN0aW9uczoge1xuXHRcdFx0XHRcdGNsYXNzOiAnUXVlc3Rpb25zJyxcblx0XHRcdFx0XHRtb2RlbDogJ2xsbXNfcXVlc3Rpb24nLFxuXHRcdFx0XHRcdHR5cGU6ICdjb2xsZWN0aW9uJyxcblx0XHRcdFx0fSxcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogTGVzc29uIFNldHRpbmdzIFNjaGVtYVxuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHNjaGVtYTogUXVpelNjaGVtYSxcblxuXHRcdC8qKlxuXHRcdCAqIE5ldyBsZXNzb24gZGVmYXVsdHNcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjZcblx0XHQgKi9cblx0XHRkZWZhdWx0czogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlkOiBfLnVuaXF1ZUlkKCAndGVtcF8nICksXG5cdFx0XHRcdHRpdGxlOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnTmV3IFF1aXonICksXG5cdFx0XHRcdHR5cGU6ICdsbG1zX3F1aXonLFxuXHRcdFx0XHRsZXNzb25faWQ6ICcnLFxuXG5cdFx0XHRcdHN0YXR1czogJ2RyYWZ0JyxcblxuXHRcdFx0XHQvLyBlZGl0YWJsZSBmaWVsZHNcblx0XHRcdFx0Y29udGVudDogJycsXG5cdFx0XHRcdGFsbG93ZWRfYXR0ZW1wdHM6IDUsXG5cdFx0XHRcdGxpbWl0X2F0dGVtcHRzOiAnbm8nLFxuXHRcdFx0XHRsaW1pdF90aW1lOiAnbm8nLFxuXHRcdFx0XHRwYXNzaW5nX3BlcmNlbnQ6IDY1LFxuXHRcdFx0XHRuYW1lOiAnJyxcblx0XHRcdFx0cmFuZG9tX2Fuc3dlcnM6ICdubycsXG5cdFx0XHRcdHRpbWVfbGltaXQ6IDMwLFxuXHRcdFx0XHRzaG93X2NvcnJlY3RfYW5zd2VyOiAnbm8nLFxuXG5cdFx0XHRcdHF1ZXN0aW9uczogW10sXG5cblx0XHRcdFx0Ly8gY2FsY3VsYXRlZFxuXHRcdFx0XHRfcG9pbnRzOiAwLFxuXG5cdFx0XHRcdC8vIGRpc3BsYXlcblx0XHRcdFx0cGVybWFsaW5rOiAnJyxcblx0XHRcdFx0X3Nob3dfc2V0dGluZ3M6IGZhbHNlLFxuXHRcdFx0XHRfcXVlc3Rpb25zX2xvYWRlZDogZmFsc2UsXG5cdFx0XHR9O1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVyXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuNlxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLmluaXRfY3VzdG9tX3NjaGVtYSgpO1xuXHRcdFx0dGhpcy5zdGFydFRyYWNraW5nKCk7XG5cdFx0XHR0aGlzLmluaXRfcmVsYXRpb25zaGlwcygpO1xuXG5cdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLmdldCggJ3F1ZXN0aW9ucycgKSwgJ2FkZCcsIHRoaXMudXBkYXRlX3BvaW50cyApO1xuXHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5nZXQoICdxdWVzdGlvbnMnICksICdyZW1vdmUnLCB0aGlzLnVwZGF0ZV9wb2ludHMgKTtcblxuXHRcdFx0dGhpcy5zZXQoICdfcG9pbnRzJywgdGhpcy5nZXRfdG90YWxfcG9pbnRzKCkgKTtcblxuXHRcdFx0Ly8gd2hlbiBhIHF1aXogaXMgcHVibGlzaGVkLCBlbnN1cmUgdGhlIHBhcmVudCBsZXNzb24gaXMgbWFya2VkIGFzIFwiRW5hYmxlZFwiIGZvciBxdWl6emluZ1xuXHRcdFx0dGhpcy5vbiggJ2NoYW5nZTpzdGF0dXMnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAncHVibGlzaCcgPT09IHRoaXMuZ2V0KCAnc3RhdHVzJyApICkge1xuXHRcdFx0XHRcdHRoaXMuZ2V0X3BhcmVudCgpLnNldCggJ3F1aXpfZW5hYmxlZCcsICd5ZXMnICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBBZGQgYSBuZXcgcXVlc3Rpb24gdG8gdGhlIHF1aXpcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZGF0YSAgIHF1ZXN0aW9uIGRhdGFcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0YWRkX3F1ZXN0aW9uOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0ZGF0YS5wYXJlbnRfaWQgPSB0aGlzLmdldCggJ2lkJyApO1xuXHRcdFx0dmFyIHF1ZXN0aW9uID0gdGhpcy5nZXQoICdxdWVzdGlvbnMnICkuYWRkKCBkYXRhLCB7XG5cdFx0XHRcdHBhcmVudDogdGhpcyxcblx0XHRcdH0gKTtcblx0XHRcdEJhY2tib25lLnB1YlN1Yi50cmlnZ2VyKCAncXVpei1hZGQtcXVlc3Rpb24nLCBxdWVzdGlvbiwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHBvc3QgdHlwZSBuYW1lIGZvciB0aGUgbW9kZWwncyB0eXBlXG5cdFx0ICogQHBhcmFtICAgIGJvb2wgICAgIHBsdXJhbCAgaWYgdHJ1ZSwgcmV0dXJucyB0aGUgcGx1cmFsLCBvdGhlcndpc2UgcmV0dXJucyBzaW5ndWxhclxuXHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4xMlxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjEyXG5cdFx0ICovXG5cdFx0Z2V0X2wxMG5fdHlwZTogZnVuY3Rpb24oIHBsdXJhbCApIHtcblxuXHRcdFx0aWYgKCBwbHVyYWwgKSB7XG5cdFx0XHRcdHJldHVybiBMTE1TLmwxMG4udHJhbnNsYXRlKCAncXVpenplcycgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIExMTVMubDEwbi50cmFuc2xhdGUoICdxdWl6JyApO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXRyaWV2ZSB0aGUgcXVpeidzIHRvdGFsIHBvaW50c1xuXHRcdCAqIEByZXR1cm4gICBpbnRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF90b3RhbF9wb2ludHM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgcG9pbnRzID0gMDtcblxuXHRcdFx0dGhpcy5nZXQoICdxdWVzdGlvbnMnICkuZWFjaCggZnVuY3Rpb24oIHF1ZXN0aW9uICkge1xuXHRcdFx0XHRwb2ludHMgKz0gcXVlc3Rpb24uZ2V0X3BvaW50cygpO1xuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIExhenkgbG9hZCBxdWVzdGlvbnMgdmlhIEFKQVhcblx0XHQgKiBAcGFyYW0gICAge0Z1bmN0aW9ufSAgY2IgIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xOS4yXG5cdFx0ICogQHZlcnNpb24gIDMuMTkuMlxuXHRcdCAqL1xuXHRcdGxvYWRfcXVlc3Rpb25zOiBmdW5jdGlvbiggY2IgKSB7XG5cblx0XHRcdGlmICggdGhpcy5nZXQoICdfcXVlc3Rpb25zX2xvYWRlZCcgKSApIHtcblxuXHRcdFx0XHRjYigpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0XHRMTE1TLkFqYXguY2FsbCgge1xuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdGFjdGlvbjogJ2xsbXNfYnVpbGRlcicsXG5cdFx0XHRcdFx0XHRhY3Rpb25fdHlwZTogJ2xhenlfbG9hZCcsXG5cdFx0XHRcdFx0XHRjb3Vyc2VfaWQ6IHdpbmRvdy5sbG1zX2J1aWxkZXIuQ291cnNlTW9kZWwuZ2V0KCAnaWQnICksXG5cdFx0XHRcdFx0XHRsb2FkX2lkOiB0aGlzLmdldCggJ2lkJyApLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCB4aHIsIHN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCB4aHIsIHN0YXR1cywgZXJyb3IgKTtcblx0XHRcdFx0XHRcdHdpbmRvdy5sbG1zX2J1aWxkZXIuZGVidWcubG9nKCAnPT09PSBzdGFydCBsb2FkX3F1ZXN0aW9ucyBlcnJvciA9PT09JywgeGhyLCBzdGF0dXMsIGVycm9yLCAnPT09PSBmaW5pc2ggbG9hZF9xdWVzdGlvbnMgZXJyb3IgPT09PScgKTtcblx0XHRcdFx0XHRcdGNiKCB0cnVlICk7XG5cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByZXMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHJlcyAmJiByZXMucXVlc3Rpb25zICkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLnNldCggJ19xdWVzdGlvbnNfbG9hZGVkJywgdHJ1ZSApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIHJlcy5xdWVzdGlvbnMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Xy5lYWNoKCByZXMucXVlc3Rpb25zLCBzZWxmLmFkZF9xdWVzdGlvbiwgc2VsZiApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNiKCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjYiggdHJ1ZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZSB0b3RhbCBudW1iZXIgb2YgcG9pbnRzIGNhbGN1bGF0ZWQgcHJvcGVydHlcblx0XHQgKiBAcmV0dXJuICAgaW50XG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHR1cGRhdGVfcG9pbnRzOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dGhpcy5zZXQoICdfcG9pbnRzJywgdGhpcy5nZXRfdG90YWxfcG9pbnRzKCkgKTtcblxuXHRcdH0sXG5cblx0fSwgUmVsYXRpb25zaGlwcywgVXRpbGl0aWVzICkgKTtcblxufSApO1xuXG4vKipcbiAqIExlc3NvbiBTY2hlbWFzXG4gKiBAc2luY2UgICAgMy4xNy4wXG4gKiBAdmVyc2lvbiAgMy4xNy4xXG4gKi9cbmRlZmluZSggJ1NjaGVtYXMvTGVzc29uJyxbXSwgZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIHtcblxuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdHRpdGxlOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnR2VuZXJhbCBTZXR0aW5ncycgKSxcblx0XHRcdHRvZ2dsZWFibGU6IHRydWUsXG5cdFx0XHRmaWVsZHM6IFtcblx0XHRcdFx0W1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ3Blcm1hbGluaycsXG5cdFx0XHRcdFx0XHRpZDogJ3Blcm1hbGluaycsXG5cdFx0XHRcdFx0XHR0eXBlOiAncGVybWFsaW5rJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLCBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YXR0cmlidXRlOiAndmlkZW9fZW1iZWQnLFxuXHRcdFx0XHRcdFx0aWQ6ICd2aWRlby1lbWJlZCcsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1ZpZGVvIEVtYmVkIFVSTCcgKSxcblx0XHRcdFx0XHRcdHR5cGU6ICd2aWRlb19lbWJlZCcsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRhdHRyaWJ1dGU6ICdhdWRpb19lbWJlZCcsXG5cdFx0XHRcdFx0XHRpZDogJ2F1ZGlvLWVtYmVkJyxcblx0XHRcdFx0XHRcdGxhYmVsOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnQXVkaW8gRW1iZWQgVVJMJyApLFxuXHRcdFx0XHRcdFx0dHlwZTogJ2F1ZGlvX2VtYmVkJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLCBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YXR0cmlidXRlOiAnZnJlZV9sZXNzb24nLFxuXHRcdFx0XHRcdFx0aWQ6ICdmcmVlLWxlc3NvbicsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0ZyZWUgTGVzc29uJyApLFxuXHRcdFx0XHRcdFx0dGlwOiBMTE1TLmwxMG4udHJhbnNsYXRlKCBcIkZyZWUgbGVzc29ucyBjYW4gYmUgYWNjZXNzZWQgd2l0aG91dCBlbnJvbGxtZW50LlwiICksXG5cdFx0XHRcdFx0XHR0eXBlOiAnc3dpdGNoJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ3JlcXVpcmVfcGFzc2luZ19ncmFkZScsXG5cdFx0XHRcdFx0XHRpZDogJ3JlcXVpcmUtcGFzc2luZy1ncmFkZScsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1JlcXVpcmUgUGFzc2luZyBHcmFkZSBvbiBRdWl6JyApLFxuXHRcdFx0XHRcdFx0dGlwOiBMTE1TLmwxMG4udHJhbnNsYXRlKCBcIldoZW4gZW5hYmxlZCwgc3R1ZGVudHMgbXVzdCBwYXNzIHRoaXMgbGVzc29uJ3MgcXVpeiBiZWZvcmUgdGhlIGxlc3NvbiBjYW4gYmUgY29tcGxldGVkLlwiICksXG5cdFx0XHRcdFx0XHR0eXBlOiAnc3dpdGNoJyxcblx0XHRcdFx0XHRcdGNvbmRpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAoICd5ZXMnID09PSB0aGlzLmdldCggJ3F1aXpfZW5hYmxlZCcgKSApO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ3JlcXVpcmVfYXNzaWdubWVudF9wYXNzaW5nX2dyYWRlJyxcblx0XHRcdFx0XHRcdGlkOiAncmVxdWlyZS1hc3NpZ25tZW50LXBhc3NpbmctZ3JhZGUnLFxuXHRcdFx0XHRcdFx0bGFiZWw6IExMTVMubDEwbi50cmFuc2xhdGUoICdSZXF1aXJlIFBhc3NpbmcgR3JhZGUgb24gQXNzaWdubWVudCcgKSxcblx0XHRcdFx0XHRcdHRpcDogTExNUy5sMTBuLnRyYW5zbGF0ZSggXCJXaGVuIGVuYWJsZWQsIHN0dWRlbnRzIG11c3QgcGFzcyB0aGlzIGxlc3NvbidzIGFzc2lnbm1lbnQgYmVmb3JlIHRoZSBsZXNzb24gY2FuIGJlIGNvbXBsZXRlZC5cIiApLFxuXHRcdFx0XHRcdFx0dHlwZTogJ3N3aXRjaCcsXG5cdFx0XHRcdFx0XHRjb25kaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCAndW5kZWZpbmVkJyAhPT0gd2luZG93LmxsbXNfYnVpbGRlci5hc3NpZ25tZW50cyAmJiAneWVzJyA9PT0gdGhpcy5nZXQoICdhc3NpZ25tZW50X2VuYWJsZWQnICkgKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSwgW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ3ByZXJlcXVpc2l0ZScsXG5cdFx0XHRcdFx0XHRjb25kaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBmYWxzZSA9PT0gdGhpcy5pc19maXJzdF9pbl9jb3Vyc2UoKSApO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGlkOiAncHJlcmVxdWlzaXRlJyxcblx0XHRcdFx0XHRcdGxhYmVsOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnUHJlcmVxdWlzaXRlJyApLFxuXHRcdFx0XHRcdFx0c3dpdGNoX2F0dHJpYnV0ZTogJ2hhc19wcmVyZXF1aXNpdGUnLFxuXHRcdFx0XHRcdFx0dHlwZTogJ3N3aXRjaC1zZWxlY3QnLFxuXHRcdFx0XHRcdFx0b3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmdldF9hdmFpbGFibGVfcHJlcmVxX29wdGlvbnMoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSwgW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ2RyaXBfbWV0aG9kJyxcblx0XHRcdFx0XHRcdGlkOiAnZHJpcC1tZXRob2QnLFxuXHRcdFx0XHRcdFx0bGFiZWw6IExMTVMubDEwbi50cmFuc2xhdGUoICdEcmlwIE1ldGhvZCcgKSxcblx0XHRcdFx0XHRcdHN3aXRjaF9hdHRyaWJ1dGU6ICdkcmlwX21ldGhvZCcsXG5cdFx0XHRcdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdFx0XHRcdG9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBvcHRpb25zID0gW1xuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdGtleTogJycsXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWw6IExMTVMubDEwbi50cmFuc2xhdGUoICdOb25lJyApLFxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0a2V5OiAnZGF0ZScsXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWw6IExMTVMubDEwbi50cmFuc2xhdGUoICdPbiBhIHNwZWNpZmljIGRhdGUnICksXG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRrZXk6ICdlbnJvbGxtZW50Jyxcblx0XHRcdFx0XHRcdFx0XHRcdHZhbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJyMgb2YgZGF5cyBhZnRlciBjb3Vyc2UgZW5yb2xsbWVudCcgKSxcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdGhpcy5nZXRfY291cnNlKCkuZ2V0KCAnc3RhcnRfZGF0ZScgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLnB1c2goIHtcblx0XHRcdFx0XHRcdFx0XHRcdGtleTogJ3N0YXJ0Jyxcblx0XHRcdFx0XHRcdFx0XHRcdHZhbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJyMgb2YgZGF5cyBhZnRlciBjb3Vyc2Ugc3RhcnQgZGF0ZScgKSxcblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoICd5ZXMnID09PSB0aGlzLmdldCggJ2hhc19wcmVyZXF1aXNpdGUnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5wdXNoKCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRrZXk6ICdwcmVyZXF1aXNpdGUnLFxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnIyBvZiBkYXlzIGFmdGVyIHByZXJlcXVpc2l0ZSBsZXNzb24gY29tcGxldGlvbicgKSxcblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gb3B0aW9ucztcblxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ2RheXNfYmVmb3JlX2F2YWlsYWJsZScsXG5cdFx0XHRcdFx0XHRjb25kaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCAtMSAhPT0gWyAnZW5yb2xsbWVudCcsICdzdGFydCcsICdwcmVyZXF1aXNpdGUnIF0uaW5kZXhPZiggdGhpcy5nZXQoICdkcmlwX21ldGhvZCcgKSApICk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0aWQ6ICdkYXlzLWJlZm9yZS1hdmFpbGFibGUnLFxuXHRcdFx0XHRcdFx0bGFiZWw6IExMTVMubDEwbi50cmFuc2xhdGUoICcjIG9mIGRheXMnICksXG5cdFx0XHRcdFx0XHRtaW46IDAsXG5cdFx0XHRcdFx0XHR0eXBlOiAnbnVtYmVyJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogJ2RhdGVfYXZhaWxhYmxlJyxcblx0XHRcdFx0XHRcdGRhdGVfZm9ybWF0OiAnWS1tLWQnLFxuXHRcdFx0XHRcdFx0Y29uZGl0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggJ2RhdGUnID09PSB0aGlzLmdldCggJ2RyaXBfbWV0aG9kJyApICk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0aWQ6ICdkYXRlLWF2YWlsYWJsZScsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0RhdGUnICksXG5cdFx0XHRcdFx0XHR0aW1lcGlja2VyOiAnZmFsc2UnLFxuXHRcdFx0XHRcdFx0dHlwZTogJ2RhdGVwaWNrZXInLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YXR0cmlidXRlOiAndGltZV9hdmFpbGFibGUnLFxuXHRcdFx0XHRcdFx0Y29uZGl0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggJ2RhdGUnID09PSB0aGlzLmdldCggJ2RyaXBfbWV0aG9kJyApICk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0ZGF0ZXBpY2tlcjogJ2ZhbHNlJyxcblx0XHRcdFx0XHRcdGRhdGVfZm9ybWF0OiAnaDppIEEnLFxuXHRcdFx0XHRcdFx0aWQ6ICd0aW1lLWF2YWlsYWJsZScsXG5cdFx0XHRcdFx0XHRsYWJlbDogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1RpbWUnICksXG5cdFx0XHRcdFx0XHR0eXBlOiAnZGF0ZXBpY2tlcicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSxcblx0XHRcdF0sXG5cdFx0fSxcblxuXHR9O1xuXG59ICk7XG5cbi8qKlxuICogTGVzc29uIE1vZGVsXG4gKiBAc2luY2UgICAgMy4xMy4wXG4gKiBAdmVyc2lvbiAgMy4xOS4zXG4gKi9cbmRlZmluZSggJ01vZGVscy9MZXNzb24nLFsgJ01vZGVscy9RdWl6JywgJ01vZGVscy9fUmVsYXRpb25zaGlwcycsICdNb2RlbHMvX1V0aWxpdGllcycsICdTY2hlbWFzL0xlc3NvbicgXSwgZnVuY3Rpb24oIFF1aXosIFJlbGF0aW9uc2hpcHMsIFV0aWxpdGllcywgTGVzc29uU2NoZW1hICkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoIF8uZGVmYXVsdHMoIHtcblxuXHRcdC8qKlxuXHRcdCAqIE1vZGVsIHJlbGF0aW9uc2hpcHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRyZWxhdGlvbnNoaXBzOiB7XG5cdFx0XHRwYXJlbnRzOiB7XG5cdFx0XHRcdG1vZGVsOiAnc2VjdGlvbicsXG5cdFx0XHRcdHR5cGU6ICdtb2RlbCcsXG5cdFx0XHR9LFxuXHRcdFx0Y2hpbGRyZW46IHtcblx0XHRcdFx0cXVpejoge1xuXHRcdFx0XHRcdGNsYXNzOiAnUXVpeicsXG5cdFx0XHRcdFx0Y29uZGl0aW9uYWw6IGZ1bmN0aW9uKCBtb2RlbCApIHtcblx0XHRcdFx0XHRcdC8vIGlmIHF1aXogaXMgZW5hYmxlZCBPUiBub3QgZW5hYmxlZCBidXQgd2UgaGF2ZSBzb21lIHF1aXogZGF0YSBhcyBhbiBvYmpcblx0XHRcdFx0XHRcdHJldHVybiAoICd5ZXMnID09PSBtb2RlbC5nZXQoICdxdWl6X2VuYWJsZWQnICkgfHwgISBfLmlzRW1wdHkoIG1vZGVsLmdldCggJ3F1aXonICkgKSApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bW9kZWw6ICdsbG1zX3F1aXonLFxuXHRcdFx0XHRcdHR5cGU6ICdtb2RlbCcsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBMZXNzb24gU2V0dGluZ3MgU2NoZW1hXG5cdFx0ICogQHR5cGUgIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0c2NoZW1hOiBMZXNzb25TY2hlbWEsXG5cblx0XHQvKipcblx0XHQgKiBOZXcgbGVzc29uIGRlZmF1bHRzXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjEzLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4xXG5cdFx0ICovXG5cdFx0ZGVmYXVsdHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0aWQ6IF8udW5pcXVlSWQoICd0ZW1wXycgKSxcblx0XHRcdFx0dGl0bGU6IExMTVMubDEwbi50cmFuc2xhdGUoICdOZXcgTGVzc29uJyApLFxuXHRcdFx0XHR0eXBlOiAnbGVzc29uJyxcblx0XHRcdFx0b3JkZXI6IHRoaXMuY29sbGVjdGlvbiA/IHRoaXMuY29sbGVjdGlvbi5sZW5ndGggKyAxIDogMSxcblx0XHRcdFx0cGFyZW50X2NvdXJzZTogd2luZG93LmxsbXNfYnVpbGRlci5jb3Vyc2UuaWQsXG5cdFx0XHRcdHBhcmVudF9zZWN0aW9uOiAnJyxcblxuXHRcdFx0XHQvLyB1cmxzXG5cdFx0XHRcdGVkaXRfdXJsOiAnJyxcblx0XHRcdFx0dmlld191cmw6ICcnLFxuXG5cdFx0XHRcdC8vIGVkaXRhYmxlIGZpZWxkc1xuXHRcdFx0XHRjb250ZW50OiAnJyxcblx0XHRcdFx0YXVkaW9fZW1iZWQ6ICcnLFxuXHRcdFx0XHRoYXNfcHJlcmVxdWlzaXRlOiAnbm8nLFxuXHRcdFx0XHRyZXF1aXJlX3Bhc3NpbmdfZ3JhZGU6ICd5ZXMnLFxuXHRcdFx0XHRyZXF1aXJlX2Fzc2lnbm1lbnRfcGFzc2luZ19ncmFkZTogJ3llcycsXG5cdFx0XHRcdHZpZGVvX2VtYmVkOiAnJyxcblx0XHRcdFx0ZnJlZV9sZXNzb246ICcnLFxuXG5cdFx0XHRcdC8vIG90aGVyIGZpZWxkc1xuXHRcdFx0XHRhc3NpZ25tZW50OiB7fSwgLy8gYXNzaWdubWVudCBtb2RlbC9kYXRhXG5cdFx0XHRcdGFzc2lnbm1lbnRfZW5hYmxlZDogJ25vJyxcblxuXHRcdFx0XHRxdWl6OiB7fSwgLy8gcXVpeiBtb2RlbC9kYXRhXG5cdFx0XHRcdHF1aXpfZW5hYmxlZDogJ25vJyxcblxuXHRcdFx0XHRfZm9yY2VTeW5jOiBmYWxzZSxcblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXJcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4wXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHRoaXMuaW5pdF9jdXN0b21fc2NoZW1hKCk7XG5cdFx0XHR0aGlzLnN0YXJ0VHJhY2tpbmcoKTtcblx0XHRcdHRoaXMubWF5YmVfaW5pdF9hc3NpZ25tZW50cygpO1xuXHRcdFx0dGhpcy5pbml0X3JlbGF0aW9uc2hpcHMoKTtcblxuXHRcdFx0Ly8gaWYgdGhlIGxlc3NvbiBJRCBpc24ndCBzZXQgb24gYSBxdWl6LCBzZXQgaXRcblx0XHRcdHZhciBxdWl6ID0gdGhpcy5nZXQoICdxdWl6JyApO1xuXHRcdFx0aWYgKCAhIF8uaXNFbXB0eSggcXVpeiApICYmICEgcXVpei5nZXQoICdsZXNzb25faWQnICkgKSB7XG5cdFx0XHRcdHF1aXouc2V0KCAnbGVzc29uX2lkJywgdGhpcy5nZXQoICdpZCcgKSApO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgY291cnNlIG9mIHRoZSBsZXNzb25cblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRnZXRfY291cnNlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldF9wYXJlbnQoKS5nZXRfcGFyZW50KCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHBvc3QgdHlwZSBuYW1lIGZvciB0aGUgbW9kZWwncyB0eXBlXG5cdFx0ICogQHBhcmFtICAgIGJvb2wgICAgIHBsdXJhbCAgaWYgdHJ1ZSwgcmV0dXJucyB0aGUgcGx1cmFsLCBvdGhlcndpc2UgcmV0dXJucyBzaW5ndWxhclxuXHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4xMlxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjEyXG5cdFx0ICovXG5cdFx0Z2V0X2wxMG5fdHlwZTogZnVuY3Rpb24oIHBsdXJhbCApIHtcblxuXHRcdFx0aWYgKCBwbHVyYWwgKSB7XG5cdFx0XHRcdHJldHVybiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnbGVzc29ucycgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIExMTVMubDEwbi50cmFuc2xhdGUoICdsZXNzb24nICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJyaWRlIGRlZmF1bHQgZ2V0X3BhcmVudCB0byBncmFiIGZyb20gY29sbGVjdGlvbiBpZiBtb2RlbHMgcGFyZW50IGlzbid0IHNldFxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdGdldF9wYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgcmVscyA9IHRoaXMuZ2V0X3JlbGF0aW9uc2hpcHMoKTtcblx0XHRcdGlmICggcmVscy5wYXJlbnQgJiYgcmVscy5wYXJlbnQucmVmZXJlbmNlICkge1xuXHRcdFx0XHRyZXR1cm4gcmVscy5wYXJlbnQucmVmZXJlbmNlO1xuXHRcdFx0fSBlbHNlIGlmICggdGhpcy5jb2xsZWN0aW9uICYmIHRoaXMuY29sbGVjdGlvbi5wYXJlbnQgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbGxlY3Rpb24ucGFyZW50O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIGFuIGFycmF5IG9mIHByZXJlcXVpc2l0ZSBvcHRpb25zIGF2YWlsYWJsZSBmb3IgdGhlIGN1cnJlbnQgbGVzc29uXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4wXG5cdFx0ICovXG5cdFx0Z2V0X2F2YWlsYWJsZV9wcmVyZXFfb3B0aW9uczogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBwYXJlbnRfc2VjdGlvbl9pbmRleCA9IHRoaXMuZ2V0X3BhcmVudCgpLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcy5nZXRfcGFyZW50KCkgKSxcblx0XHRcdFx0bGVzc29uX2luZGV4X2luX3NlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcyApLFxuXHRcdFx0XHRvcHRpb25zID0gW107XG5cblx0XHRcdHRoaXMuZ2V0X2NvdXJzZSgpLmdldCggJ3NlY3Rpb25zJyApLmVhY2goIGZ1bmN0aW9uKCBzZWN0aW9uLCBjdXJyX3NlY19pbmRleCApIHtcblx0XHRcdFx0aWYgKCBjdXJyX3NlY19pbmRleCA8PSBwYXJlbnRfc2VjdGlvbl9pbmRleCApIHtcblx0XHRcdFx0XHR2YXIgZ3JvdXAgPSB7XG5cdFx0XHRcdFx0XHRcdC8qIHRyYW5zbGF0b3JzOiAlMSRkID0gc2VjdGlvbiBvcmRlciBudW1iZXIsICUyJHMgPSBzZWN0aW9uIHRpdGxlICovXG5cdFx0XHRcdFx0XHRcdGxhYmVsOiBMTE1TLmwxMG4ucmVwbGFjZSggJ1NlY3Rpb24gJTEkZDogJTIkcycsIHtcblx0XHRcdFx0XHRcdFx0XHQnJTEkZCc6IHNlY3Rpb24uZ2V0KCAnb3JkZXInICksXG5cdFx0XHRcdFx0XHRcdFx0JyUyJHMnOiBzZWN0aW9uLmdldCggJ3RpdGxlJyApXG5cdFx0XHRcdFx0XHRcdH0gKSxcblx0XHRcdFx0XHRcdFx0b3B0aW9uczogW10sXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0c2VjdGlvbi5nZXQoICdsZXNzb25zJyApLmVhY2goIGZ1bmN0aW9uKCBsZXNzb24sIGN1cnJfbGVzX2luZGV4ICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXJyX3NlY19pbmRleCAhPT0gcGFyZW50X3NlY3Rpb25faW5kZXggfHwgY3Vycl9sZXNfaW5kZXggPCBsZXNzb25faW5kZXhfaW5fc2VjdGlvbiApIHtcblx0XHRcdFx0XHRcdFx0LyogdHJhbnNsYXRvcnM6ICUxJGQgPSBsZXNzb24gb3JkZXIgbnVtYmVyLCAlMiRzID0gbGVzc29uIHRpdGxlICovXG5cdFx0XHRcdFx0XHRcdGdyb3VwLm9wdGlvbnMucHVzaCgge1xuXHRcdFx0XHRcdFx0XHRcdGtleTogbGVzc29uLmdldCggJ2lkJyApLFxuXHRcdFx0XHRcdFx0XHRcdHZhbDogTExNUy5sMTBuLnJlcGxhY2UoICdMZXNzb24gJTEkZDogJTIkcycsIHtcblx0XHRcdFx0XHRcdFx0XHRcdCclMSRkJzogbGVzc29uLmdldCggJ29yZGVyJyApLFxuXHRcdFx0XHRcdFx0XHRcdFx0JyUyJHMnOiBsZXNzb24uZ2V0KCAndGl0bGUnIClcblx0XHRcdFx0XHRcdFx0XHR9ICksXG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdFx0XHRvcHRpb25zLnB1c2goIGdyb3VwICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMgKTtcblxuXHRcdFx0cmV0dXJuIG9wdGlvbnM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQWRkIGEgbmV3IHF1aXogdG8gdGhlIGxlc3NvblxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBkYXRhICAgb2JqZWN0IG9mIHF1aXogZGF0YSB1c2VkIHRvIGNvbnN0cnVjdCBhIG5ldyBxdWl6IG1vZGVsXG5cdFx0ICogQHJldHVybiAgIG9iaiAgICAgICAgICBtb2RlbCBmb3IgdGhlIGNyZWF0ZWQgcXVpelxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xOS4zXG5cdFx0ICovXG5cdFx0YWRkX3F1aXo6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRkYXRhID0gZGF0YSB8fCB7fTtcblxuXHRcdFx0ZGF0YS5sZXNzb25faWQgPSB0aGlzLmlkO1xuXHRcdFx0ZGF0YS5fcXVlc3Rpb25zX2xvYWRlZCA9IHRydWU7XG5cblx0XHRcdGlmICggISBkYXRhLnRpdGxlICkge1xuXG5cdFx0XHRcdGRhdGEudGl0bGUgPSBMTE1TLmwxMG4ucmVwbGFjZSggJyUxJHMgUXVpeicsIHtcblx0XHRcdFx0XHQnJTEkcyc6IHRoaXMuZ2V0KCAndGl0bGUnICksXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNldCggJ3F1aXonLCBkYXRhICk7XG5cdFx0XHR0aGlzLmluaXRfcmVsYXRpb25zaGlwcygpO1xuXG5cdFx0XHR2YXIgcXVpeiA9IHRoaXMuZ2V0KCAncXVpeicgKTtcblx0XHRcdHRoaXMuc2V0KCAncXVpel9lbmFibGVkJywgJ3llcycgKTtcblxuXHRcdFx0cmV0dXJuIHF1aXo7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lIGlmIHRoaXMgaXMgdGhlIGZpcnN0IGxlc3NvblxuXHRcdCAqIEByZXR1cm4gICB7Qm9vbGVhbn1cblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdGlzX2ZpcnN0X2luX2NvdXJzZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCBpdGVtIGluIHRoZSBzZWN0aW9uIGl0IGNhbnQgYmUgdGhlIGZpcnN0IGxlc3NvblxuXHRcdFx0aWYgKCB0aGlzLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcyApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCBzZWN0aW9uIGl0IGNhbnQnIGJlIGZpcnN0IGxlc3NvblxuXHRcdFx0dmFyIHNlY3Rpb24gPSB0aGlzLmdldF9wYXJlbnQoKTtcblx0XHRcdGlmICggc2VjdGlvbi5jb2xsZWN0aW9uLmluZGV4T2YoIHNlY3Rpb24gKSApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpdCdzIGZpcnN0IGxlc3NvbiBpbiBmaXJzdCBzZWN0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplIGxlc3NvbiBhc3NpZ25tZW50cyAqaWYqIHRoZSBhc3NpZ25tZW50cyBhZGRvbiBpcyBhdmFpbGFsYmUgYW5kIGVuYWJsZWRcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4wXG5cdFx0ICovXG5cdFx0bWF5YmVfaW5pdF9hc3NpZ25tZW50czogZnVuY3Rpb24oKSB7XG5cblx0XHRcdGlmICggISB3aW5kb3cubGxtc19idWlsZGVyLmFzc2lnbm1lbnRzICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVsYXRpb25zaGlwcy5jaGlsZHJlbi5hc3NpZ25tZW50ID0ge1xuXHRcdFx0XHRjbGFzczogJ0Fzc2lnbm1lbnQnLFxuXHRcdFx0XHRjb25kaXRpb25hbDogZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0XHRcdC8vIGlmIGFzc2lnbm1lbnQgaXMgZW5hYmxlZCBPUiBub3QgZW5hYmxlZCBidXQgd2UgaGF2ZSBzb21lIGFzc2lnbm1lbnQgZGF0YSBhcyBhbiBvYmpcblx0XHRcdFx0XHRyZXR1cm4gKCAneWVzJyA9PT0gbW9kZWwuZ2V0KCAnYXNzaWdubWVudF9lbmFibGVkJyApIHx8ICEgXy5pc0VtcHR5KCBtb2RlbC5nZXQoICdhc3NpZ25tZW50JyApICkgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0bW9kZWw6ICdsbG1zX2Fzc2lnbm1lbnQnLFxuXHRcdFx0XHR0eXBlOiAnbW9kZWwnLFxuXHRcdFx0fTtcblxuXHRcdH0sXG5cblx0fSwgUmVsYXRpb25zaGlwcywgVXRpbGl0aWVzICkgKTtcblxufSApO1xuXG4vKipcbiAqIExlc3NvbnMgQ29sbGVjdGlvblxuICogQHNpbmNlICAgIDMuMTMuMFxuICogQHZlcnNpb24gIDMuMTcuMFxuICovXG5kZWZpbmUoICdDb2xsZWN0aW9ucy9MZXNzb25zJyxbICdNb2RlbHMvTGVzc29uJyBdLCBmdW5jdGlvbiggbW9kZWwgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKCB7XG5cblx0XHQvKipcblx0XHQgKiBNb2RlbCBmb3IgY29sbGVjdGlvbiBpdGVtc1xuXHRcdCAqIEB0eXBlICBvYmpcblx0XHQgKi9cblx0XHRtb2RlbDogbW9kZWwsXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplclxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gcmVvcmRlciBjYWxsZWQgYnkgTGVzc29uTGlzdCB2aWV3IHdoZW4gc29ydGFibGUgZHJvcHMgb2NjdXJcblx0XHRcdHRoaXMub24oICdyZW9yZGVyJywgdGhpcy5vbl9yZW9yZGVyICk7XG5cblx0XHRcdC8vIHdoZW4gYSBsZXNzb24gaXMgYWRkZWQgb3IgcmVtb3ZlZCwgdXBkYXRlIG9yZGVyXG5cdFx0XHR0aGlzLm9uKCAnYWRkJywgdGhpcy5vbl9yZW9yZGVyICk7XG5cdFx0XHR0aGlzLm9uKCAncmVtb3ZlJywgdGhpcy5vbl9yZW9yZGVyICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogT24gbGVzc29uIHJlb3JkZXIgY2FsbGJhY2tcblx0XHQgKlxuXHRcdCAqIFVwZGF0ZSB0aGUgb3JkZXIgYXR0ciBvZiBlYWNoIGxlc3NvbiB0byByZWZsZWN0IHRoZSBuZXcgbGVzc29uIG9yZGVyXG5cdFx0ICogVmFsaWRhdGUgcHJlcmVxdWlzaXRlIChpZiBzZXQpIGFuZCB1bnNldCBpdCBpZiBpdCdzIG5vIGxvbmdlciBhIHZhbGlkIHByZXJlcVxuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdG9uX3Jlb3JkZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy51cGRhdGVfb3JkZXIoKTtcblx0XHRcdHRoaXMudmFsaWRhdGVfcHJlcmVxcygpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBVcGRhdGUgbGVzc29uIG9yZGVyIGF0dHJpYnV0ZSBvZiBhbGwgbGVzc29ucyB3aGVuIGxlc3NvbnMgYXJlIHJlb3JkZXJlZFxuXHRcdCAqIEByZXR1cm4gICAgICB2b2lkXG5cdFx0ICogQHNpbmNlICAgICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAgICAzLjE3LjBcblx0XHQgKi9cblx0XHR1cGRhdGVfb3JkZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBsZXNzb24gKSB7XG5cdFx0XHRcdGxlc3Nvbi5zZXQoICdvcmRlcicsIHRoaXMuaW5kZXhPZiggbGVzc29uICkgKyAxICk7XG5cdFx0XHR9LCB0aGlzICk7XG5cblx0XHR9LFxuXG5cblx0XHQvKipcblx0XHQgKiBWYWxpZGF0ZSBwcmVyZXF1aXNpdGUgKGlmIHNldCkgYW5kIHVuc2V0IGl0IGlmIGl0J3Mgbm8gbG9uZ2VyIGEgdmFsaWQgcHJlcmVxXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdHZhbGlkYXRlX3ByZXJlcXM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBsZXNzb24gKSB7XG5cblx0XHRcdFx0Ly8gdmFsaWRhdGUgcHJlcmVxc1xuXHRcdFx0XHRpZiAoICd5ZXMnID09PSBsZXNzb24uZ2V0KCAnaGFzX3ByZXJlcXVpc2l0ZScgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsaWQgPSBfLnBsdWNrKCBfLmZsYXR0ZW4oIF8ucGx1Y2soIGxlc3Nvbi5nZXRfYXZhaWxhYmxlX3ByZXJlcV9vcHRpb25zKCksICdvcHRpb25zJyApICksICdrZXknICk7XG5cdFx0XHRcdFx0aWYgKCAtMSA9PT0gdmFsaWQuaW5kZXhPZiggbGVzc29uLmdldCggJ3ByZXJlcXVpc2l0ZScgKSAqIDEgKSApIHtcblx0XHRcdFx0XHRcdGxlc3Nvbi5zZXQoIHtcblx0XHRcdFx0XHRcdFx0cHJlcmVxdWlzaXRlOiAwLFxuXHRcdFx0XHRcdFx0XHRoYXNfcHJlcmVxdWlzaXRlOiAnbm8nLFxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCB0aGlzICk7XG5cblx0XHR9LFxuXG5cdH0gKTtcblxufSApO1xuXG4vKipcbiAqIFF1aXogUXVlc3Rpb24gVHlwZSBDb2xsZWN0aW9uXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ0NvbGxlY3Rpb25zL1F1ZXN0aW9uVHlwZXMnLFsgJ01vZGVscy9RdWVzdGlvblR5cGUnIF0sIGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoIHtcblxuXHRcdC8qKlxuXHRcdCAqIE1vZGVsIGZvciBjb2xsZWN0aW9uIGl0ZW1zXG5cdFx0ICogQHR5cGUgIG9ialxuXHRcdCAqL1xuXHRcdG1vZGVsOiBtb2RlbCxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVyXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLm9uKCAnYWRkJywgdGhpcy5jb21wYXJhdG9yICk7XG5cdFx0XHR0aGlzLm9uKCAncmVtb3ZlJywgdGhpcy5jb21wYXJhdG9yICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ29tcGFyYXRvciAoc29ydHMgY29sbGVjdGlvbilcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgbW9kZWwgIFF1ZXN0aW9uVHlwZSBtb2RlbFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRjb21wYXJhdG9yOiBmdW5jdGlvbiggbW9kZWwgKSB7XG5cblx0XHRcdHJldHVybiBtb2RlbC5nZXQoICdncm91cCcgKS5vcmRlcjtcblxuXHRcdH0sXG5cblx0fSApO1xuXG59ICk7XG5cbi8qKlxuICogU2VjdGlvbiBNb2RlbFxuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTYuMTJcbiAqL1xuZGVmaW5lKCAnTW9kZWxzL1NlY3Rpb24nLFsgJ0NvbGxlY3Rpb25zL0xlc3NvbnMnLCAnTW9kZWxzL19SZWxhdGlvbnNoaXBzJyBdLCBmdW5jdGlvbiggTGVzc29ucywgUmVsYXRpb25zaGlwcyApIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKCBfLmRlZmF1bHRzKCB7XG5cblx0XHRyZWxhdGlvbnNoaXBzOiB7XG5cdFx0XHRwYXJlbnQ6IHtcblx0XHRcdFx0bW9kZWw6ICdjb3Vyc2UnLFxuXHRcdFx0XHR0eXBlOiAnbW9kZWwnLFxuXHRcdFx0fSxcblx0XHRcdGNoaWxkcmVuOiB7XG5cdFx0XHRcdGxlc3NvbnM6IHtcblx0XHRcdFx0XHRjbGFzczogJ0xlc3NvbnMnLFxuXHRcdFx0XHRcdG1vZGVsOiAnbGVzc29uJyxcblx0XHRcdFx0XHR0eXBlOiAnY29sbGVjdGlvbicsXG5cdFx0XHRcdH0sXG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE5ldyBzZWN0aW9uIGRlZmF1bHRzXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0ZGVmYXVsdHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0aWQ6IF8udW5pcXVlSWQoICd0ZW1wXycgKSxcblx0XHRcdFx0bGVzc29uczogW10sXG5cdFx0XHRcdG9yZGVyOiB0aGlzLmNvbGxlY3Rpb24gPyB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoICsgMSA6IDEsXG5cdFx0XHRcdHBhcmVudF9jb3Vyc2U6IHdpbmRvdy5sbG1zX2J1aWxkZXIuY291cnNlLmlkLFxuXHRcdFx0XHR0aXRsZTogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ05ldyBTZWN0aW9uJyApLFxuXHRcdFx0XHR0eXBlOiAnc2VjdGlvbicsXG5cblx0XHRcdFx0X2V4cGFuZGVkOiBmYWxzZSxcblx0XHRcdFx0X3NlbGVjdGVkOiBmYWxzZSxcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHRoaXMuc3RhcnRUcmFja2luZygpO1xuXHRcdFx0dGhpcy5pbml0X3JlbGF0aW9uc2hpcHMoKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBBZGQgYSBsZXNzb24gdG8gdGhlIHNlY3Rpb25cblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZGF0YSAgICAgaGFzaCBvZiBsZXNzb24gZGF0YSAoY3JlYXRlcyBuZXcgbGVzc29uKVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICBvciBleGlzdGluZyBsZXNzb24gYXMgYSBCYWNrYm9uZS5Nb2RlbFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBvcHRpb25zICBoYXMgb2Ygb3B0aW9uc1xuXHRcdCAqIEByZXR1cm4gICBvYmogICAgICAgICAgICBCYWNrYm9uZS5Nb2RlbCBvZiB0aGUgbmV3L3VwZGF0ZWQgbGVzc29uXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjExXG5cdFx0ICovXG5cdFx0YWRkX2xlc3NvbjogZnVuY3Rpb24oIGRhdGEsIG9wdGlvbnMgKSB7XG5cblx0XHRcdGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHRcdGlmICggZGF0YSBpbnN0YW5jZW9mIEJhY2tib25lLk1vZGVsICkge1xuXHRcdFx0XHRkYXRhLnNldCggJ3BhcmVudF9zZWN0aW9uJywgdGhpcy5nZXQoICdpZCcgKSApO1xuXHRcdFx0XHRkYXRhLnNldF9wYXJlbnQoIHRoaXMgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGEucGFyZW50X3NlY3Rpb24gPSB0aGlzLmdldCggJ2lkJyApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoICdsZXNzb25zJyApLmFkZCggZGF0YSwgb3B0aW9ucyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHBvc3QgdHlwZSBuYW1lIGZvciB0aGUgbW9kZWwncyB0eXBlXG5cdFx0ICogQHBhcmFtICAgIGJvb2wgICAgIHBsdXJhbCAgaWYgdHJ1ZSwgcmV0dXJucyB0aGUgcGx1cmFsLCBvdGhlcndpc2UgcmV0dXJucyBzaW5ndWxhclxuXHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4xMlxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjEyXG5cdFx0ICovXG5cdFx0Z2V0X2wxMG5fdHlwZTogZnVuY3Rpb24oIHBsdXJhbCApIHtcblxuXHRcdFx0aWYgKCBwbHVyYWwgKSB7XG5cdFx0XHRcdHJldHVybiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnc2VjdGlvbnMnICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnc2VjdGlvbicgKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IG5leHQgc2VjdGlvbiBpbiB0aGUgY29sbGVjdGlvblxuXHRcdCAqIEBwYXJhbSAgICBib29sICAgICBjaXJjdWxhciAgIGlmIHRydWUgaGFuZGxlcyB0aGUgY29sbGVjdGlvbiBpbiBhIGNpcmNsZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0aWYgY3VycmVudCBpcyB0aGUgbGFzdCBzZWN0aW9uLCByZXR1cm5zIHRoZSBmaXJzdCBzZWN0aW9uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRpZiBjdXJyZW50IGlzIHRoZSBmaXJzdCBzZWN0aW9uLCByZXR1cm5zIHRoZSBsYXN0IHNlY3Rpb25cblx0XHQgKiBAcmV0dXJuICAgb2JqfGZhbHNlXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMTFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMVxuXHRcdCAqL1xuXHRcdGdldF9uZXh0OiBmdW5jdGlvbiggY2lyY3VsYXIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2V0X3NpYmxpbmcoICduZXh0JywgY2lyY3VsYXIgKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHByZXYgc2VjdGlvbiBpbiB0aGUgY29sbGVjdGlvblxuXHRcdCAqIEBwYXJhbSAgICBib29sICAgICBjaXJjdWxhciAgIGlmIHRydWUgaGFuZGxlcyB0aGUgY29sbGVjdGlvbiBpbiBhIGNpcmNsZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0aWYgY3VycmVudCBpcyB0aGUgbGFzdCBzZWN0aW9uLCByZXR1cm5zIHRoZSBmaXJzdCBzZWN0aW9uXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRpZiBjdXJyZW50IGlzIHRoZSBmaXJzdCBzZWN0aW9uLCByZXR1cm5zIHRoZSBsYXN0IHNlY3Rpb25cblx0XHQgKiBAcmV0dXJuICAgb2JqfGZhbHNlXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMTFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMVxuXHRcdCAqL1xuXHRcdGdldF9wcmV2OiBmdW5jdGlvbiggY2lyY3VsYXIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZ2V0X3NpYmxpbmcoICdwcmV2JywgY2lyY3VsYXIgKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IGEgc2libGluZyBzZWN0aW9uXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIGRpcmVjdGlvbiAgc2libGluZ3MgZGlyZWN0aW9uIFtuZXh0fHByZXZdXG5cdFx0ICogQHBhcmFtICAgIGJvb2wgICAgIGNpcmN1bGFyICAgaWYgdHJ1ZSBoYW5kbGVzIHRoZSBjb2xsZWN0aW9uIGluIGEgY2lyY2xlXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRpZiBjdXJyZW50IGlzIHRoZSBsYXN0IHNlY3Rpb24sIHJldHVybnMgdGhlIGZpcnN0IHNlY3Rpb25cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdGlmIGN1cnJlbnQgaXMgdGhlIGZpcnN0IHNlY3Rpb24sIHJldHVybnMgdGhlIGxhc3Qgc2VjdGlvblxuXHRcdCAqIEByZXR1cm4gICBvYmp8ZmFsc2Vcblx0XHQgKiBAc2luY2UgICAgMy4xNi4xMVxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjExXG5cdFx0ICovXG5cdFx0X2dldF9zaWJsaW5nOiBmdW5jdGlvbiggZGlyZWN0aW9uLCBjaXJjdWxhciApIHtcblxuXHRcdFx0Y2lyY3VsYXIgPSAoICd1bmRlZmluZWQnID09PSBjaXJjdWxhciApID8gdHJ1ZSA6IGNpcmN1bGFyO1xuXG5cdFx0XHR2YXIgbWF4ID0gdGhpcy5jb2xsZWN0aW9uLnNpemUoKSAtIDEsXG5cdFx0XHRcdGluZGV4ID0gdGhpcy5jb2xsZWN0aW9uLmluZGV4T2YoIHRoaXMgKSxcblx0XHRcdFx0c2libGluZ19pbmRleDtcblxuXHRcdFx0aWYgKCAnbmV4dCcgPT09IGRpcmVjdGlvbiApIHtcblx0XHRcdFx0c2libGluZ19pbmRleCA9IGluZGV4ICsgMTtcblx0XHRcdH0gZWxzZSBpZiAoICdwcmV2JyA9PT0gZGlyZWN0aW9uICkge1xuXHRcdFx0XHRzaWJsaW5nX2luZGV4ID0gaW5kZXggLSAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkb250IHJldHJpZXZlIGdyZWF0ZXIgdGhhbiBtYXggb3IgbGVzcyB0aGFuIG1pblxuXHRcdFx0aWYgKCBzaWJsaW5nX2luZGV4IDw9IG1heCB8fCBzaWJsaW5nX2luZGV4IDw9IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMuY29sbGVjdGlvbi5hdCggc2libGluZ19pbmRleCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjaXJjdWxhciApIHtcblxuXHRcdFx0XHRpZiAoICduZXh0JyA9PT0gZGlyZWN0aW9uICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZmlyc3QoKTtcblx0XHRcdFx0fSBlbHNlIGlmICggJ3ByZXYnID09PSBkaXJlY3Rpb24gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29sbGVjdGlvbi5sYXN0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXG5cdH0sIFJlbGF0aW9uc2hpcHMgKSApO1xuXG59ICk7XG5cbi8qKlxuICogU2VjdGlvbnMgQ29sbGVjdGlvblxuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTYuMFxuICovXG5kZWZpbmUoICdDb2xsZWN0aW9ucy9TZWN0aW9ucycsWyAnTW9kZWxzL1NlY3Rpb24nIF0sIGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoIHtcblxuXHRcdC8qKlxuXHRcdCAqIE1vZGVsIGZvciBjb2xsZWN0aW9uIGl0ZW1zXG5cdFx0ICogQHR5cGUgIG9ialxuXHRcdCAqL1xuXHRcdG1vZGVsOiBtb2RlbCxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0Ly8gcmVvcmRlciBjYWxsZWQgYnkgU2VjdGlvbkxpc3QgdmlldyB3aGVuIHNvcnRhYmxlIGRyb3BzIG9jY3VyXG5cdFx0XHR0aGlzLm9uKCAncmVvcmRlcicsIHRoaXMudXBkYXRlX29yZGVyICk7XG5cblx0XHRcdC8vIHdoZW4gYSBzZWN0aW9uIGlzIGFkZGVkIG9yIHJlbW92ZWQsIHVwZGF0ZSBvcmRlclxuXHRcdFx0dGhpcy5vbiggJ2FkZCcsIHRoaXMudXBkYXRlX29yZGVyICk7XG5cdFx0XHR0aGlzLm9uKCAncmVtb3ZlJywgdGhpcy51cGRhdGVfb3JkZXIgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBVcGRhdGUgdGhlIG9yZGVyIGF0dHIgb2YgZWFjaCBzZWN0aW9uIGluIHRoZSBsaXN0IHRvIHJlZmxlY3QgdGhlIG9yZGVyIG9mIHRoZSBjb2xsZWN0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHVwZGF0ZV9vcmRlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggc2VjdGlvbiApIHtcblxuXHRcdFx0XHRzZWN0aW9uLnNldCggJ29yZGVyJywgc2VsZi5pbmRleE9mKCBzZWN0aW9uICkgKyAxICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0fSApO1xuXG59ICk7XG5cbi8qKlxuICogTGVzc29ucyBDb2xsZWN0aW9uXG4gKiBAc2luY2UgICAgMy4xMy4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ0NvbGxlY3Rpb25zL2xvYWRlcicsW1xuXHRcdCdDb2xsZWN0aW9ucy9MZXNzb25zJyxcblx0XHQnQ29sbGVjdGlvbnMvUXVlc3Rpb25DaG9pY2VzJyxcblx0XHQnQ29sbGVjdGlvbnMvUXVlc3Rpb25zJyxcblx0XHQnQ29sbGVjdGlvbnMvUXVlc3Rpb25UeXBlcycsXG5cdFx0J0NvbGxlY3Rpb25zL1NlY3Rpb25zJ1xuXHRdLCBmdW5jdGlvbihcblx0XHRMZXNzb25zLFxuXHRcdFF1ZXN0aW9uQ2hvaWNlcyxcblx0XHRRdWVzdGlvbnMsXG5cdFx0UXVlc3Rpb25UeXBlcyxcblx0XHRTZWN0aW9uc1xuXHQpIHtcblxuXHRyZXR1cm4ge1xuXHRcdExlc3NvbnM6IExlc3NvbnMsXG5cdFx0UXVlc3Rpb25DaG9pY2VzOiBRdWVzdGlvbkNob2ljZXMsXG5cdFx0UXVlc3Rpb25zOiBRdWVzdGlvbnMsXG5cdFx0UXVlc3Rpb25UeXBlczogUXVlc3Rpb25UeXBlcyxcblx0XHRTZWN0aW9uczogU2VjdGlvbnMsXG5cdH07XG5cbn0gKTtcblxuLyoqXG4gKiBBYnN0cmFjdCBMaWZ0ZXJMTVMgTW9kZWxcbiAqIEBzaW5jZSAgICAzLjE3LjBcbiAqIEB2ZXJzaW9uICAzLjE3LjBcbiAqL1xuZGVmaW5lKCAnTW9kZWxzL0Fic3RyYWN0JyxbICdNb2RlbHMvX1JlbGF0aW9uc2hpcHMnLCAnTW9kZWxzL19VdGlsaXRpZXMnIF0sIGZ1bmN0aW9uKCBSZWxhdGlvbnNoaXBzLCBVdGlsaXRpZXMgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLk1vZGVsLmV4dGVuZCggXy5kZWZhdWx0cygge30sIFJlbGF0aW9uc2hpcHMsIFV0aWxpdGllcyApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBDb3Vyc2UgTW9kZWxcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE2LjExXG4gKi9cbmRlZmluZSggJ01vZGVscy9Db3Vyc2UnLFsgJ0NvbGxlY3Rpb25zL1NlY3Rpb25zJywgJ01vZGVscy9fUmVsYXRpb25zaGlwcycsICdNb2RlbHMvX1V0aWxpdGllcycgXSwgZnVuY3Rpb24oIFNlY3Rpb25zLCBSZWxhdGlvbnNoaXBzLCBVdGlsaXRpZXMgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLk1vZGVsLmV4dGVuZCggXy5kZWZhdWx0cygge1xuXG5cdFx0cmVsYXRpb25zaGlwczoge1xuXHRcdFx0Y2hpbGRyZW46IHtcblx0XHRcdFx0c2VjdGlvbnM6IHtcblx0XHRcdFx0XHRjbGFzczogJ1NlY3Rpb25zJyxcblx0XHRcdFx0XHRtb2RlbDogJ3NlY3Rpb24nLFxuXHRcdFx0XHRcdHR5cGU6ICdjb2xsZWN0aW9uJyxcblx0XHRcdFx0fSxcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogTmV3IENvdXJzZSBEZWZhdWx0c1xuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGRlZmF1bHRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGVkaXRfdXJsOiAnJyxcblx0XHRcdFx0c2VjdGlvbnM6IFtdLFxuXHRcdFx0XHR0aXRsZTogJ05ldyBDb3Vyc2UnLFxuXHRcdFx0XHR0eXBlOiAnY291cnNlJyxcblx0XHRcdFx0dmlld191cmw6ICcnLFxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbml0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLnN0YXJ0VHJhY2tpbmcoKTtcblx0XHRcdHRoaXMuaW5pdF9yZWxhdGlvbnNoaXBzKCk7XG5cblx0XHRcdC8vIFNpZGViYXIgXCJOZXcgU2VjdGlvblwiIGJ1dHRvbiBicm9hZGNhc3Rcblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggJ2FkZC1uZXctc2VjdGlvbicsIHRoaXMuYWRkX3NlY3Rpb24sIHRoaXMgKTtcblxuXHRcdFx0Ly8gU2lkZWJhciBcIk5ldyBMZXNzb25cIiBidXR0b24gYnJvYWRjYXN0XG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIub24oICdhZGQtbmV3LWxlc3NvbicsIHRoaXMuYWRkX2xlc3NvbiwgdGhpcyApO1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIub24oICdsZXNzb24tc2VhcmNoLXNlbGVjdCcsIHRoaXMuYWRkX2V4aXN0aW5nX2xlc3NvbiwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBhbiBleGlzdGluZyBsZXNzb24gdG8gdGhlIGNvdXJzZVxuXHRcdCAqIER1cGxpY2F0ZSBhIGxlc3NvbiBmcm9tIHRoaXMgb3IgYW5vdGhlciBjb3Vyc2Ugb3IgYXR0YWNoIGFuIG9ycGhhbmVkIGxlc3NvblxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBsZXNzb24gIGxlc3NvbiBkYXRhIG9ialxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjExXG5cdFx0ICovXG5cdFx0YWRkX2V4aXN0aW5nX2xlc3NvbjogZnVuY3Rpb24oIGxlc3NvbiApIHtcblxuXHRcdFx0dmFyIGRhdGEgPSBsZXNzb24uZGF0YTtcblxuXHRcdFx0aWYgKCAnY2xvbmUnID09PSBsZXNzb24uYWN0aW9uICkge1xuXG5cdFx0XHRcdGRlbGV0ZSBkYXRhLmlkO1xuXHRcdFx0XHRpZiAoIGRhdGEucXVpeiApIHtcblx0XHRcdFx0XHRkZWxldGUgZGF0YS5xdWl6O1xuXHRcdFx0XHRcdGRhdGEucXVpel9lbmFibGVkID0gJ25vJztcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRhdGEuX2ZvcmNlU3luYyA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIGRhdGEub3JkZXI7XG5cdFx0XHRkZWxldGUgZGF0YS5wYXJlbnRfY291cnNlO1xuXHRcdFx0ZGVsZXRlIGRhdGEucGFyZW50X3NlY3Rpb247XG5cblx0XHRcdHRoaXMuYWRkX2xlc3NvbiggZGF0YSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBhIG5ldyBsZXNzb24gdG8gdGhlIGNvdXJzZVxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBkYXRhICAgbGVzc29uIGRhdGFcblx0XHQgKiBAcmV0dXJuICAgb2JqICAgICAgICAgIEJhY2tib25lLk1vZGVsIG9mIHRoZSBsZXNzb25cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGFkZF9sZXNzb246IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRkYXRhID0gZGF0YSB8fCB7fTtcblx0XHRcdHZhciBvcHRpb25zID0ge30sXG5cdFx0XHRcdHNlY3Rpb247XG5cblx0XHRcdGlmICggISBkYXRhLnBhcmVudF9zZWN0aW9uICkge1xuXHRcdFx0XHRzZWN0aW9uID0gdGhpcy5nZXRfc2VsZWN0ZWRfc2VjdGlvbigpO1xuXHRcdFx0XHRpZiAoICEgc2VjdGlvbiApIHtcblx0XHRcdFx0XHRzZWN0aW9uID0gdGhpcy5nZXQoICdzZWN0aW9ucycgKS5sYXN0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlY3Rpb24gPSB0aGlzLmdldCggJ3NlY3Rpb25zJyApLmdldCggZGF0YS5wYXJlbnRfc2VjdGlvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRkYXRhLl9zZWxlY3RlZCA9IHRydWU7XG5cblx0XHRcdGRhdGEucGFyZW50X2NvdXJzZSA9IHRoaXMuZ2V0KCAnaWQnICk7XG5cblx0XHRcdHZhciBsZXNzb24gPSBzZWN0aW9uLmFkZF9sZXNzb24oIGRhdGEsIG9wdGlvbnMgKTtcblx0XHRcdEJhY2tib25lLnB1YlN1Yi50cmlnZ2VyKCAnbmV3LWxlc3Nvbi1hZGRlZCcsIGxlc3NvbiApO1xuXG5cdFx0XHQvLyBleHBhbmQgdGhlIHNlY3Rpb25cblx0XHRcdHNlY3Rpb24uc2V0KCAnX2V4cGFuZGVkJywgdHJ1ZSApO1xuXG5cdFx0XHRyZXR1cm4gbGVzc29uO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBhIG5ldyBzZWN0aW9uIHRvIHRoZSBjb3Vyc2Vcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZGF0YSAgIHNlY3Rpb24gZGF0YVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRhZGRfc2VjdGlvbjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcdFx0dmFyIHNlY3Rpb25zID0gdGhpcy5nZXQoICdzZWN0aW9ucycgKSxcblx0XHRcdFx0b3B0aW9ucyA9IHt9LFxuXHRcdFx0XHRzZWxlY3RlZCA9IHRoaXMuZ2V0X3NlbGVjdGVkX3NlY3Rpb24oKTtcblxuXHRcdFx0Ly8gaWYgYSBzZWN0aW9uIGlzIHNlbGVjdGVkLCBhZGQgdGhlIG5ldyBzZWN0aW9uIGFmdGVyIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgb25lXG5cdFx0XHRpZiAoIHNlbGVjdGVkICkge1xuXHRcdFx0XHRvcHRpb25zLmF0ID0gc2VjdGlvbnMuaW5kZXhPZiggc2VsZWN0ZWQgKSArIDE7XG5cdFx0XHR9XG5cblx0XHRcdHNlY3Rpb25zLmFkZCggZGF0YSwgb3B0aW9ucyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgc2VjdGlvbiBpbiB0aGUgY291cnNlXG5cdFx0ICogQHJldHVybiAgIG9ianx1bmRlZmluZWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9zZWxlY3RlZF9zZWN0aW9uOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCAnc2VjdGlvbnMnICkuZmluZCggZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0XHRyZXR1cm4gbW9kZWwuZ2V0KCAnX3NlbGVjdGVkJyApO1xuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHR9LCBSZWxhdGlvbnNoaXBzLCBVdGlsaXRpZXMgKSApO1xuXG59ICk7XG5cbi8qKlxuICogTG9hZCBhbGwgbW9kZWxzXG4gKiBAcmV0dXJuICAgb2JqXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNy4wXG4gKi9cbmRlZmluZSggJ01vZGVscy9sb2FkZXInLFtcblx0XHQnTW9kZWxzL0Fic3RyYWN0Jyxcblx0XHQnTW9kZWxzL0NvdXJzZScsXG5cdFx0J01vZGVscy9JbWFnZScsXG5cdFx0J01vZGVscy9MZXNzb24nLFxuXHRcdCdNb2RlbHMvUXVlc3Rpb24nLFxuXHRcdCdNb2RlbHMvUXVlc3Rpb25DaG9pY2UnLFxuXHRcdCdNb2RlbHMvUXVlc3Rpb25UeXBlJyxcblx0XHQnTW9kZWxzL1F1aXonLFxuXHRcdCdNb2RlbHMvU2VjdGlvbidcblx0XSxcblx0ZnVuY3Rpb24oXG5cdFx0QWJzdHJhY3QsXG5cdFx0Q291cnNlLFxuXHRcdEltYWdlLFxuXHRcdExlc3Nvbixcblx0XHRRdWVzdGlvbixcblx0XHRRdWVzdGlvbkNob2ljZSxcblx0XHRRdWVzdGlvblR5cGUsXG5cdFx0UXVpeixcblx0XHRTZWN0aW9uXG5cdCkge1xuXG5cdHJldHVybiB7XG5cdFx0QWJzdHJhY3Q6IEFic3RyYWN0LFxuXHRcdENvdXJzZTogQ291cnNlLFxuXHRcdEltYWdlOiBJbWFnZSxcblx0XHRMZXNzb246IExlc3Nvbixcblx0XHRRdWVzdGlvbjogUXVlc3Rpb24sXG5cdFx0UXVlc3Rpb25DaG9pY2U6IFF1ZXN0aW9uQ2hvaWNlLFxuXHRcdFF1ZXN0aW9uVHlwZTogUXVlc3Rpb25UeXBlLFxuXHRcdFF1aXo6IFF1aXosXG5cdFx0U2VjdGlvbjogU2VjdGlvbixcblx0fTtcblxufSApO1xuXG4vKipcbiAqIERldGFjaGFibGUgbW9kZWxcbiAqIEB0eXBlICAgICB7T2JqZWN0fVxuICogQHNpbmNlICAgIDMuMTYuMTJcbiAqIEB2ZXJzaW9uICAzLjE2LjEyXG4gKi9cbmRlZmluZSggJ1ZpZXdzL19EZXRhY2hhYmxlJyxbXSwgZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIHtcblxuXHRcdC8qKlxuXHRcdCAqIERPTSBFdmVudHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKiBAc2luY2UgICAgMy4xNi4xMlxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjEyXG5cdFx0ICovXG5cdFx0ZXZlbnRzOiB7XG5cdFx0XHQnY2xpY2sgYVtocmVmPVwiI2xsbXMtZGV0YWNoLW1vZGVsXCJdJzogJ2RldGFjaF9tb2RlbCcsXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERldGFjaGVzIGEgbW9kZWwgZnJvbSBpdCdzIHBhcmVudCAoZG9lc24ndCBkZWxldGUpXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjEyXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMTJcblx0XHQgKi9cblx0XHRkZXRhY2hfbW9kZWw6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBtc2cgPSBMTE1TLmwxMG4ucmVwbGFjZSggJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZXRhY2ggdGhpcyAlcz8nLCB7XG5cdFx0XHRcdCclcyc6IHRoaXMubW9kZWwuZ2V0X2wxMG5fdHlwZSgpLFxuXHRcdFx0fSApO1xuXG5cdFx0XHRpZiAoIHdpbmRvdy5jb25maXJtKCBtc2cgKSApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMubW9kZWwuY29sbGVjdGlvbiApIHtcblx0XHRcdFx0XHR0aGlzLm1vZGVsLmNvbGxlY3Rpb24ucmVtb3ZlKCB0aGlzLm1vZGVsICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBwdWJsaXNoIGdsb2JhbCBldmVudFxuXHRcdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ21vZGVsLWRldGFjaGVkJywgdGhpcy5tb2RlbCApO1xuXG5cdFx0XHRcdC8vIHRyaWdnZXIgbG9jYWwgZXZlbnQgc28gZXh0ZW5kaW5nIHZpZXdzIGNhbiBydW4gb3RoZXIgYWN0aW9ucyB3aGVyZSBuZWNlc3Nhcnlcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCAnbW9kZWwtdHJhc2hlZCcsIHRoaXMubW9kZWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBIYW5kbGVzIFVYIGFuZCBFdmVudHMgZm9yIGlubGluZSBlZGl0aW5nIG9mIHZpZXdzXG4gKiBVc2Ugd2l0aCBhIE1vZGVsJ3MgVmlld1xuICogQWxsb3dzIGVkaXRpbmcgbW9kZWwudGl0bGUgZmllbGQgdmlhIC5sbG1zLWVkaXRhYmxlLXRpdGxlIGVsZW1lbnRzXG4gKiBAdHlwZSAgICAge09iamVjdH1cbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE3LjhcbiAqL1xuZGVmaW5lKCAnVmlld3MvX0VkaXRhYmxlJyxbXSwgZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIHtcblxuXHRcdG1lZGlhX2xpYjogbnVsbCxcblxuXHRcdC8qKlxuXHRcdCAqIERPTSBFdmVudHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuOFxuXHRcdCAqL1xuXHRcdGV2ZW50czoge1xuXHRcdFx0J2NsaWNrIC5sbG1zLWFkZC1pbWFnZSc6ICdvcGVuX21lZGlhX2xpYicsXG5cdFx0XHQnY2xpY2sgYVtocmVmPVwiI2xsbXMtZWRpdC1zbHVnXCJdJzogJ21ha2Vfc2x1Z19lZGl0YWJsZScsXG5cdFx0XHQnY2xpY2sgYVtocmVmPVwiI2xsbXMtcmVtb3ZlLWltYWdlXCJdJzogJ3JlbW92ZV9pbWFnZScsXG5cdFx0XHQnY2hhbmdlIC5sbG1zLWVkaXRhYmxlLXNlbGVjdCBzZWxlY3QnOiAnb25fc2VsZWN0Jyxcblx0XHRcdCdjaGFuZ2UgLmxsbXMtc3dpdGNoIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSc6ICd0b2dnbGVfc3dpdGNoJyxcblx0XHRcdCdjaGFuZ2UgLmxsbXMtZWRpdGFibGUtcmFkaW8gaW5wdXQnOiAnb25fcmFkaW9fc2VsZWN0Jyxcblx0XHRcdCdmb2N1c2luIC5sbG1zLWlucHV0JzogJ29uX2ZvY3VzJyxcblx0XHRcdCdmb2N1c291dCAubGxtcy1pbnB1dCc6ICdvbl9ibHVyJyxcblx0XHRcdCdrZXlkb3duIC5sbG1zLWlucHV0JzogJ29uX2tleWRvd24nLFxuXHRcdFx0J2lucHV0IC5sbG1zLWlucHV0W3R5cGU9XCJudW1iZXJcIl0nOiAnb25fYmx1cicsXG5cdFx0XHQncGFzdGUgLmxsbXMtaW5wdXRbZGF0YS1mb3JtYXR0aW5nXSc6ICdvbl9wYXN0ZScsXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIGEgbGlzdCBvZiBhbGxvd2VkIHRhZ3MgZm9yIGEgZ2l2ZW4gZWxlbWVudFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAkZWwgIGpRdWVyeSBzZWxlY3RvciBmb3IgdGhlIGVsZW1lbnRcblx0XHQgKiBAcmV0dXJuICAgYXJyYXlcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuOFxuXHRcdCAqL1xuXHRcdGdldF9hbGxvd2VkX3RhZ3M6IGZ1bmN0aW9uKCAkZWwgKSB7XG5cblx0XHRcdGlmICggJGVsLmF0dHIoICdkYXRhLWZvcm1hdHRpbmcnICkgKSB7XG5cdFx0XHRcdHJldHVybiBfLm1hcCggJGVsLmF0dHIoICdkYXRhLWZvcm1hdHRpbmcnICkuc3BsaXQoICcsJyApLCBmdW5jdGlvbiggdGFnICkge1xuXHRcdFx0XHRcdHJldHVybiB0YWcudHJpbSgpO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBbICdiJywgJ2knLCAndScsICdzdHJvbmcnLCAnZW0nIF07XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgdGhlIGNvbnRlbnQgb2YgYW4gZWxlbWVudFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAkZWwgIGpRdWVyeSBvYmplY3Qgb2YgdGhlIGVsZW1lbnRcblx0XHQgKiBAcmV0dXJuICAgc3RyaW5nXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3Ljhcblx0XHQgKi9cblx0XHRnZXRfY29udGVudDogZnVuY3Rpb24oICRlbCApIHtcblxuXHRcdFx0aWYgKCAnSU5QVVQnID09PSAkZWxbMF0udGFnTmFtZSApIHtcblx0XHRcdFx0cmV0dXJuICRlbC52YWwoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhICRlbC5hdHRyKCAnZGF0YS1mb3JtYXR0aW5nJyApICYmICEgJGVsLmhhc0NsYXNzKCAncWwtZWRpdG9yJyApICkge1xuXHRcdFx0XHRyZXR1cm4gJGVsLnRleHQoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIF8uc3RyaXBGb3JtYXR0aW5nKCAkZWwuaHRtbCgpLCB0aGlzLmdldF9hbGxvd2VkX3RhZ3MoICRlbCApICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lIGlmIGNoYW5nZXMgaGF2ZSBiZWVuIG1hZGUgdG8gdGhlIGVsZW1lbnRcblx0XHQgKiBAcGFyYW0gICAge1tvYmpdfSAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAge0Jvb2xlYW59ICAgICAgICB0cnVlIHdoZW4gY2hhbmdlcyBoYXZlIGJlZW4gbWFkZSwgZmFsc2Ugb3RoZXJ3aXNlXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRoYXNfY2hhbmdlZDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyICRlbCA9ICQoIGV2ZW50LnRhcmdldCApO1xuXHRcdFx0cmV0dXJuICggJGVsLmF0dHIoICdkYXRhLW9yaWdpbmFsLWNvbnRlbnQnICkgIT09IHRoaXMuZ2V0X2NvbnRlbnQoICRlbCApICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEVuc3VyZSB0aGF0IG5ldyBjb250ZW50IGlzIGF0IGxlYXN0IDEgY2hhcmFjdGVyIGxvbmdcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgIGpzIGV2ZW50IG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICBib29sZWFuXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjJcblx0XHQgKi9cblx0XHRpc192YWxpZDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdCRlbCA9ICQoIGV2ZW50LnRhcmdldCApLFxuXHRcdFx0XHRjb250ZW50ID0gdGhpcy5nZXRfY29udGVudCggJGVsICksXG5cdFx0XHRcdHR5cGUgPSAkZWwuYXR0ciggJ2RhdGEtdHlwZScgKTtcblxuXHRcdFx0aWYgKCAoICRlbC5hdHRyKCAncmVxdWlyZWQnICkgfHwgJGVsLmF0dHIoICdkYXRhLXJlcXVpcmVkJyApICkgJiYgY29udGVudC5sZW5ndGggPCAxICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggJ3VybCcgPT09IHR5cGUgfHwgJ3ZpZGVvJyA9PT0gdHlwZSApIHtcblx0XHRcdFx0aWYgKCAhIHRoaXMuX3ZhbGlkYXRlX3VybCggdGhpcy5nZXRfY29udGVudCggJGVsICkgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggJ3Blcm1hbGluaycgPT09IHR5cGUgKSB7XG5cblx0XHRcdFx0TExNUy5BamF4LmNhbGwoIHtcblx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRhY3Rpb246ICdsbG1zX2J1aWxkZXInLFxuXHRcdFx0XHRcdFx0YWN0aW9uX3R5cGU6ICdnZXRfcGVybWFsaW5rJyxcblx0XHRcdFx0XHRcdGNvdXJzZV9pZDogd2luZG93LmxsbXNfYnVpbGRlci5Db3Vyc2VNb2RlbC5nZXQoICdpZCcgKSxcblx0XHRcdFx0XHRcdGlkOiBzZWxmLm1vZGVsLmdldCggJ2lkJyApLFxuXHRcdFx0XHRcdFx0dGl0bGU6IHNlbGYubW9kZWwuZ2V0KCAndGl0bGUnICksXG5cdFx0XHRcdFx0XHRzbHVnOiBjb250ZW50LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0YmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RhcnQoICRlbC5jbG9zZXN0KCAnLmxsbXMtZWRpdGFibGUtdG9nZ2xlLWdyb3VwJyApLCAnc21hbGwnICk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggciApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCByLnBlcm1hbGluayAmJiByLnNsdWcgKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYubW9kZWwuc2V0KCAncGVybWFsaW5rJywgci5wZXJtYWxpbmsgKTtcblx0XHRcdFx0XHRcdFx0c2VsZi5tb2RlbC5zZXQoICduYW1lJywgci5zbHVnICk7XG5cdFx0XHRcdFx0XHRcdHNlbGYucmVuZGVyKCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplIGRhdGVwaWNrZXIgZWxlbWVudHNcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4wXG5cdFx0ICovXG5cdFx0aW5pdF9kYXRlcGlja2VyczogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHRoaXMuJGVsLmZpbmQoICcubGxtcy1lZGl0YWJsZS1kYXRlIGlucHV0JyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdCQoIHRoaXMgKS5kYXRldGltZXBpY2tlcigge1xuXHRcdFx0XHRcdGZvcm1hdDogJCggdGhpcyApLmF0dHIoICdkYXRhLWRhdGUtZm9ybWF0JyApIHx8ICdZLW0tZCBoOmkgQScsXG5cdFx0XHRcdFx0ZGF0ZXBpY2tlcjogKCB1bmRlZmluZWQgPT09ICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1kYXRlLWRhdGVwaWNrZXInICkgKSA/IHRydWUgOiAoICd0cnVlJyA9PSAkKCB0aGlzICkuYXR0ciggJ2RhdGEtZGF0ZS1kYXRlcGlja2VyJyApICksXG5cdFx0XHRcdFx0dGltZXBpY2tlcjogKCB1bmRlZmluZWQgPT09ICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1kYXRlLXRpbWVwaWNrZXInICkgKSA/IHRydWUgOiAoICd0cnVlJyA9PSAkKCB0aGlzICkuYXR0ciggJ2RhdGEtZGF0ZS10aW1lcGlja2VyJyApICksXG5cdFx0XHRcdFx0b25DbG9zZTogZnVuY3Rpb24oIGN1cnJlbnRfdGltZSwgJGlucHV0ICkge1xuXHRcdFx0XHRcdFx0JGlucHV0LmJsdXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemUgZWxlbWVudHMgdGhhdCBhbGxvdyBpbmxpbmUgZm9ybWF0dGluZ1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRpbml0X2Zvcm1hdHRpbmdfZWxzOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLiRlbC5maW5kKCAnLmxsbXMtaW5wdXQtZm9ybWF0dGluZ1tkYXRhLWZvcm1hdHRpbmddJyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdHZhciBmb3JtYXR0aW5nID0gJCggdGhpcyApLmF0dHIoICdkYXRhLWZvcm1hdHRpbmcnICkuc3BsaXQoICcsJyApLFxuXHRcdFx0XHRcdGF0dHIgPSAkKCB0aGlzICkuYXR0ciggJ2RhdGEtYXR0cmlidXRlJyApO1xuXG5cdFx0XHRcdHZhciBlZCA9IG5ldyBRdWlsbCggdGhpcywge1xuXHRcdFx0XHRcdG1vZHVsZXM6IHtcblx0XHRcdFx0XHRcdHRvb2xiYXI6IFsgZm9ybWF0dGluZyBdLFxuXHRcdFx0XHRcdFx0a2V5Ym9hcmQ6IHtcblx0XHRcdFx0XHRcdFx0YmluZGluZ3M6IHtcblx0XHRcdFx0XHRcdFx0XHR0YWI6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGtleTogOSxcblx0XHRcdFx0XHRcdFx0XHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCByYW5nZSwgY29udGV4dCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0MTM6IHtcblx0XHRcdFx0XHRcdFx0XHRcdGtleTogMTMsXG5cdFx0XHRcdFx0XHRcdFx0XHRoYW5kbGVyOiBmdW5jdGlvbiggcmFuZ2UsIGNvbnRleHQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVkLnJvb3QuYmx1cigpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cGxhY2Vob2xkZXI6ICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1wbGFjZWhvbGRlcicgKSxcblx0XHRcdFx0XHR0aGVtZTogJ2J1YmJsZScsXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRlZC5vbiggJ3RleHQtY2hhbmdlJywgZnVuY3Rpb24oIGRlbHRhLCBvbGREZWx0YSwgc291cmNlICkge1xuXHRcdFx0XHRcdHNlbGYubW9kZWwuc2V0KCBhdHRyLCBzZWxmLmdldF9jb250ZW50KCAkKCBlZC5yb290ICkgKSApO1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdmb3JtYXR0aW5nLWVkLWluaXQnLCBlZCwgJCggdGhpcyApLCBzZWxmICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplIGVkaXRhYmxlIHNlbGVjdCBlbGVtZW50c1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRpbml0X3NlbGVjdHM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC5maW5kKCAnLmxsbXMtZWRpdGFibGUtc2VsZWN0IHNlbGVjdCcgKS5sbG1zU2VsZWN0Migge1xuXHRcdFx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEJsdXIvZm9jdXNvdXQgZnVuY3Rpb24gZm9yIC5sbG1zLWVkaXRhYmxlLXRpdGxlIGVsZW1lbnRzXG5cdFx0ICogQXV0b21hdGljYWxseSBzYXZlcyBjaGFuZ2VzIGlmIGNoYW5nZXMgaGF2ZSBiZWVuIG1hZGVcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgIGpzIGV2ZW50IG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjZcblx0XHQgKi9cblx0XHRvbl9ibHVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHR0aGlzLm1vZGVsLnNldCggJ19oYXNfZm9jdXMnLCBmYWxzZSwgeyBzaWxlbnQ6IHRydWUgfSApO1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdCRlbCA9ICQoIGV2ZW50LnRhcmdldCApLFxuXHRcdFx0XHRjaGFuZ2VkID0gdGhpcy5oYXNfY2hhbmdlZCggZXZlbnQgKTtcblxuXHRcdFx0aWYgKCBjaGFuZ2VkICkge1xuXG5cdFx0XHRcdGlmICggISBzZWxmLmlzX3ZhbGlkKCBldmVudCApICkge1xuXHRcdFx0XHRcdHNlbGYucmV2ZXJ0X2VkaXRzKCBldmVudCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc2F2ZV9lZGl0cyggZXZlbnQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRm9jdXMgZXZlbnQgZm9yIGVkaXRhYmxlIGlucHV0c1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi42XG5cdFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdG9uX2ZvY3VzOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0dGhpcy5tb2RlbC5zZXQoICdfaGFzX2ZvY3VzJywgdHJ1ZSwgeyBzaWxlbnQ6IHRydWUgfSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhhbmRsZSBjb250ZW50IHBhc3RlZCBpbnRvIGNvbnRlbnRlZGl0YWJsZSBmaWVsZHNcblx0XHQgKiBUaGlzIHdpbGwgZW5zdXJlIHRoYXQgSFRNTCBmcm9tIFJURiBlZGl0b3JzIGlzbid0IHBhc3RlZCBpbnRvIHRoZSBkb21cblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgIGpzIGV2ZW50IG9ialxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuOFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3Ljhcblx0XHQgKi9cblx0XHRvbl9wYXN0ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdHZhciB0ZXh0ID0gKCBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50ICkuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCAndGV4dC9wbGFpbicgKTtcblx0XHRcdHdpbmRvdy5kb2N1bWVudC5leGVjQ29tbWFuZCggJ2luc2VydFRleHQnLCBmYWxzZSwgdGV4dCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENoYW5nZSBldmVudCBmb3Igc2VsZWN0YWJsZXNcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgIGpzIGV2ZW50IG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRvbl9zZWxlY3Q6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0dmFyICRlbCA9ICQoIGV2ZW50LnRhcmdldCApLFxuXHRcdFx0XHRtdWx0aSA9ICggJGVsLmF0dHIoICdtdWx0aXBsZScgKSApLFxuXHRcdFx0XHRhdHRyID0gJGVsLmF0dHIoICduYW1lJyApLFxuXHRcdFx0XHQkc2VsZWN0ZWQgPSAkZWwuZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKSxcblx0XHRcdFx0dmFsO1xuXG5cdFx0XHRpZiAoIG11bHRpICkge1xuXHRcdFx0XHR2YWwgPSBbXTtcblx0XHRcdFx0dmFsID0gJHNlbGVjdGVkLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMudmFsdWU7XG5cdFx0XHRcdH0gKS5nZXQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9ICRzZWxlY3RlZFswXS52YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb2RlbC5zZXQoIGF0dHIsIHZhbCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENoYW5nZSBldmVudCBmb3IgcmFkaW8gZWxlbWVudCBncm91cHNcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgIGpzIGV2ZW50IG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuNlxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjZcblx0XHQgKi9cblx0XHRvbl9yYWRpb19zZWxlY3Q6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0dmFyICRlbCA9ICQoIGV2ZW50LnRhcmdldCApLFxuXHRcdFx0XHRhdHRyID0gJGVsLmF0dHIoICduYW1lJyApLFxuXHRcdFx0XHR2YWwgPSAkZWwudmFsKCk7XG5cblx0XHRcdHRoaXMubW9kZWwuc2V0KCBhdHRyLCB2YWwgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBLZXlkb3duIGZ1bmN0aW9uIGZvciAubGxtcy1lZGl0YWJsZS10aXRsZSBlbGVtZW50c1xuXHRcdCAqIEJsdXJzXG5cdFx0ICogQHBhcmFtICAgIHtvYmp9ICAgZXZlbnQgIGpzIGV2ZW50IG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3Ljhcblx0XHQgKi9cblx0XHRvbl9rZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdGtleSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGUsXG5cdFx0XHRcdHNoaWZ0ID0gZXZlbnQuc2hpZnRLZXk7XG5cdFx0XHRcdC8vIGN0cmwgPSBldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXk7XG5cblx0XHRcdHN3aXRjaCAoIGtleSApIHtcblxuXHRcdFx0XHRjYXNlIDEzOiAvLyBlbnRlclxuXHRcdFx0XHRcdC8vIHNoaWZ0ICsgZW50ZXIgc2hvdWxkIGFkZCBhIHJldHVyblxuXHRcdFx0XHRcdGlmICggISBzaGlmdCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRldmVudC50YXJnZXQuYmx1cigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAyNzogLy8gZXNjYXBlXG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR0aGlzLnJldmVydF9lZGl0cyggZXZlbnQgKTtcblx0XHRcdFx0XHRldmVudC50YXJnZXQuYmx1cigpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE9wZW4gdGhlIFdQIG1lZGlhIGxpYlxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdG9wZW5fbWVkaWFfbGliOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdCRlbCA9ICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKTtcblxuXHRcdFx0aWYgKCBzZWxmLm1lZGlhX2xpYiApIHtcblxuXHRcdFx0XHRzZWxmLm1lZGlhX2xpYi51cGxvYWRlci51cGxvYWRlci5wYXJhbSggJ3Bvc3RfaWQnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2VsZi5tZWRpYV9saWIgPSB3cC5tZWRpYS5mcmFtZXMuZmlsZV9mcmFtZSA9IHdwLm1lZGlhKCB7XG5cdFx0XHRcdFx0dGl0bGU6IExMTVMubDEwbi50cmFuc2xhdGUoICdTZWxlY3QgYW4gaW1hZ2UnICksXG5cdFx0XHRcdFx0YnV0dG9uOiB7XG5cdFx0XHRcdFx0XHR0ZXh0OiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnVXNlIHRoaXMgaW1hZ2UnICksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRtdWx0aXBsZTogZmFsc2VcdC8vIFNldCB0byB0cnVlIHRvIGFsbG93IG11bHRpcGxlIGZpbGVzIHRvIGJlIHNlbGVjdGVkXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRzZWxmLm1lZGlhX2xpYi5vbiggJ3NlbGVjdCcsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0dmFyIHNpemUgPSAkZWwuYXR0ciggJ2RhdGEtaW1hZ2Utc2l6ZScgKSxcblx0XHRcdFx0XHRcdGF0dGFjaG1lbnQgPSBzZWxmLm1lZGlhX2xpYi5zdGF0ZSgpLmdldCggJ3NlbGVjdGlvbicgKS5maXJzdCgpLnRvSlNPTigpLFxuXHRcdFx0XHRcdFx0aW1hZ2UgPSBzZWxmLm1vZGVsLmdldCggJGVsLmF0dHIoICdkYXRhLWF0dHJpYnV0ZScgKSApLFxuXHRcdFx0XHRcdFx0dXJsO1xuXG5cdFx0XHRcdFx0aWYgKCBzaXplICYmIGF0dGFjaG1lbnQuc2l6ZXNbIHNpemUgXSApIHtcblx0XHRcdFx0XHRcdHVybCA9IGF0dGFjaG1lbnQuc2l6ZXNbIHNpemUgXS51cmw7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHVybCA9IGF0dGFjaG1lbnQudXJsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGltYWdlLnNldCgge1xuXHRcdFx0XHRcdFx0aWQ6IGF0dGFjaG1lbnQuaWQsXG5cdFx0XHRcdFx0XHRzcmM6IHVybCxcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNlbGYubWVkaWFfbGliLm9wZW4oKTtcblxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsaWNrIGV2ZW50IHRvIHJlbW92ZSBhbiBpbWFnZVxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqXG5cdFx0ICogQHJldHVybiAgIHZvaWRzXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW1vdmVfaW1hZ2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dGhpcy5tb2RlbC5nZXQoICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5hdHRyKCAnZGF0YS1hdHRyaWJ1dGUnICkgKS5zZXQoIHtcblx0XHRcdFx0aWQ6ICcnLFxuXHRcdFx0XHRzcmM6ICcnLFxuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhlbHBlciB0byB1bmRvIGNoYW5nZXNcblx0XHQgKiBCb3VuZCB0byBcImVzY2FwZVwiIGtleSB2aWEgb25fa2V5ZHdvbiBmdW5jdGlvblxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHJldmVydF9lZGl0czogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyICRlbCA9ICQoIGV2ZW50LnRhcmdldCApLFxuXHRcdFx0XHR2YWwgPSAkZWwuYXR0ciggJ2RhdGEtb3JpZ2luYWwtY29udGVudCcgKTtcblx0XHRcdCRlbC5odG1sKCB2YWwgKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU3luYyBjaGFnZXMgdG8gdGhlIG1vZGVsIGFuZCBEQlxuXHRcdCAqIEBwYXJhbSAgICB7b2JqfSAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0c2F2ZV9lZGl0czogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHR2YXIgJGVsID0gJCggZXZlbnQudGFyZ2V0ICksXG5cdFx0XHRcdHZhbCA9IHRoaXMuZ2V0X2NvbnRlbnQoICRlbCApO1xuXG5cdFx0XHR0aGlzLm1vZGVsLnNldCggJGVsLmF0dHIoICdkYXRhLWF0dHJpYnV0ZScgKSwgdmFsICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ2hhbmdlIGV2ZW50IGZvciBhIHN3aXRjaCBlbGVtZW50XG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4wXG5cdFx0ICovXG5cdFx0dG9nZ2xlX3N3aXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdHZhciAkZWwgPSAkKCBldmVudC50YXJnZXQgKSxcblx0XHRcdFx0YXR0ciA9ICRlbC5hdHRyKCAnbmFtZScgKSxcblx0XHRcdFx0cmVyZW5kZXIgPSAkZWwuYXR0ciggJ2RhdGEtcmVyZW5kZXInICksXG5cdFx0XHRcdHZhbDtcblxuXHRcdFx0aWYgKCAkZWwuaXMoICc6Y2hlY2tlZCcgKSApIHtcblx0XHRcdFx0dmFsID0gJGVsLmF0dHIoICdkYXRhLW9uJyApID8gJGVsLmF0dHIoICdkYXRhLW9uJyApIDogJ3llcyc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSAkZWwuYXR0ciggJ2RhdGEtb2ZmJyApID8gJGVsLmF0dHIoICdkYXRhLW9mZicgKSA6ICdubyc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggLTEgIT09IGF0dHIuaW5kZXhPZiggJy4nICkgKSB7XG5cblx0XHRcdFx0dmFyIHNwbGl0ID0gYXR0ci5zcGxpdCggJy4nICk7XG5cblx0XHRcdFx0aWYgKCAncGFyZW50JyA9PT0gc3BsaXRbMF0gKSB7XG5cdFx0XHRcdFx0dGhpcy5tb2RlbC5nZXRfcGFyZW50KCkuc2V0KCBzcGxpdFsxXSwgdmFsICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5tb2RlbC5nZXQoIHNwbGl0WzBdICkuc2V0KCBzcGxpdFsxXSwgdmFsICk7XG5cdFx0XHRcdH1cblxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMubW9kZWwuc2V0KCBhdHRyLCB2YWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRyaWdnZXIoIGF0dHIucmVwbGFjZSggJy4nLCAnLScgKSArICdfdG9nZ2xlJywgdmFsICk7XG5cblx0XHRcdGlmICggISByZXJlbmRlciB8fCAneWVzJyA9PT0gcmVyZW5kZXIgKSB7XG5cdFx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0c2VsZi5yZW5kZXIoKTtcblx0XHRcdFx0fSwgMTAwICk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXMgYSBXUCBFZGl0b3Igb24gYSB0ZXh0YXJlYVxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBpZCAgICAgICAgQ1NTIElEIG9mIHRoZSBlZGl0b3IgKGRvbid0IGluY2x1ZGUgIylcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgc2V0dGluZ3MgIG9wdGlvbmFsIG9iamVjdCBvZiBzZXR0aW5ncyB0byBwYXNzIHRvIHdwLmVkaXRvci5pbml0aWFsaXplKClcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aW5pdF9lZGl0b3I6IGZ1bmN0aW9uKCBpZCwgc2V0dGluZ3MgKSB7XG5cblx0XHRcdHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG5cblx0XHRcdHdwLmVkaXRvci5yZW1vdmUoIGlkICk7XG5cblx0XHRcdHdwLmVkaXRvci5pbml0aWFsaXplKCBpZCwgJC5leHRlbmQoIHRydWUsIHdwLmVkaXRvci5nZXREZWZhdWx0U2V0dGluZ3MoKSwge1xuXHRcdFx0XHRtZWRpYUJ1dHRvbnM6IHRydWUsXG5cdFx0XHRcdHRpbnltY2U6IHtcblx0XHRcdFx0XHR0b29sYmFyMTogJ2JvbGQsaXRhbGljLHN0cmlrZXRocm91Z2gsYnVsbGlzdCxudW1saXN0LGJsb2NrcXVvdGUsaHIsYWxpZ25sZWZ0LGFsaWduY2VudGVyLGFsaWducmlnaHQsbGluayx1bmxpbmssd3BfYWR2Jyxcblx0XHRcdFx0XHR0b29sYmFyMjogJ2Zvcm1hdHNlbGVjdCx1bmRlcmxpbmUsYWxpZ25qdXN0aWZ5LGZvcmVjb2xvcixwYXN0ZXRleHQscmVtb3ZlZm9ybWF0LGNoYXJtYXAsb3V0ZGVudCxpbmRlbnQsdW5kbyxyZWRvLHdwX2hlbHAnLFxuXHRcdFx0XHRcdHNldHVwOiBfLmJpbmQoIHRoaXMub25fZWRpdG9yX3JlYWR5LCB0aGlzICksXG5cdFx0XHRcdH1cblx0XHRcdH0sIHNldHRpbmdzICkgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZXR1cCBhIHBlcm1hbGluayBlZGl0b3IgdG8gYWxsb3cgZWRpdGluZyBvZiBhIHBlcm1hbGlua1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi42XG5cdFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdG1ha2Vfc2x1Z19lZGl0YWJsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdCRidG4gPSAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksXG5cdFx0XHRcdCRsaW5rID0gJGJ0bi5wcmV2QWxsKCAnYScgKSxcblx0XHRcdFx0JGlucHV0ID0gJGJ0bi5wcmV2KCAnaW5wdXQucGVybWFsaW5rJyApLFxuXHRcdFx0XHRmdWxsX3VybCA9ICRsaW5rLmF0dHIoICdocmVmJyApLFxuXHRcdFx0XHRzbHVnID0gJGlucHV0LnZhbCgpLFxuXHRcdFx0XHRzaG9ydF91cmwgPSBmdWxsX3VybC5yZXBsYWNlKCBzbHVnLCAnJyApO1xuXG5cdFx0XHQvLyBoaWRlIHRoZSBidXR0b25cblx0XHRcdCRidG4uaGlkZSgpO1xuXG5cdFx0XHQvLyBtYWtlIHRoZSBsaW5rIG5vdCBjbGlja2FibGVcblx0XHRcdCRsaW5rLmNzcygge1xuXHRcdFx0XHRjb2xvcjogJyM5OTknLFxuXHRcdFx0XHQncG9pbnRlci1ldmVudHMnOiAnbm9uZScsXG5cdFx0XHRcdCd0ZXh0LWRlY29yYXRpb24nOiAnbm9uZScsXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIHJlbW92ZSB0aGUgY3VycmVudCBzbHVnICYgdHJhaWxpbmcgc2xhc2ggZnJvbSB0aGUgVVJMXG5cdFx0XHQkbGluay50ZXh0KCBzaG9ydF91cmwuc3Vic3RyaW5nKCAwLCBzaG9ydF91cmwubGVuZ3RoIC0gMSApICk7XG5cblx0XHRcdC8vIGZvY3VzIGluIG9uIHRoZSBmaWVsZFxuXHRcdFx0JGlucHV0LnNob3coKS5mb2N1cygpO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBhZnRlciBpbml0aWFsaXphdGlvbiBvZiBhbiBlZGl0b3Jcblx0XHQgKiBVcGRhdGVzIFVJIGlmIGEgbGFiZWwgaXMgcHJlc2VudFxuXHRcdCAqIEJpbmRzIGEgY2hhbmdlIGV2ZW50IHRvIGVuc3VyZSBlZGl0b3IgY2hhbmdlcyBhcmUgc2F2ZWQgdG8gdGhlIG1vZGVsXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGVkaXRvciAgd3AuZWRpdG9yIGluc3RhbmNlXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMVxuXHRcdCAqL1xuXHRcdG9uX2VkaXRvcl9yZWFkeTogZnVuY3Rpb24oIGVkaXRvciApIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0XHQkZWQgPSAkKCAnIycgKyBlZGl0b3IuaWQgKSxcblx0XHRcdFx0JHBhcmVudCA9ICRlZC5jbG9zZXN0KCAnLmxsbXMtZWRpdGFibGUtZWRpdG9yJyApLFxuXHRcdFx0XHQkbGFiZWwgPSAkcGFyZW50LmZpbmQoICcubGxtcy1sYWJlbCcgKSxcblx0XHRcdFx0cHJvcCA9ICRlZC5hdHRyKCAnZGF0YS1hdHRyaWJ1dGUnIClcblxuXHRcdFx0aWYgKCAkbGFiZWwubGVuZ3RoICkge1xuXHRcdFx0XHQkbGFiZWwucHJlcGVuZFRvKCAkcGFyZW50LmZpbmQoICcud3AtZWRpdG9yLXRvb2xzJyApICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHNhdmUgY2hhbmdlcyB0byB0aGUgbW9kZWwgdmlhIFZpc3VhbCBlZFxuXHRcdFx0ZWRpdG9yLm9uKCAnY2hhbmdlJywgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRzZWxmLm1vZGVsLnNldCggcHJvcCwgd3AuZWRpdG9yLmdldENvbnRlbnQoIGVkaXRvci5pZCApICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIHNhdmUgY2hhbmdlcyB2aWEgVGV4dCBlZFxuXHRcdFx0JGVkLm9uKCAnaW5wdXQnLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHNlbGYubW9kZWwuc2V0KCBwcm9wLCAkZWQudmFsKCkgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gdHJpZ2dlciBhbiBpbnB1dCBvbiB0aGUgVGV4dCBlZCB3aGVuIHF1aWNrdGFncyBidXR0b25zIGFyZSBjbGlja2VkXG5cdFx0XHQkcGFyZW50Lm9uKCAnY2xpY2snLCAnLnF1aWNrdGFncy10b29sYmFyIC5lZF9idXR0b24nLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JGVkLnRyaWdnZXIoICdpbnB1dCcgKTtcblx0XHRcdFx0fSwgMTAgKTtcblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHRfdmFsaWRhdGVfdXJsOiBmdW5jdGlvbiggc3RyICkge1xuXG5cdFx0XHR2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdhJyApO1xuXHRcdFx0YS5ocmVmID0gc3RyO1xuXHRcdFx0cmV0dXJuICggYS5ob3N0ICYmIGEuaG9zdCAhPT0gd2luZG93LmxvY2F0aW9uLmhvc3QgKTtcblxuXHRcdH1cblxuXHR9O1xuXG59ICk7XG5cbi8qKlxuICogX3JlY2VpdmUgb3ZlcnJpZGUgZm9yIEJhY2tib25lLkNvbGxlY3Rpb25WaWV3IGNvcmVcbiAqIGVuYWJsZXMgY29ubmVjdGlvbiB3aXRoIGpRdWVyeSBVSSBkcmFnZ2FibGUgYnV0dG9uc1xuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTYuMFxuICovXG5kZWZpbmUoICdWaWV3cy9fUmVjZWl2YWJsZScsW10sIGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiB7XG5cblx0XHQvKipcblx0XHQgKiBPdmVybG9hZHMgdGhlIGZ1bmN0aW9uIGZyb20gQmFja2JvbmUuQ29sbGVjdGlvblZpZXcgY29yZSBiZWNhdXNlIGl0IGRvZXNuJ3QgcHJvcGVybHkgaGFuZGxlXG5cdFx0ICogcmVjZWlldmVzIGZyb20gYSBqUXVlcnkgVUkgZHJhZ2dhYmxlIG9iamVjdFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIHVpICAgICBqUXVlcnkgVUkgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdF9yZWNlaXZlIDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblxuXHRcdFx0Ly8gY2FtZSBmcm9tIHNpZGViYXIgZHJhZ1xuXHRcdFx0aWYgKCB1aS5zZW5kZXIuaGFzQ2xhc3MoICd1aS1kcmFnZ2FibGUnICkgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IHRoaXMuX2dldENvbnRhaW5lckVsKCkuY2hpbGRyZW4oKS5pbmRleCggdWkuaGVscGVyICk7XG5cdFx0XHRcdHVpLmhlbHBlci5yZW1vdmUoKTsgLy8gcmVtb3ZlIHRoZSBoZWxwZXJcblx0XHRcdFx0dGhpcy5jb2xsZWN0aW9uLmFkZCgge30sIHsgYXQ6IGluZGV4IH0gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2VuZGVyTGlzdEVsID0gdWkuc2VuZGVyO1xuXHRcdFx0dmFyIHNlbmRlckNvbGxlY3Rpb25MaXN0VmlldyA9IHNlbmRlckxpc3RFbC5kYXRhKCAndmlldycgKTtcblx0XHRcdGlmKCAhIHNlbmRlckNvbGxlY3Rpb25MaXN0VmlldyB8fCAhIHNlbmRlckNvbGxlY3Rpb25MaXN0Vmlldy5jb2xsZWN0aW9uICkgcmV0dXJuO1xuXG5cdFx0XHR2YXIgbmV3SW5kZXggPSB0aGlzLl9nZXRDb250YWluZXJFbCgpLmNoaWxkcmVuKCkuaW5kZXgoIHVpLml0ZW0gKTtcblx0XHRcdHZhciBtb2RlbFJlY2VpdmVkID0gc2VuZGVyQ29sbGVjdGlvbkxpc3RWaWV3LmNvbGxlY3Rpb24uZ2V0KCB1aS5pdGVtLmF0dHIoICdkYXRhLW1vZGVsLWNpZCcgKSApO1xuXHRcdFx0c2VuZGVyQ29sbGVjdGlvbkxpc3RWaWV3LmNvbGxlY3Rpb24ucmVtb3ZlKCBtb2RlbFJlY2VpdmVkICk7XG5cdFx0XHR0aGlzLmNvbGxlY3Rpb24uYWRkKCBtb2RlbFJlY2VpdmVkLCB7IGF0IDogbmV3SW5kZXggfSApO1xuXHRcdFx0bW9kZWxSZWNlaXZlZC5jb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uOyAvLyBvdGhlcndpc2Ugd2lsbCBub3QgZ2V0IHByb3Blcmx5IHNldCwgc2luY2UgbW9kZWxSZWNlaXZlZC5jb2xsZWN0aW9uIG1pZ2h0IGFscmVhZHkgaGF2ZSBhIHZhbHVlLlxuXHRcdFx0dGhpcy5zZXRTZWxlY3RlZE1vZGVsKCBtb2RlbFJlY2VpdmVkICk7XG5cdFx0fSxcblxuXHR9XG5cbn0gKTtcblxuXG4vKipcbiAqIFNoaWZ0YWJsZSB2aWV3IG1peGluIGZ1bmN0aW9uXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL19TaGlmdGFibGUnLFtdLCBmdW5jdGlvbigpIHtcblxuXHRyZXR1cm4ge1xuXG5cdFx0LyoqXG5cdFx0ICogQ29uZGl0aW9uYWxseSBoaWRlIGFjdGlvbiBidXR0b25zIGJhc2VkIG9uIHNlY3Rpb24gcG9zaXRpb24gaW4gY29sbGVjdGlvblxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRtYXliZV9oaWRlX3NoaWZ0YWJsZV9idXR0b25zOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYgKCAhIHRoaXMubW9kZWwuY29sbGVjdGlvbiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMubW9kZWwuZ2V0KCAndHlwZScgKTtcblxuXHRcdFx0aWYgKCB0aGlzLm1vZGVsLmNvbGxlY3Rpb24uZmlyc3QoKSA9PT0gdGhpcy5tb2RlbCApIHtcblx0XHRcdFx0dGhpcy4kZWwuZmluZCggJy5zaGlmdC11cC0tJyArIHR5cGUgKS5oaWRlKCk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0aGlzLm1vZGVsLmNvbGxlY3Rpb24ubGFzdCgpID09PSB0aGlzLm1vZGVsICkge1xuXHRcdFx0XHR0aGlzLiRlbC5maW5kKCAnLnNoaWZ0LWRvd24tLScgKyB0eXBlICkuaGlkZSgpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE1vdmUgYW4gaXRlbSBpbiBhIGNvbGxlY3Rpb24gZnJvbSBvbmUgcG9zaXRpb24gdG8gYW5vdGhlclxuXHRcdCAqIEBwYXJhbSAgICBpbnQgICBvbGRfaW5kZXggIGN1cnJlbnQgKG9sZCkgaW5kZXggd2l0aGluIHRoZSBjb2xsZWN0aW9uXG5cdFx0ICogQHBhcmFtICAgIGludCAgIG5ld19pbmRleCAgZGVzaXJlZCAobmV3KSBpbmRleCB3aXRoaW4gdGhlIGNvbGxlY3Rpb25cblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0c2hpZnQ6IGZ1bmN0aW9uKCBvbGRfaW5kZXgsIG5ld19pbmRleCApIHtcblxuXHRcdFx0dmFyIGNvbGxlY3Rpb24gPSB0aGlzLm1vZGVsLmNvbGxlY3Rpb247XG5cblx0XHRcdGNvbGxlY3Rpb24ucmVtb3ZlKCB0aGlzLm1vZGVsICk7XG5cdFx0XHRjb2xsZWN0aW9uLmFkZCggdGhpcy5tb2RlbCwgeyBhdDogbmV3X2luZGV4IH0gKTtcblx0XHRcdGNvbGxlY3Rpb24udHJpZ2dlciggJ3Jlb3JkZXInICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogTW92ZSBhbiBpdGVtIGRvd24gdGhlIHRyZWUgb25lIHBvc2l0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHNoaWZ0X2Rvd246IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR2YXIgaW5kZXggPSB0aGlzLm1vZGVsLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcy5tb2RlbCApO1xuXHRcdFx0dGhpcy5zaGlmdCggaW5kZXgsIGluZGV4ICsgMSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE1vdmUgYW4gaXRlbSB1cCB0aGUgdHJlZSBvbmUgcG9zaXRpb25cblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0c2hpZnRfdXA6IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR2YXIgaW5kZXggPSB0aGlzLm1vZGVsLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcy5tb2RlbCApO1xuXHRcdFx0dGhpcy5zaGlmdCggaW5kZXgsIGluZGV4IC0gMSApO1xuXG5cdFx0fSxcblxuXHR9O1xuXG59ICk7XG5cbi8qKlxuICogU3VidmlldyB1dGlsaXR5IG1peGluXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL19TdWJ2aWV3JyxbXSwgZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIHtcblxuXHRcdHN1YnNjcmlwdGlvbnM6IHt9LFxuXG5cdFx0LyoqXG5cdFx0ICogTmFtZSBvZiB0aGUgY3VycmVudCBzdWJ2aWV3XG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0c3RhdGU6ICcnLFxuXG5cdFx0LyoqXG5cdFx0ICogT2JqZWN0IG9mIHN1YnZpZXcgZGF0YVxuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHZpZXdzOiB7fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIGEgc3VidmlldyBieSBuYW1lIGZyb20gdGhpcy52aWV3c1xuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBuYW1lICAgbmFtZSBvZiB0aGUgc3Vidmlld1xuXHRcdCAqIEByZXR1cm4gICBvYmx8ZmFsc2Vcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGdldF9zdWJ2aWV3OiBmdW5jdGlvbiggbmFtZSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLnZpZXdzWyBuYW1lIF0gKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnZpZXdzWyBuYW1lIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH0sXG5cblx0XHRldmVudHNfc3Vic2NyaWJlOiBmdW5jdGlvbiggZXZlbnRzICkge1xuXG5cdFx0XHRfLmVhY2goIGV2ZW50cywgZnVuY3Rpb24oIGZ1bmMsIGV2ZW50ICkge1xuXG5cdFx0XHRcdHRoaXMuc3Vic2NyaXB0aW9uc1sgZXZlbnQgXSA9IGZ1bmM7XG5cdFx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggZXZlbnQsIGZ1bmMsIHRoaXMgKTtcblxuXHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdGV2ZW50c191bnN1YnNjcmliZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdF8uZWFjaCggdGhpcy5zdWJzY3JpcHRpb25zLCBmdW5jdGlvbiggZnVuYywgZXZlbnQgKSB7XG5cblx0XHRcdFx0QmFja2JvbmUucHViU3ViLm9mZiggZXZlbnQsIGZ1bmMsIHRoaXMgKTtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuc3Vic2NyaXB0aW9uc1sgZXZlbnQgXTtcblxuXHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhIHNpbmdsZSBzdWJ2aWV3IChhbmQgYWxsIGl0J3Mgc3Vidmlld3MpIGJ5IG5hbWVcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgbmFtZSAgIG5hbWUgb2YgdGhlIHN1YnZpZXdcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0cmVtb3ZlX3N1YnZpZXc6IGZ1bmN0aW9uKCBuYW1lICkge1xuXG5cdFx0XHR2YXIgdmlldyA9IHRoaXMuZ2V0X3N1YnZpZXcoIG5hbWUgKTtcblxuXHRcdFx0aWYgKCAhIHZpZXcgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2aWV3Lmluc3RhbmNlICkge1xuXG5cdFx0XHRcdC8vIHJlbW92ZSB0aGUgc3Vidmlld3MgaWYgdGhlIHZpZXcgaGFzIHN1YnZpZXdzXG5cdFx0XHRcdGlmICggISBfLmlzRW1wdHkoIHZpZXcuaW5zdGFuY2Uudmlld3MgKSApIHtcblx0XHRcdFx0XHR2aWV3Lmluc3RhbmNlLmV2ZW50c191bnN1YnNjcmliZSgpO1xuXHRcdFx0XHRcdHZpZXcuaW5zdGFuY2UucmVtb3ZlX3N1YnZpZXdzKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2aWV3Lmluc3RhbmNlLm9mZigpO1xuXHRcdFx0XHR2aWV3Lmluc3RhbmNlLm9mZiggbnVsbCwgbnVsbCwgbnVsbCApO1xuXHRcdFx0XHR2aWV3Lmluc3RhbmNlLnJlbW92ZSgpO1xuXHRcdFx0XHR2aWV3Lmluc3RhbmNlLnVuZGVsZWdhdGVFdmVudHMoKTtcblxuXHRcdFx0XHQvLyBfLmVhY2goIHZpZXcuaW5zdGFuY2UsIGZ1bmN0aW9uKCB2YWwsIGtleSApIHtcblx0XHRcdFx0Ly8gXHRkZWxldGUgdmlldy5pbnN0YW5jZVsga2V5IF07XG5cdFx0XHRcdC8vIH0gKTtcblxuXHRcdFx0XHR2aWV3Lmluc3RhbmNlID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbGwgc3Vidmlld3MgKGFuZCBhbGwgdGhlIHN1YnZpZXdzIG9mIHRob3NlIHN1YnZpZXdzKVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW1vdmVfc3Vidmlld3M6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRfLmVhY2goIHRoaXMudmlld3MsIGZ1bmN0aW9uKCBkYXRhLCBuYW1lICkge1xuXG5cdFx0XHRcdHRoaXMucmVtb3ZlX3N1YnZpZXcoIG5hbWUgKTtcblxuXHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlciBzdWJ2aWV3cyBiYXNlZCBvbiBjdXJyZW50IHN0YXRlXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIHZpZXdfZGF0YSAgYWRkaXRpb25hbCBkYXRhIHRvIHBhc3MgdG8gdGhlIHN1YnZpZXdzXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHJlbmRlcl9zdWJ2aWV3czogZnVuY3Rpb24oIHZpZXdfZGF0YSApIHtcblxuXHRcdFx0dmlld19kYXRhID0gdmlld19kYXRhIHx8IHt9O1xuXG5cdFx0XHRfLmVhY2goIHRoaXMudmlld3MsIGZ1bmN0aW9uKCBkYXRhLCBuYW1lICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5zdGF0ZSA9PT0gZGF0YS5zdGF0ZSApIHtcblxuXHRcdFx0XHRcdHRoaXMucmVuZGVyX3N1YnZpZXcoIG5hbWUsIHZpZXdfZGF0YSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aGlzLnJlbW92ZV9zdWJ2aWV3KCBuYW1lICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCB0aGlzICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyIGEgc2luZ2xlIHN1YnZpZXcgYnkgbmFtZVxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBuYW1lICAgICAgIG5hbWUgb2YgdGhlIHN1YnZpZXdcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgdmlld19kYXRhICBhZGRpdGlvbmFsIGRhdGEgdG8gcGFzcyB0byB0aGUgc3VidmlldyBpbml0aWFsaXplclxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW5kZXJfc3VidmlldzogZnVuY3Rpb24oIG5hbWUsIHZpZXdfZGF0YSApIHtcblxuXHRcdFx0dmFyIHZpZXcgPSB0aGlzLmdldF9zdWJ2aWV3KCBuYW1lICk7XG5cblx0XHRcdGlmICggISB2aWV3ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVtb3ZlX3N1YnZpZXcoIG5hbWUgKTtcblxuXHRcdFx0aWYgKCAhIHZpZXcuaW5zdGFuY2UgKSB7XG5cdFx0XHRcdHZpZXcuaW5zdGFuY2UgPSBuZXcgdmlldy5jbGFzcyggdmlld19kYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdHZpZXcuaW5zdGFuY2UucmVuZGVyKCk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU2V0IHRoZSBjdXJyZW50IHN1YnZpZXdcblx0XHQgKiBNdXN0IGNhbGwgcmVuZGVyIGFmdGVyIVxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBzdGF0ZSAgbmFtZSBvZiB0aGUgc3RhdGUgW2J1aWxkZXJ8ZWRpdG9yXVxuXHRcdCAqIEByZXR1cm4gICBvYmogICAgICAgICAgICAgdGhpcyBmb3IgY2hhaW5pbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHNldF9zdGF0ZTogZnVuY3Rpb24gKCBzdGF0ZSApIHtcblxuXHRcdFx0dGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIFRyYXNoYWJsZSBtb2RlbFxuICogQHR5cGUgICAgIHtPYmplY3R9XG4gKiBAc2luY2UgICAgMy4xNi4xMlxuICogQHZlcnNpb24gIDMuMTYuMTJcbiAqL1xuZGVmaW5lKCAnVmlld3MvX1RyYXNoYWJsZScsW10sIGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiB7XG5cblx0XHQvKipcblx0XHQgKiBET00gRXZlbnRzXG5cdFx0ICogQHR5cGUgIHtPYmplY3R9XG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMTJcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMlxuXHRcdCAqL1xuXHRcdGV2ZW50czoge1xuXHRcdFx0J2NsaWNrIGFbaHJlZj1cIiNsbG1zLXRyYXNoLW1vZGVsXCJdJzogJ3RyYXNoX21vZGVsJyxcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlIGEgbW9kZWwgZnJvbSBpdCdzIHBhcmVudCBhbmQgZGVsZXRlIGl0XG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjEyXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMTJcblx0XHQgKi9cblx0XHR0cmFzaF9tb2RlbDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRpZiAoIGV2ZW50ICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG1zZyA9IExMTVMubDEwbi5yZXBsYWNlKCAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIG1vdmUgdGhpcyAlcyB0byB0aGUgdHJhc2g/Jywge1xuXHRcdFx0XHQnJXMnOiB0aGlzLm1vZGVsLmdldF9sMTBuX3R5cGUoKSxcblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCB3aW5kb3cuY29uZmlybSggbXNnICkgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLm1vZGVsLmNvbGxlY3Rpb24gKSB7XG5cdFx0XHRcdFx0dGhpcy5tb2RlbC5jb2xsZWN0aW9uLnJlbW92ZSggdGhpcy5tb2RlbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcHVibGlzaCBldmVudFxuXHRcdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ21vZGVsLXRyYXNoZWQnLCB0aGlzLm1vZGVsICk7XG5cblx0XHRcdFx0Ly8gdHJpZ2dlciBsb2NhbCBldmVudCBzbyBleHRlbmRpbmcgdmlld3MgY2FuIHJ1biBvdGhlciBhY3Rpb25zIHdoZXJlIG5lY2Vzc2FyeVxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoICdtb2RlbC10cmFzaGVkJywgdGhpcy5tb2RlbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIExvYWQgdmlldyBtaXhpbnNcbiAqIEByZXR1cm4gICBvYmpcbiAqIEBzaW5jZSAgICAzLjE3LjFcbiAqIEB2ZXJzaW9uICAzLjE3LjFcbiAqL1xuZGVmaW5lKCAnVmlld3MvX2xvYWRlcicsW1xuXHRcdCdWaWV3cy9fRGV0YWNoYWJsZScsXG5cdFx0J1ZpZXdzL19FZGl0YWJsZScsXG5cdFx0J1ZpZXdzL19SZWNlaXZhYmxlJyxcblx0XHQnVmlld3MvX1NoaWZ0YWJsZScsXG5cdFx0J1ZpZXdzL19TdWJ2aWV3Jyxcblx0XHQnVmlld3MvX1RyYXNoYWJsZSdcblx0XSxcblx0ZnVuY3Rpb24oXG5cdFx0RGV0YWNoYWJsZSxcblx0XHRFZGl0YWJsZSxcblx0XHRSZWNlaXZhYmxlLFxuXHRcdFNoaWZ0YWJsZSxcblx0XHRTdWJ2aWV3LFxuXHRcdFRyYXNoYWJsZVxuXHQpIHtcblxuXHRyZXR1cm4ge1xuXHRcdERldGFjaGFibGU6IERldGFjaGFibGUsXG5cdFx0RWRpdGFibGU6IEVkaXRhYmxlLFxuXHRcdFJlY2VpdmFibGU6IFJlY2VpdmFibGUsXG5cdFx0U2hpZnRhYmxlOiBTaGlmdGFibGUsXG5cdFx0U3VidmlldzogU3Vidmlldyxcblx0XHRUcmFzaGFibGU6IFRyYXNoYWJsZSxcblx0fTtcblxufSApO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZ1bmN0aW9ucyBmb3IgY29uc3RydWN0aW5nIG1vZGVscywgdmlld3MsIGFuZCBjb2xsZWN0aW9uc1xuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTcuMVxuICovXG5kZWZpbmUoICdDb250cm9sbGVycy9Db25zdHJ1Y3QnLFtcblx0XHQnQ29sbGVjdGlvbnMvbG9hZGVyJyxcblx0XHQnTW9kZWxzL2xvYWRlcicsXG5cdFx0J1ZpZXdzL19sb2FkZXInXG5cdF0sIGZ1bmN0aW9uKFxuXHRcdENvbGxlY3Rpb25zLFxuXHRcdE1vZGVscyxcblx0XHRWaWV3c1xuXHQpIHtcblxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cblx0XHQvKipcblx0XHQgKiBJbnRlcm5hbCBnZXR0ZXJcblx0XHQgKiBDb25zdHJ1Y3RzIG5ldyBDb2xsZWN0aW9ucywgTW9kZWxzLCBhbmQgVmlld3Ncblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgdHlwZSAgICAgdHlwZSBvZiBvYmplY3QgdG8gY29uc3RydWN0IFtDb2xsZWN0aW9uLE1vZGVsLFZpZXddXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIG5hbWUgICAgIG5hbWUgb2YgdGhlIG9iamVjdCB0byBjb25zdHJ1Y3Rcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgZGF0YSAgICAgb2JqZWN0IGRhdGEgdG8gcGFzcyBpbnRvIHRoZSBvYmplY3QncyBjb25zdHJ1Y3RvclxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAgICBvcHRpb25zICBvYmplY3Qgb3B0aW9ucyB0byBwYXNzIGludG8gdGhlIGNvbnN0cnVjdG9yXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gZ2V0KCB0eXBlLCBuYW1lLCBkYXRhLCBvcHRpb25zICkge1xuXG5cdFx0XHRpZiAoICEgdHlwZVsgbmFtZSBdICkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyggJ1wiJyArIG5hbWUgKyAnXCIgbm90IGZvdW5kLicgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IHR5cGVbIG5hbWUgXSggZGF0YSwgb3B0aW9ucyApO1xuXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogSW5zdGFudGlhdGUgYSBjb2xsZWN0aW9uXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIG5hbWUgICAgIENvbGxlY3Rpb24gY2xhc3MgbmFtZSAoRUc6IFwiU2VjdGlvbnNcIilcblx0XHQgKiBAcGFyYW0gICAgYXJyYXkgICAgZGF0YSAgICAgQXJyYXkgb2YgbW9kZWwgb2JqZWN0cyB0byBwYXNzIHRvIHRoZSBjb25zdHJ1Y3RvclxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAgICBvcHRpb25zICBPYmplY3Qgb2Ygb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBjb25zdHJ1Y3RvclxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0X2NvbGxlY3Rpb24gPSBmdW5jdGlvbiggbmFtZSwgZGF0YSwgb3B0aW9ucyApIHtcblxuXHRcdFx0cmV0dXJuIGdldCggQ29sbGVjdGlvbnMsIG5hbWUsIGRhdGEsIG9wdGlvbnMgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBJbnN0YW50aWF0ZSBhIG1vZGVsXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIG5hbWUgICAgIE1vZGVsIGNsYXNzIG5hbWUgKEVHOiBcIlNlY3Rpb25cIilcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgZGF0YSAgICAgT2JqZWN0IG9mIG1vZGVsIGF0dHJpYnV0ZXMgdG8gcGFzcyB0byB0aGUgY29uc3RydWN0b3Jcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgb3B0aW9ucyAgT2JqZWN0IG9mIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgY29uc3RydWN0b3Jcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHR0aGlzLmdldF9tb2RlbCA9IGZ1bmN0aW9uKCBuYW1lLCBkYXRhLCBvcHRpb25zICkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0KCBNb2RlbHMsIG5hbWUsIGRhdGEsIG9wdGlvbnMgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBMZXQgM3JkIHBhcnRpZXMgZXh0ZW5kIGEgdmlldyB1c2luZyBhbnkgb2YgdGhlIG1peGluIChfKSB2aWV3c1xuXHRcdCAqIEBwYXJhbSAgICB7b2JqfSAgICAgdmlldyAgICAgYmFzZSBvYmplY3QgdXNlZCBmb3IgdGhlIHZpZXdcblx0XHQgKiBAcGFyYW0uLi4ge3N0cmluZ30gIGV4dGVuZHMgIGFueSBudW1iZXIgb2Ygc3RyaW5ncyB0aGF0IHNob3VsZCBiZSBtaXhlZCBpbnRvIHRoZSB2aWV3XG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4xXG5cdFx0ICovXG5cdFx0dGhpcy5leHRlbmRfdmlldyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgdmlldyA9IGFyZ3VtZW50c1swXSxcblx0XHRcdFx0aSA9IDE7XG5cblx0XHRcdHdoaWxlICggYXJndW1lbnRzWyBpIF0gKSB7XG5cblx0XHRcdFx0dmFyIGNsYXNzbmFtZSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0XHRpZiAoIFZpZXdzWyBjbGFzc25hbWUgXSApIHtcblxuXHRcdFx0XHRcdGlmICggdmlldy5ldmVudHMgJiYgVmlld3NbIGNsYXNzbmFtZSBdLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdHZpZXcuZXZlbnRzID0gXy5kZWZhdWx0cyggdmlldy5ldmVudHMsIFZpZXdzWyBjbGFzc25hbWUgXS5ldmVudHMgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2aWV3ID0gXy5kZWZhdWx0cyggdmlldywgVmlld3NbIGNsYXNzbmFtZSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkrKztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKCB2aWV3ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsb3dzIGN1c3RvbSBjb2xsZWN0aW9uIHJlZ2lzdHJhdGlvbiBieSBleHRlbmRpbmcgdGhlIGRlZmF1bHQgQmFja0JvbmUgY29sbGVjdGlvblxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBuYW1lICAgbW9kZWwgbmFtZVxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAgICBwcm9wcyAgcHJvcGVydGllcyB0byBleHRlbmQgdGhlIGNvbGxlY3Rpb24gd2l0aFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMVxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjFcblx0XHQgKi9cblx0XHR0aGlzLnJlZ2lzdGVyX2NvbGxlY3Rpb24gPSBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cblx0XHRcdENvbGxlY3Rpb25zWyBuYW1lIF0gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCggcHJvcHMgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBBbGxvd3MgY3VzdG9tIG1vZGVsIHJlZ2lzdHJhdGlvbiBieSBleHRlbmRpbmcgdGhlIGRlZmF1bHQgYWJzdHJhY3QgbW9kZWxcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgbmFtZSAgIG1vZGVsIG5hbWVcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgcHJvcHMgIHByb3BlcnRpZXMgdG8gZXh0ZW5kIHRoZSBhYnN0cmFjdCBtb2RlbCB3aXRoXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdHRoaXMucmVnaXN0ZXJfbW9kZWwgPSBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cblx0XHRcdE1vZGVsc1sgbmFtZSBdID0gTW9kZWxzWydBYnN0cmFjdCddLmV4dGVuZCggcHJvcHMgKTtcblxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG59ICk7XG5cbi8qKlxuICogTGlmdGVyTE1TIEJ1aWxkZXIgRGVidWdnaW5nIHN1aXRlXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ0NvbnRyb2xsZXJzL0RlYnVnJyxbXSwgZnVuY3Rpb24oKSB7XG5cbiBcdHJldHVybiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cbiBcdFx0dmFyIHNlbGYgPSB0aGlzLFxuIFx0XHRcdGVuYWJsZWQgPSBzZXR0aW5ncy5lbmFibGVkIHx8IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogRGlzYWJsZSBkZWJ1Z2dpbmdcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG4gXHRcdHRoaXMuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuXG4gXHRcdFx0c2VsZi5sb2coICdMaWZ0ZXJMTVMgQnVpbGRlciBkZWJ1Z2dpbmcgZGlzYWJsZWQnICk7XG4gXHRcdFx0ZW5hYmxlZCA9IGZhbHNlO1xuXG4gXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBFbmFibGUgZGVidWdnaW5nXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuIFx0XHR0aGlzLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuXG4gXHRcdFx0ZW5hYmxlZCA9IHRydWU7XG4gXHRcdFx0c2VsZi5sb2coICdMaWZ0ZXJMTVMgQnVpbGRlciBkZWJ1Z2dpbmcgZW5hYmxlZCcgKTtcblxuIFx0XHR9O1xuXG4gXHRcdC8qKlxuIFx0XHQgKiBHZW5lcmFsIGxvZ2dpbmcgZnVuY3Rpb25cbiBcdFx0ICogTG9ncyB0byB0aGUganMgY29uc29sZSBvbmx5IGlmIGxvZ2dpbmcgaXMgZW5hYmxlZFxuIFx0XHQgKiBAcmV0dXJuICAgdm9pZFxuIFx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG4gXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcbiBcdFx0ICovXG4gXHRcdHRoaXMubG9nID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdGlmICggISBlbmFibGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdF8uZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdFx0Y29uc29sZS5sb2coIGRhdGEgKTtcblx0XHRcdH0gKTtcblxuIFx0XHR9O1xuXG4gXHRcdC8qKlxuIFx0XHQgKiBUb2dnbGVzIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGxvZ2dlciBvbiBvciBvZmZcbiBcdFx0ICogQHJldHVybiAgIHZvaWRcbiBcdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuIFx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG4gXHRcdCAqL1xuIFx0XHR0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIGVuYWJsZWQgKSB7XG5cdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5lbmFibGUoKTtcblx0XHRcdH1cblxuIFx0XHR9O1xuXG4gXHRcdC8vIG9uIHN0YXJ0dXAsIGxvZyBhIG1lc3NhZ2UgaWYgbG9nZ2luZyBpcyBlbmFibGVkXG4gXHRcdGlmICggZW5hYmxlZCApIHtcbiBcdFx0XHRzZWxmLmVuYWJsZSgpO1xuIFx0XHR9XG5cbiBcdH1cblxuIH0gKTtcblxuLyoqXG4gKiBNb2RlbCBzY2hlbWEgZnVuY3Rpb25zXG4gKiBAc2luY2UgICAgMy4xNy4wXG4gKiBAdmVyc2lvbiAgMy4xNy4wXG4gKi9cbmRlZmluZSggJ0NvbnRyb2xsZXJzL1NjaGVtYXMnLFtdLCBmdW5jdGlvbigpIHtcblxuXHQvKipcblx0ICogTWFpbiBTY2hlbWFzIGNsYXNzXG5cdCAqIEBwYXJhbSAgICBvYmogICBzY2hlbWFzICBzY2hlbWFzIGRlZmluaXRpb25zIGluaXRpYWxpemVkIHZpYSBQSFAgZmlsdGVyc1xuXHQgKiBAcmV0dXJuICAgb2JqXG5cdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHQgKi9cblx0cmV0dXJuIGZ1bmN0aW9uKCBzY2hlbWFzICkge1xuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBhbnkgY3VzdG9tIHNjaGVtYXMgZGVmaW5lZCB2aWEgUEhQXG5cdFx0dmFyIGN1c3RvbV9zY2hlbWFzID0gc2NoZW1hcztcblx0XHRfLmVhY2goIGN1c3RvbV9zY2hlbWFzLCBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdF8uZWFjaCggdHlwZSwgZnVuY3Rpb24oIHNjaGVtYSApIHtcblx0XHRcdFx0c2NoZW1hLmN1c3RvbSA9IHRydWU7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgYSBzY2hlbWEgZm9yIGEgZ2l2ZW4gbW9kZWwgYnkgdHlwZVxuXHRcdCAqIEV4dGVuZHMgZGVmYXVsdCBzY2hlbWFzIGRlZmluaXRpb25zIHdpdGggY3VzdG9tIDNyZCBwYXJ0eSBkZWZpbml0aW9uc1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICAgICBzY2hlbWEgICAgICBkZWZhdWx0IHNjaGVtYSBkZWZpbml0aW9uIGZyb20gdGhlIG1vZGVsIChvciBlbXB0eSBvYmplY3QgaWYgbm9uZSBkZWZpbmVkKVxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBtb2RlbF90eXBlICB0aGUgbW9kZWwgdHlwZSAoJ2xlc3NvbicsICdxdWl6JywgZXRjKVxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAgICBtb2RlbCAgICAgICBJbnN0YW5jZSBvZiB0aGUgQmFja2JvbmUuTW9kZWwgZm9yIHRoZSBnaXZlbiBtb2RlbFxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0ID0gZnVuY3Rpb24oIHNjaGVtYSwgbW9kZWxfdHlwZSwgbW9kZWwgKSB7XG5cblx0XHRcdC8vIGV4dGVuZCB0aGUgZGVmYXVsdCBzY2hlbWEgd2l0aCBjdXN0b20gcGhwIHNjaGVtYXMgZm9yIHRoZSB0eXBlIGlmIHRoZXkgZXhpc3Rcblx0XHRcdGlmICggY3VzdG9tX3NjaGVtYXNbIG1vZGVsX3R5cGUgXSApIHtcblx0XHRcdFx0c2NoZW1hID0gXy5leHRlbmQoIHNjaGVtYSwgY3VzdG9tX3NjaGVtYXNbIG1vZGVsX3R5cGUgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2NoZW1hO1xuXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cbn0gKTtcblxuLyoqXG4gKiBTeW5jIGJ1aWxkZXIgZGF0YSB0byB0aGUgc2VydmVyXG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xOS40XG4gKi9cbmRlZmluZSggJ0NvbnRyb2xsZXJzL1N5bmMnLFtdLCBmdW5jdGlvbigpIHtcblxuIFx0cmV0dXJuIGZ1bmN0aW9uKCBDb3Vyc2UsIHNldHRpbmdzICkge1xuXG4gXHRcdHRoaXMuc2F2aW5nID0gZmFsc2U7XG5cbiBcdFx0dmFyIHNlbGYgPSB0aGlzLFxuIFx0XHRcdGF1dG9zYXZlID0gdHJ1ZSxcbiBcdFx0XHRjaGVja19pbnRlcnZhbCA9IG51bGwsXG4gXHRcdFx0Y2hlY2tfaW50ZXJ2YWxfbXMgPSBzZXR0aW5ncy5jaGVja19pbnRlcnZhbF9tcyB8fCAxMDAwMCxcbiBcdFx0XHRkZXRhY2hlZCA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKCksXG4gXHRcdFx0dHJhc2hlZCA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKCk7XG5cblx0XHQvKipcblx0XHQgKiBpbml0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi43XG5cdFx0ICogQHZlcnNpb24gIDMuMTYuN1xuXHRcdCAqL1xuIFx0XHRmdW5jdGlvbiBpbml0KCkge1xuXG4gXHRcdFx0Ly8gZGV0ZXJtaW5lIGlmIGF1dG9zYXZpbmcgaXMgcG9zc2libGVcbiBcdFx0XHRpZiAoICd1bmRlZmluZWQnID09PSB0eXBlb2Ygd3AuaGVhcnRiZWF0ICkge1xuXG4gXHRcdFx0XHR3aW5kb3cubGxtc19idWlsZGVyLmRlYnVnLmxvZyggJ1dvcmRQcmVzcyBIZWFydGJlYXQgZGlzYWJsZWQuIEF1dG9zYXZpbmcgaXMgZGlzYWJsZWQhJyApO1xuIFx0XHRcdFx0YXV0b3NhdmUgPSBmYWxzZTtcblxuIFx0XHRcdH1cblxuXHRcdFx0Ly8gc2V0dXAgdGhlIGNoZWNrIGludGVydmFsXG5cdFx0XHRpZiAoIGNoZWNrX2ludGVydmFsX21zICkge1xuXHRcdFx0XHRzZWxmLnNldF9jaGVja19pbnRlcnZhbCggY2hlY2tfaW50ZXJ2YWxfbXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gd2FybiB3aGVuIHVzZXJzIGF0dGVtcHQgdG8gbGVhdmUgdGhlIHBhZ2Vcblx0XHRcdCQoIHdpbmRvdyApLm9uKCAnYmVmb3JldW5sb2FkJywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0aWYgKCBzZWxmLmhhc191bnNhdmVkX2NoYW5nZXMoKSApIHtcblx0XHRcdFx0XHRjaGVja19mb3JfY2hhbmdlcygpO1xuXHRcdFx0XHRcdHJldHVybiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGFiYW5kb24geW91ciBjaGFuZ2VzPyc7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG4gXHRcdH07XG5cbiBcdFx0LypcbiBcdFx0XHQgLyQkICAgICAgICAgICAgIC8kJCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8kJCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8kJFxuIFx0XHRcdHxfXy8gICAgICAgICAgICB8ICQkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICQkICAgICAgICAgICAgICAgICAgICAgICAgICB8X18vXG4gXHRcdFx0IC8kJCAvJCQkJCQkJCAgLyQkJCQkJCAgICAvJCQkJCQkICAgLyQkJCQkJCAgLyQkJCQkJCQgICAvJCQkJCQkIHwgJCQgICAgICAgIC8kJCQkJCQgICAvJCQkJCQkICAvJCRcbiBcdFx0XHR8ICQkfCAkJF9fICAkJHxfICAkJF8vICAgLyQkX18gICQkIC8kJF9fICAkJHwgJCRfXyAgJCQgfF9fX18gICQkfCAkJCAgICAgICB8X19fXyAgJCQgLyQkX18gICQkfCAkJFxuIFx0XHRcdHwgJCR8ICQkICBcXCAkJCAgfCAkJCAgICB8ICQkJCQkJCQkfCAkJCAgXFxfXy98ICQkICBcXCAkJCAgLyQkJCQkJCR8ICQkICAgICAgICAvJCQkJCQkJHwgJCQgIFxcICQkfCAkJFxuIFx0XHRcdHwgJCR8ICQkICB8ICQkICB8ICQkIC8kJHwgJCRfX19fXy98ICQkICAgICAgfCAkJCAgfCAkJCAvJCRfXyAgJCR8ICQkICAgICAgIC8kJF9fICAkJHwgJCQgIHwgJCR8ICQkXG4gXHRcdFx0fCAkJHwgJCQgIHwgJCQgIHwgICQkJCQvfCAgJCQkJCQkJHwgJCQgICAgICB8ICQkICB8ICQkfCAgJCQkJCQkJHwgJCQgICAgICB8ICAkJCQkJCQkfCAkJCQkJCQkL3wgJCRcbiBcdFx0XHR8X18vfF9fLyAgfF9fLyAgIFxcX19fLyAgIFxcX19fX19fXy98X18vICAgICAgfF9fLyAgfF9fLyBcXF9fX19fX18vfF9fLyAgICAgICBcXF9fX19fX18vfCAkJF9fX18vIHxfXy9cbiBcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICQkXG4gXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAkJFxuIFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxfXy9cbiBcdFx0Ki9cblxuIFx0XHQvKipcbiBcdFx0ICogQWRkcyBlcnJvciBtZXNzYWdlKHMpIHRvIHRoZSBkYXRhIG9iamVjdCByZXR1cm5lZCBieSBoZWFydGJlYXQtdGlja1xuIFx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgICAgICAgZGF0YSAgbGxtc19idWlsZGVyIGRhdGEgb2JqZWN0IGZyb20gaGVhcnRiZWF0LXRpY2tcbiBcdFx0ICogQHBhcmFtICAgIHN0cmluZ3xhcnJheSAgIGVyciAgIGVycm9yIG1lc3NhZ2VzIGFycmF5IG9yIHN0cmluZ1xuIFx0XHQgKiBAcmV0dXJuICAgb2JqXG4gXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcbiBcdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuIFx0XHQgKi9cblx0XHRmdW5jdGlvbiBhZGRfZXJyb3JfbXNnKCBkYXRhLCBlcnIgKSB7XG5cblx0XHRcdGlmICggJ3N1Y2Nlc3MnID09PSBkYXRhLnN0YXR1cyApIHtcblx0XHRcdFx0ZGF0YS5tZXNzYWdlID0gW107XG5cdFx0XHR9XG5cblx0XHRcdGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcblx0XHRcdGlmICggJ3N0cmluZycgPT09IHR5cGVvZiBlcnIgKSB7XG5cdFx0XHRcdGVyciA9IFsgZXJyIF07XG5cdFx0XHR9XG5cdFx0XHRkYXRhLm1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2UuY29uY2F0KCBlcnIgKTtcblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUHVibGlzaCBzeW5jIHN0YXR1cyBzbyBvdGhlciBhcmVhcyBvZiB0aGUgYXBwbGljYXRpb24gY2FuIHNlZSB3aGF0J3MgaGFwcGVuaW5nIGhlcmVcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gY2hlY2tfZm9yX2NoYW5nZXMoKSB7XG5cblx0XHRcdHZhciBkYXRhID0ge307XG5cdFx0XHRkYXRhLmNoYW5nZXMgPSBzZWxmLmdldF91bnNhdmVkX2NoYW5nZXMoKTtcblx0XHRcdGRhdGEuaGFzX3Vuc2F2ZWRfY2hhbmdlcyA9IHNlbGYuaGFzX3Vuc2F2ZWRfY2hhbmdlcyggZGF0YS5jaGFuZ2VzICk7XG5cdFx0XHRkYXRhLnNhdmluZyA9IHNlbGYuc2F2aW5nO1xuXG5cdFx0XHR3aW5kb3cubGxtc19idWlsZGVyLmRlYnVnLmxvZyggJz09PT0gc3RhcnQgY2hhbmdlcyBjaGVjayA9PT09JywgZGF0YSwgJz09PT0gZmluaXNoIGNoYW5nZXMgY2hlY2sgPT09PScgKTtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdjdXJyZW50LXNhdmUtc3RhdHVzJywgZGF0YSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIE1hbnVhbGx5IFNhdmUgZGF0YSB2aWEgQWRtaW4gQUpBWCB3aGVuIHRoZSBoZWFydGJlYXQgQVBJIGhhcyBiZWVuIGRpc2FibGVkXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi43XG5cdFx0ICogQHZlcnNpb24gIDMuMTYuN1xuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGRvX2FqYXhfc2F2ZSgpIHtcblxuXHRcdFx0Ly8gcHJldmVudCBzaW11bHRhbmVvdXMgc2F2ZXNcblx0XHRcdGlmICggc2VsZi5zYXZpbmcgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNoYW5nZXMgPSBzZWxmLmdldF91bnNhdmVkX2NoYW5nZXMoKTtcblxuXHRcdFx0Ly8gb25seSBzZW5kIGRhdGEgaWYgd2UgaGF2ZSBkYXRhIHRvIHNlbmRcblx0XHRcdGlmICggc2VsZi5oYXNfdW5zYXZlZF9jaGFuZ2VzKCBjaGFuZ2VzICkgKSB7XG5cblx0XHRcdFx0Y2hhbmdlcy5pZCA9IENvdXJzZS5nZXQoICdpZCcgKTtcblxuXHRcdFx0XHRMTE1TLkFqYXguY2FsbCgge1xuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdGFjdGlvbjogJ2xsbXNfYnVpbGRlcicsXG5cdFx0XHRcdFx0XHRhY3Rpb25fdHlwZTogJ2FqYXhfc2F2ZScsXG5cdFx0XHRcdFx0XHRjb3Vyc2VfaWQ6IGNoYW5nZXMuaWQsXG5cdFx0XHRcdFx0XHRsbG1zX2J1aWxkZXI6IEpTT04uc3RyaW5naWZ5KCBjaGFuZ2VzICksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRiZWZvcmVTZW5kOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0d2luZG93LmxsbXNfYnVpbGRlci5kZWJ1Zy5sb2coICc9PT09IHN0YXJ0IGRvX2FqYXhfc2F2ZSBiZWZvcmUgPT09PScsIGNoYW5nZXMsICc9PT09IGZpbmlzaCBkb19hamF4X3NhdmUgYmVmb3JlID09PT0nICk7XG5cblx0XHRcdFx0XHRcdHNlbGYuc2F2aW5nID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdoZWFydGJlYXQtc2VuZCcsIHNlbGYgKTtcblxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCB4aHIsIHN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdFx0XHRcdHdpbmRvdy5sbG1zX2J1aWxkZXIuZGVidWcubG9nKCAnPT09PSBzdGFydCBkb19hamF4X3NhdmUgZXJyb3IgPT09PScsIGRhdGEsICc9PT09IGZpbmlzaCBkb19hamF4X3NhdmUgZXJyb3IgPT09PScgKTtcblxuXHRcdFx0XHRcdFx0c2VsZi5zYXZpbmcgPSBmYWxzZTtcblxuXHRcdFx0XHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdoZWFydGJlYXQtdGljaycsIHNlbGYsIHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiAnZXJyb3InLFxuXHRcdFx0XHRcdFx0XHRtZXNzYWdlOiB4aHIucmVzcG9uc2VUZXh0ICsgJyAoJyArIGVycm9yICsgJyAnICsgc3RhdHVzICsnKScsXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByZXMgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggISByZXMubGxtc19idWlsZGVyICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHdpbmRvdy5sbG1zX2J1aWxkZXIuZGVidWcubG9nKCAnPT09PSBzdGFydCBkb19hamF4X3NhdmUgc3VjY2VzcyA9PT09JywgcmVzLCAnPT09PSBmaW5pc2ggZG9fYWpheF9zYXZlIHN1Y2Nlc3MgPT09PScgKTtcblxuXHRcdFx0XHRcdFx0cmVzLmxsbXNfYnVpbGRlciA9IHByb2Nlc3NfcmVtb3ZhbHMoIHJlcy5sbG1zX2J1aWxkZXIgKTtcblx0XHRcdFx0XHRcdHJlcy5sbG1zX2J1aWxkZXIgPSBwcm9jZXNzX3VwZGF0ZXMoIHJlcy5sbG1zX2J1aWxkZXIgKTtcblxuXHRcdFx0XHRcdFx0c2VsZi5zYXZpbmcgPSBmYWxzZTtcblxuXHRcdFx0XHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdoZWFydGJlYXQtdGljaycsIHNlbGYsIHJlcy5sbG1zX2J1aWxkZXIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHJpZXZlIGFsbCB0aGUgYXR0cmlidXRlcyBjaGFuZ2VkIG9uIGEgbW9kZWwgc2luY2UgdGhlIGxhc3Qgc3luY1xuXHRcdCAqXG5cdFx0ICogRm9yIGEgbmV3IG1vZGVsIChhIG1vZGVsIHdpdGggYSB0ZW1wIElEKSBvciBhIG1vZGVsIHdoZXJlIF9mb3JjZVN5bmMgaGFzIGJlZW4gZGVmaW5lZCBBTEwgYXR0cyB3aWxsIGJlIHJldHVybmVkXG5cdFx0ICogRm9yIGFuIGV4aXN0aW5nIG1vZGVsICh3aXRob3V0IGEgdGVtcCBJRCkgb25seSByZXRyaWV2ZXMgY2hhbmdlZCBhdHRyaWJ1dGVzIGFzIHRyYWNrZWQgYnkgQmFja2JvbmUuVHJhY2tJdFxuXHRcdCAqXG5cdFx0ICogVGhpcyBmdW5jdGlvbiBleGNsdWRlcyBhbnkgYXR0cmlidXRlcyBkZWZpbmVkIGFzIGNoaWxkIGF0dHJpYnV0ZXMgdmlhIHRoZSBtb2RlbHMgcmVsYXRpb25zaGlwIHNldHRpbmdzXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgbW9kZWwgIGluc3RhbmNlIG9mIGEgQmFja2JvbmUuTW9kZWxcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjZcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBnZXRfY2hhbmdlZF9hdHRyaWJ1dGVzKCBtb2RlbCApIHtcblxuXHRcdFx0dmFyIGF0dHMgPSB7fSxcblx0XHRcdFx0c3luY190eXBlO1xuXG5cdFx0XHQvLyBkb24ndCBzYXZlIG1pZCBlZGl0aW5nXG5cdFx0XHRpZiAoIG1vZGVsLmdldCggJ19oYXNfZm9jdXMnICkgKSB7XG5cdFx0XHRcdHJldHVybiBhdHRzO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBtb2RlbCBoYXNuJ3QgYmVlbiBwZXJzaXN0ZWQgdG8gdGhlIGRhdGFiYXNlIHRvIGdldCBhIHJlYWwgSUQgeWV0XG5cdFx0XHQvLyBzZW5kICphbGwqIG9mIGl0J3MgYXR0c1xuXHRcdFx0aWYgKCBoYXNfdGVtcF9pZCggbW9kZWwgKSB8fCB0cnVlID09PSBtb2RlbC5nZXQoICdfZm9yY2VTeW5jJyApICkge1xuXG5cdFx0XHRcdGF0dHMgPSBfLmNsb25lKCBtb2RlbC5hdHRyaWJ1dGVzICk7XG5cdFx0XHRcdHN5bmNfdHlwZSA9ICdmdWxsJztcblxuXHRcdFx0Ly8gb25seSBzZW5kIHRoZSBjaGFuZ2VkIGF0dHNcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0YXR0cyA9IG1vZGVsLnVuc2F2ZWRBdHRyaWJ1dGVzKCk7XG5cdFx0XHRcdHN5bmNfdHlwZSA9ICdwYXJ0aWFsJztcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZXhjbHVkZSA9ICggbW9kZWwuZ2V0X3JlbGF0aW9uc2hpcHMgKSA/IG1vZGVsLmdldF9jaGlsZF9wcm9wcygpIDogW107XG5cdFx0XHRhdHRzID0gXy5vbWl0KCBhdHRzLCBmdW5jdGlvbiggdmFsLCBrZXkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjbHVkZSBrZXlzIHRoYXQgc3RhcnQgd2l0aCBhbiB1bmRlcnNjb3JlIHdoaWNoIGFyZSB1c2VkIGJ5IHRoZVxuXHRcdFx0XHQvLyBhcHBsaWNhdGlvbiBidXQgZG9uJ3QgbmVlZCB0byBiZSBzdG9yZWQgaW4gdGhlIGRhdGFiYXNlXG5cdFx0XHRcdGlmICggMCA9PT0ga2V5LmluZGV4T2YoICdfJyApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCAtMSAhPT0gZXhjbHVkZS5pbmRleE9mKCBrZXkgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCBtb2RlbC5iZWZvcmVfc2F2ZSApIHtcblx0XHRcdFx0YXR0cyA9IG1vZGVsLmJlZm9yZV9zYXZlKCBhdHRzLCBzeW5jX3R5cGUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGF0dHM7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogR2V0IGFsbCB0aGUgY2hhbmdlcyB0byBhbiBvYmplY3QgKGVpdGhlciBhIE1vZGVsIG9yIGEgQ29sbGVjdGlvbiBvZiBtb2RlbHMpXG5cdFx0ICogUmV0dXJucyBvbmx5IGNoYW5nZXMgdG8gbW9kZWxzIGFuZCB0aGUgSURzIG9mIHRoYXQgbW9kZWwgKHNob3VsZCBjaGFuZ2VzIGV4aXN0KVxuXHRcdCAqIFVzZXMgZ2V0X2NoYW5nZWRfYXR0cmlidXRlcygpIHRvIGRldGVybWluZSBpZiBhbGwgYXR0cyBvciBvbmx5IGNoYW5nZWQgYXR0cyBhcmUgbmVlZGVkXG5cdFx0ICogUHJvY2Vzc2VzIGNoaWxkcmVuIGludGVsbGlnZW50bHkgdG8gb25seSByZXR1cm4gY2hhbmdlZCBjaGlsZHJlbiByYXRoZXIgdGhhbiB0aGUgZW50aXJlIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAgICAgIG9iamVjdCAgaW5zdGFuY2Ugb2YgYSBCYWNrYm9uZS5Nb2RlbCBvciBCYWNrYm9uZS5Db2xsZWN0aW9uXG5cdFx0ICogQHJldHVybiAgIG9ianxhcnJheVx0ICBcdFx0aWYgb2JqZWN0IGlzIGEgbW9kZWwsIHJldHVybnMgYW4gb2JqZWN0XG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRpZiBvYmplY3QgaXMgYSBjb2xsZWN0aW9uLCByZXR1cm5zIGFuIGFycmF5IG9mIG9iamVjdHNcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMTFcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBnZXRfY2hhbmdlc190b19vYmplY3QoIG9iamVjdCApIHtcblxuXHRcdFx0dmFyIGNoYW5nZWRfYXR0cztcblxuXHRcdFx0aWYgKCBvYmplY3QgaW5zdGFuY2VvZiBCYWNrYm9uZS5Nb2RlbCApIHtcblxuXHRcdFx0XHRjaGFuZ2VkX2F0dHMgPSBnZXRfY2hhbmdlZF9hdHRyaWJ1dGVzKCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5nZXRfcmVsYXRpb25zaGlwcyApIHtcblxuXHRcdFx0XHRcdF8uZWFjaCggb2JqZWN0LmdldF9jaGlsZF9wcm9wcygpLCBmdW5jdGlvbiggcHJvcCApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGNoaWxkcmVuID0gZ2V0X2NoYW5nZXNfdG9fb2JqZWN0KCBvYmplY3QuZ2V0KCBwcm9wICkgKTtcblx0XHRcdFx0XHRcdGlmICggISBfLmlzRW1wdHkoIGNoaWxkcmVuICkgKSB7XG5cdFx0XHRcdFx0XHRcdGNoYW5nZWRfYXR0c1sgcHJvcCBdID0gY2hpbGRyZW47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIHdlIGhhdmUgYW55IGRhdGEsIGFkZCB0aGUgaWQgdG8gdGhlIG1vZGVsXG5cdFx0XHRcdGlmICggISBfLmlzRW1wdHkoIGNoYW5nZWRfYXR0cyApICkge1xuXHRcdFx0XHRcdGNoYW5nZWRfYXR0cy5pZCA9IG9iamVjdC5nZXQoICdpZCcgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QgaW5zdGFuY2VvZiBCYWNrYm9uZS5Db2xsZWN0aW9uICkge1xuXG5cdFx0XHRcdGNoYW5nZWRfYXR0cyA9IFtdO1xuXHRcdFx0XHRvYmplY3QuZWFjaCggZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0XHRcdHZhciBtb2RlbF9jaGFuZ2VzID0gZ2V0X2NoYW5nZXNfdG9fb2JqZWN0KCBtb2RlbCApO1xuXHRcdFx0XHRcdGlmICggISBfLmlzRW1wdHkoIG1vZGVsX2NoYW5nZXMgKSApIHtcblx0XHRcdFx0XHRcdGNoYW5nZWRfYXR0cy5wdXNoKCBtb2RlbF9jaGFuZ2VzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNoYW5nZWRfYXR0cztcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmVzIGlmIGEgbW9kZWwgaGFzIGEgdGVtcG9yYXJ5IElEIG9yIGEgcmVhbCBwZXJzaXN0ZWQgSURcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgbW9kZWwgIGluc3RhbmNlIG9mIGEgbW9kZWxcblx0XHQgKiBAcmV0dXJuICAgYm9vbGVhblxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gaGFzX3RlbXBfaWQoIG1vZGVsICkge1xuXG5cdFx0XHRyZXR1cm4gKCAhIF8uaXNOdW1iZXIoIG1vZGVsLmlkICkgJiYgMCA9PT0gbW9kZWwuaWQuaW5kZXhPZiggJ3RlbXBfJyApICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ29tcGFyZXMgY2hhbmdlcyBzeW5jZWQgdG8gdGhlIHNlcnZlciBhZ2FpbnN0IGN1cnJlbnQgbW9kZWwgYW5kIHJlc3RhcnRzXG5cdFx0ICogdHJhY2tpbmcgb24gZWxlbWVudHMgdGhhdCBoYXZlbid0IGNoYW5nZWQgc2luY2UgdGhlIGxhc3Qgc3luY1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBtb2RlbCAgaW5zdGFuY2Ugb2YgYSBCYWNrYm9uZS5Nb2RlbFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBkYXRhICAgZGF0YSBzZXQgdGhhdCB3YXMgcHJvY2Vzc2VkIGJ5IHRoZSBzZXJ2ZXJcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjExXG5cdFx0ICogQHZlcnNpb24gIDMuMTkuNFxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIG1heWJlX3Jlc3RhcnRfdHJhY2tpbmcoIG1vZGVsLCBkYXRhICkge1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggbW9kZWwuZ2V0KCAndHlwZScgKSArICctbWF5YmUtcmVzdGFydC10cmFja2luZycsIG1vZGVsLCBkYXRhICk7XG5cblx0XHRcdHZhciBvbWl0ID0gWyAnaWQnLCAnb3JpZ19pZCcgXTtcblxuXHRcdFx0aWYgKCBtb2RlbC5nZXRfcmVsYXRpb25zaGlwcyApIHtcblx0XHRcdFx0b21pdC5jb25jYXQoIG1vZGVsLmdldF9jaGlsZF9wcm9wcygpICk7XG5cdFx0XHR9XG5cblx0XHRcdF8uZWFjaCggXy5vbWl0KCBkYXRhLCBvbWl0ICksIGZ1bmN0aW9uKCB2YWwsIHByb3AgKSB7XG5cblx0XHRcdFx0aWYgKCBfLmlzRXF1YWwoIG1vZGVsLmdldCggcHJvcCApLCB2YWwgKSApIHtcblx0XHRcdFx0XHRkZWxldGUgbW9kZWwuX3Vuc2F2ZWRDaGFuZ2VzWyBwcm9wIF07XG5cdFx0XHRcdFx0bW9kZWwuX29yaWdpbmFsQXR0cnNbIHByb3AgXSA9IHZhbDtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIGlmIHN5bmNpbmcgd2FzIGZvcmNlZCwgYWxsb3cgdHJhY2tpbmcgdG8gbW92ZSBmb3J3YXJkIGFzIG5vcm1hbCBtb3ZpbmcgZm9yd2FyZFxuXHRcdFx0bW9kZWwudW5zZXQoICdfZm9yY2VTeW5jJyApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFByb2Nlc3NlcyByZXNwb25zZSBkYXRhIGZyb20gaGVhcnRiZWF0LXRpY2sgcmVsYXRlZCB0byB0cmFzaGluZyAmIGRldGFjaGluZyBtb2RlbHNcblx0XHQgKiBPbiBzdWNjZXNzLCByZW1vdmVzIGZyb20gbG9jYWwgcmVtb3ZhbCBjb2xsZWN0aW9uXG5cdFx0ICogT24gZXJyb3IsIGFwcGVuZHMgZXJyb3IgbWVzc2FnZXMgdG8gdGhlIGRhdGEgb2JqZWN0IHJldHVybmVkIHRvIFVJIGZvciBvbi1zY3JlZW4gZmVlZGJhY2tcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZGF0YSAgZGF0YS5sbG1zX2J1aWxkZXIgb2JqZWN0IGZyb20gaGVhcnRiZWF0LXRpY2sgcmVzcG9uc2Vcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjFcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBwcm9jZXNzX3JlbW92YWxzKCBkYXRhICkge1xuXG5cdFx0XHQvLyBjaGVjayByZW1vdmFscyBmb3IgZXJyb3JzXG5cdFx0XHR2YXIgcmVtb3ZhbHMgPSB7XG5cdFx0XHRcdGRldGFjaDogZGV0YWNoZWQsXG5cdFx0XHRcdHRyYXNoOiB0cmFzaGVkLFxuXHRcdFx0fTtcblxuXHRcdFx0Xy5lYWNoKCByZW1vdmFscywgZnVuY3Rpb24oIGNvbGwsIGtleSApIHtcblxuXHRcdFx0XHRpZiAoIGRhdGFbIGtleSBdICkge1xuXG5cdFx0XHRcdFx0dmFyIGVycm9ycyA9IFtdO1xuXG5cdFx0XHRcdFx0Xy5lYWNoKCBkYXRhWyBrZXkgXSAsIGZ1bmN0aW9uKCBpbmZvICkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdWNjZXNmdWxseSBkZXRhY2hlZCwgcmVtb3ZlIGl0IGZyb20gdGhlIGRldGFjaGVkIGNvbGxlY3Rpb25cblx0XHRcdFx0XHRcdGlmICggISBpbmZvLmVycm9yICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbGwucmVtb3ZlKCBpbmZvLmlkICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0ZXJyb3JzLnB1c2goIGluZm8uZXJyb3IgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlcnJvcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0Xy5leHRlbmQoIGRhdGEsIGFkZF9lcnJvcl9tc2coIGRhdGEsIGVycm9ycyApICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBQcm9jZXNzZXMgcmVzcG9uc2UgZGF0YSBmcm9tIGhlYXJ0YmVhdC10aWNrIHJlbGF0ZWQgdG8gY3JlYXRpbmcgLyB1cGRhdGluZyBhIHNpbmdsZSBvYmplY3Rcblx0XHQgKiBIYW5kbGVzIGJvdGggY29sbGVjdGlvbnMgYW5kIG1vZGVscyBhcyBhIHJlY3Vyc2l2ZSBmdW5jdGlvblxuXHRcdCAqIEBwYXJhbSAgICB7W3R5cGVdfSAgIGRhdGEgICAgICAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEBwYXJhbSAgICB7W3R5cGVdfSAgIHR5cGUgICAgICAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEBwYXJhbSAgICB7W3R5cGVdfSAgIHBhcmVudCAgICAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEBwYXJhbSAgICB7W3R5cGVdfSAgIG1haW5fZGF0YSAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEByZXR1cm4gICB7W3R5cGVdfVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHByb2Nlc3Nfb2JqZWN0X3VwZGF0ZXMoIGRhdGEsIHR5cGUsIHBhcmVudCwgbWFpbl9kYXRhICkge1xuXG5cdFx0XHRpZiAoICEgZGF0YVsgdHlwZSBdICkge1xuXHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwYXJlbnQuZ2V0KCB0eXBlICkgaW5zdGFuY2VvZiBCYWNrYm9uZS5Nb2RlbCApIHtcblxuXHRcdFx0XHR2YXIgaW5mbyA9IGRhdGFbIHR5cGUgXTtcblxuXHRcdFx0XHRpZiAoIGluZm8uZXJyb3IgKSB7XG5cblx0XHRcdFx0XHRfLmV4dGVuZCggbWFpbl9kYXRhLCBhZGRfZXJyb3JfbXNnKCBtYWluX2RhdGEsIGluZm8uZXJyb3IgKSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR2YXIgbW9kZWwgPSBwYXJlbnQuZ2V0KCB0eXBlICk7XG5cblx0XHRcdFx0XHQvLyB1cGRhdGUgdGVtcCBpZHMgd2l0aCB0aGUgcmVhbCBpZFxuXHRcdFx0XHRcdGlmICggaW5mby5pZCAhPSBpbmZvLm9yaWdfaWQgKSB7XG5cdFx0XHRcdFx0XHRtb2RlbC5zZXQoICdpZCcsIGluZm8uaWQgKTtcblx0XHRcdFx0XHRcdGRlbGV0ZSBtb2RlbC5fdW5zYXZlZENoYW5nZXMuaWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1heWJlX3Jlc3RhcnRfdHJhY2tpbmcoIG1vZGVsLCBpbmZvICk7XG5cblx0XHRcdFx0XHQvLyBjaGVjayBjaGlsZHJlblxuXHRcdFx0XHRcdGlmICggbW9kZWwuZ2V0X3JlbGF0aW9uc2hpcHMgKSB7XG5cblx0XHRcdFx0XHRcdF8uZWFjaCggbW9kZWwuZ2V0X2NoaWxkX3Byb3BzKCksIGZ1bmN0aW9uKCBjaGlsZF9rZXkgKSB7XG5cdFx0XHRcdFx0XHRcdF8uZXh0ZW5kKCBkYXRhWyB0eXBlIF0sIHByb2Nlc3Nfb2JqZWN0X3VwZGF0ZXMoIGRhdGFbIHR5cGUgXSwgY2hpbGRfa2V5LCBtb2RlbCwgbWFpbl9kYXRhICkgKTtcblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHBhcmVudC5nZXQoIHR5cGUgKSBpbnN0YW5jZW9mIEJhY2tib25lLkNvbGxlY3Rpb24gKSB7XG5cblx0XHRcdFx0Xy5lYWNoKCBkYXRhWyB0eXBlIF0sIGZ1bmN0aW9uKCBpbmZvLCBpbmRleCApIHtcblxuXHRcdFx0XHRcdGlmICggaW5mby5lcnJvciApIHtcblxuXHRcdFx0XHRcdFx0Xy5leHRlbmQoIG1haW5fZGF0YSwgYWRkX2Vycm9yX21zZyggbWFpbl9kYXRhLCBpbmZvLmVycm9yICkgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHZhciBtb2RlbCA9IHBhcmVudC5nZXQoIHR5cGUgKS5nZXQoIGluZm8ub3JpZ19pZCApO1xuXG5cdFx0XHRcdFx0XHQvLyB1cGRhdGUgdGVtcCBpZHMgd2l0aCB0aGUgcmVhbCBpZFxuXHRcdFx0XHRcdFx0aWYgKCBpbmZvLmlkICE9IGluZm8ub3JpZ19pZCApIHtcblx0XHRcdFx0XHRcdFx0bW9kZWwuc2V0KCAnaWQnLCBpbmZvLmlkICk7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBtb2RlbC5fdW5zYXZlZENoYW5nZXMuaWQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXliZV9yZXN0YXJ0X3RyYWNraW5nKCBtb2RlbCwgaW5mbyApO1xuXG5cdFx0XHRcdFx0XHQvLyBjaGVjayBjaGlsZHJlblxuXHRcdFx0XHRcdFx0aWYgKCBtb2RlbC5nZXRfcmVsYXRpb25zaGlwcyApIHtcblxuXHRcdFx0XHRcdFx0XHRfLmVhY2goIG1vZGVsLmdldF9jaGlsZF9wcm9wcygpLCBmdW5jdGlvbiggY2hpbGRfa2V5ICkge1xuXHRcdFx0XHRcdFx0XHRcdF8uZXh0ZW5kKCBkYXRhWyB0eXBlIF0sIHByb2Nlc3Nfb2JqZWN0X3VwZGF0ZXMoIGRhdGFbIHR5cGUgXVsgaW5kZXggXSwgY2hpbGRfa2V5LCBtb2RlbCwgbWFpbl9kYXRhICkgKTtcblx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYWluX2RhdGE7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUHJvY2Vzc2VzIHJlc3BvbnNlIGRhdGEgZnJvbSBoZWFydGJlYXQtdGljayByZWxhdGVkIHRvIHVwZGF0aW5nICYgY3JlYXRpbmcgbmV3IG1vZGVsc1xuXHRcdCAqIE9uIHN1Y2Nlc3MsIHJlbW92ZXMgZnJvbSBsb2NhbCByZW1vdmFsIGNvbGxlY3Rpb25cblx0XHQgKiBPbiBlcnJvciwgYXBwZW5kcyBlcnJvciBtZXNzYWdlcyB0byB0aGUgZGF0YSBvYmplY3QgcmV0dXJuZWQgdG8gVUkgZm9yIG9uLXNjcmVlbiBmZWVkYmFja1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBkYXRhICBkYXRhLmxsbXNfYnVpbGRlciBvYmplY3QgZnJvbSBoZWFydGJlYXQtdGljayByZXNwb25zZVxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHByb2Nlc3NfdXBkYXRlcyggZGF0YSApIHtcblxuXHRcdFx0Ly8gb25seSBtZXNzIHdpdGggdXBkYXRlcyBkYXRhXG5cdFx0XHRpZiAoICEgZGF0YS51cGRhdGVzICkge1xuXHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLnVwZGF0ZXMgKSB7XG5cdFx0XHRcdGRhdGEgPSBwcm9jZXNzX29iamVjdF91cGRhdGVzKCBkYXRhLnVwZGF0ZXMsICdzZWN0aW9ucycsIENvdXJzZSwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblxuXHRcdH07XG5cblx0XHQvKlxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgLyQkICAgICAgIC8kJCAvJCQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyQkXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgIHwgJCQgICAgICB8ICQkfF9fLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxfXy9cblx0XHRcdCAgLyQkJCQkJCAgLyQkICAgLyQkfCAkJCQkJCQkIHwgJCQgLyQkICAvJCQkJCQkJCAgICAgICAgLyQkJCQkJCAgIC8kJCQkJCQgIC8kJFxuXHRcdFx0IC8kJF9fICAkJHwgJCQgIHwgJCR8ICQkX18gICQkfCAkJHwgJCQgLyQkX19fX18vICAgICAgIHxfX19fICAkJCAvJCRfXyAgJCR8ICQkXG5cdFx0XHR8ICQkICBcXCAkJHwgJCQgIHwgJCR8ICQkICBcXCAkJHwgJCR8ICQkfCAkJCAgICAgICAgICAgICAgLyQkJCQkJCR8ICQkICBcXCAkJHwgJCRcblx0XHRcdHwgJCQgIHwgJCR8ICQkICB8ICQkfCAkJCAgfCAkJHwgJCR8ICQkfCAkJCAgICAgICAgICAgICAvJCRfXyAgJCR8ICQkICB8ICQkfCAkJFxuXHRcdFx0fCAkJCQkJCQkL3wgICQkJCQkJC98ICQkJCQkJCQvfCAkJHwgJCR8ICAkJCQkJCQkICAgICAgfCAgJCQkJCQkJHwgJCQkJCQkJC98ICQkXG5cdFx0XHR8ICQkX19fXy8gIFxcX19fX19fLyB8X19fX19fXy8gfF9fL3xfXy8gXFxfX19fX19fLyAgICAgICBcXF9fX19fX18vfCAkJF9fX18vIHxfXy9cblx0XHRcdHwgJCQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICQkXG5cdFx0XHR8ICQkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAkJFxuXHRcdFx0fF9fLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxfXy9cblx0XHQqL1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgYWxsIHVuc2F2ZWQgY2hhbmdlcyBmb3IgdGhlIGJ1aWxkZXIgaW5zdGFuY2Vcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjFcblx0XHQgKi9cblx0XHR0aGlzLmdldF91bnNhdmVkX2NoYW5nZXMgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZGV0YWNoOiBkZXRhY2hlZC5wbHVjayggJ2lkJyApLFxuXHRcdFx0XHR0cmFzaDogdHJhc2hlZC5wbHVjayggJ2lkJyApLFxuXHRcdFx0XHR1cGRhdGVzOiBnZXRfY2hhbmdlc190b19vYmplY3QoIENvdXJzZSApLFxuXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENoZWNrIGlmIHRoZSBidWlsZGVyIGluc3RhbmNlIGhhcyB1bnNhdmVkIGNoYW5nZXNcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgY2hhbmdlcyAgICBvcHRpb25hbGx5IHBhc3MgaW4gYW4gb2JqZWN0IGZyb20gdGhlIHJldHVybiBvZiB0aGlzLmdldF91bnNhdmVkX2NoYW5nZXMoKVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmUgc29tZSByZXNvdXJjZXMgYnkgbm90IHJ1bm5pbmcgdGhlIGNoZWNrIHR3aWNlIGR1cmluZyBoZWFydGJlYXRzXG5cdFx0ICogQHJldHVybiAgIGJvb2xlYW5cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHRoaXMuaGFzX3Vuc2F2ZWRfY2hhbmdlcyA9IGZ1bmN0aW9uKCBjaGFuZ2VzICkge1xuXG5cdFx0XHRpZiAoICd1bmRlZmluZWQnID09PSB0eXBlb2YgY2hhbmdlcyApIHtcblx0XHRcdFx0Y2hhbmdlcyA9IHNlbGYuZ2V0X3Vuc2F2ZWRfY2hhbmdlcygpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjaGVjayBhbGwgcG9zc2libGUga2V5cywgb25jZSB3ZSBmaW5kIG9uZSB3aXRoIGNvbnRlbnQgd2UgaGF2ZSBzb21lIGNoYW5nZXMgdG8gcGVyc2lzdFxuXHRcdFx0dmFyIGZvdW5kID0gXy5maW5kKCBjaGFuZ2VzLCBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHRyZXR1cm4gKCBmYWxzZSA9PT0gXy5pc0VtcHR5KCBkYXRhICkgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm4gZm91bmQgPyB0cnVlIDogZmFsc2U7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2F2ZSBjaGFuZ2VzIHJpZ2h0IG5vdy5cblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi43XG5cdFx0ICovXG5cdFx0dGhpcy5zYXZlX25vdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBhdXRvc2F2ZSApIHtcblx0XHRcdFx0d3AuaGVhcnRiZWF0LmNvbm5lY3ROb3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRvX2FqYXhfc2F2ZSgpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBVcGRhdGUgdGhlIGludGVydmFsIHRoYXQgY2hlY2tzIGZvciBjaGFuZ2VzIHRvIHRoZSBidWlsZGVyIGluc3RhbmNlXG5cdFx0ICogQHBhcmFtICAgIGludCAgICAgICAgbXMgICB0aW1lIChpbiBtaWxsaXNlY29uZHMpIHRvIHJ1biB0aGUgY2hlY2sgb25cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MgMCB0byBkaXNhYmxlIHRoZSBjaGVja1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHR0aGlzLnNldF9jaGVja19pbnRlcnZhbCA9IGZ1bmN0aW9uKCBtcyApIHtcblx0XHRcdGNoZWNrX2ludGVydmFsX21zID0gbXM7XG5cdFx0XHRpZiAoIGNoZWNrX2ludGVydmFsICkge1xuXHRcdFx0XHRjbGVhckludGVydmFsKCBjaGVja19pbnRlcnZhbCApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBjaGVja19pbnRlcnZhbF9tcyApIHtcblx0XHRcdFx0Y2hlY2tfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCggY2hlY2tfZm9yX2NoYW5nZXMsIGNoZWNrX2ludGVydmFsX21zICk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8qXG5cdFx0XHQgLyQkIC8kJCAgICAgICAgICAgICAvJCRcblx0XHRcdHwgJCR8X18vICAgICAgICAgICAgfCAkJFxuXHRcdFx0fCAkJCAvJCQgIC8kJCQkJCQkIC8kJCQkJCQgICAgLyQkJCQkJCAgLyQkJCQkJCQgICAvJCQkJCQkICAgLyQkJCQkJCAgIC8kJCQkJCQkXG5cdFx0XHR8ICQkfCAkJCAvJCRfX19fXy98XyAgJCRfLyAgIC8kJF9fICAkJHwgJCRfXyAgJCQgLyQkX18gICQkIC8kJF9fICAkJCAvJCRfX19fXy9cblx0XHRcdHwgJCR8ICQkfCAgJCQkJCQkICAgfCAkJCAgICB8ICQkJCQkJCQkfCAkJCAgXFwgJCR8ICQkJCQkJCQkfCAkJCAgXFxfXy98ICAkJCQkJCRcblx0XHRcdHwgJCR8ICQkIFxcX19fXyAgJCQgIHwgJCQgLyQkfCAkJF9fX19fL3wgJCQgIHwgJCR8ICQkX19fX18vfCAkJCAgICAgICBcXF9fX18gICQkXG5cdFx0XHR8ICQkfCAkJCAvJCQkJCQkJC8gIHwgICQkJCQvfCAgJCQkJCQkJHwgJCQgIHwgJCR8ICAkJCQkJCQkfCAkJCAgICAgICAvJCQkJCQkJC9cblx0XHRcdHxfXy98X18vfF9fX19fX18vICAgIFxcX19fLyAgIFxcX19fX19fXy98X18vICB8X18vIFxcX19fX19fXy98X18vICAgICAgfF9fX19fX18vXG5cdFx0Ki9cblxuXHRcdC8qKlxuXHRcdCAqIExpc3RlbiBmb3IgZGV0YWNoZWQgbW9kZWxzIGFuZCBzZW5kIHRoZW0gdG8gdGhlIHNlcnZlciBmb3IgcGVyc2lzdGVuY2Vcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdEJhY2tib25lLnB1YlN1Yi5vbiggJ21vZGVsLWRldGFjaGVkJywgZnVuY3Rpb24oIG1vZGVsICkge1xuXG5cdFx0XHQvLyBkZXRhY2hlZCBtb2RlbHMgd2l0aCB0ZW1wIGlkcyBoYXZlbid0IGJlZW4gcGVyc2lzdGVkIHNvIHdlIGRvbid0IGNhcmVcblx0XHRcdGlmICggaGFzX3RlbXBfaWQoIG1vZGVsICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZGV0YWNoZWQuYWRkKCBfLmNsb25lKCBtb2RlbC5hdHRyaWJ1dGVzICkgKTtcblxuXHRcdH0gKTtcblxuXHRcdC8qKlxuXHRcdCAqIExpc3RlbiBmb3IgdHJhc2hlZCBtb2RlbHMgYW5kIHNlbmQgdGhlbSB0byB0aGUgc2VydmVyIGZvciBkZWxldGlvblxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4xXG5cdFx0ICovXG5cdFx0QmFja2JvbmUucHViU3ViLm9uKCAnbW9kZWwtdHJhc2hlZCcsIGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuXHRcdFx0Ly8gaWYgdGhlIG1vZGVsIGhhcyBhIHRlbXAgSUQgd2UgZG9uJ3QgaGF2ZSB0byBwZXJzaXN0IHRoZSBkZWxldGlvblxuXHRcdFx0aWYgKCBoYXNfdGVtcF9pZCggbW9kZWwgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGF0YSA9IF8uY2xvbmUoIG1vZGVsLmF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBtb2RlbC5nZXRfdHJhc2hfaWQgKSB7XG5cdFx0XHRcdGRhdGEuaWQgPSBtb2RlbC5nZXRfdHJhc2hfaWQoKTtcblx0XHRcdH1cblxuXHRcdFx0dHJhc2hlZC5hZGQoIGRhdGEgKTtcblxuXHRcdH0gKTtcblxuXHRcdC8qXG5cdFx0XHQgLyQkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyQkICAgICAvJCQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8kJFxuXHRcdFx0fCAkJCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAkJCAgICB8ICQkICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgJCRcblx0XHRcdHwgJCQkJCQkJCAgIC8kJCQkJCQgICAvJCQkJCQkICAgLyQkJCQkJCAgLyQkJCQkJCAgfCAkJCQkJCQkICAgLyQkJCQkJCAgIC8kJCQkJCQgIC8kJCQkJCRcblx0XHRcdHwgJCRfXyAgJCQgLyQkX18gICQkIHxfX19fICAkJCAvJCRfXyAgJCR8XyAgJCRfLyAgfCAkJF9fICAkJCAvJCRfXyAgJCQgfF9fX18gICQkfF8gICQkXy9cblx0XHRcdHwgJCQgIFxcICQkfCAkJCQkJCQkJCAgLyQkJCQkJCR8ICQkICBcXF9fLyAgfCAkJCAgICB8ICQkICBcXCAkJHwgJCQkJCQkJCQgIC8kJCQkJCQkICB8ICQkXG5cdFx0XHR8ICQkICB8ICQkfCAkJF9fX19fLyAvJCRfXyAgJCR8ICQkICAgICAgICB8ICQkIC8kJHwgJCQgIHwgJCR8ICQkX19fX18vIC8kJF9fICAkJCAgfCAkJCAvJCRcblx0XHRcdHwgJCQgIHwgJCR8ICAkJCQkJCQkfCAgJCQkJCQkJHwgJCQgICAgICAgIHwgICQkJCQvfCAkJCQkJCQkL3wgICQkJCQkJCR8ICAkJCQkJCQkICB8ICAkJCQkL1xuXHRcdFx0fF9fLyAgfF9fLyBcXF9fX19fX18vIFxcX19fX19fXy98X18vICAgICAgICAgXFxfX18vICB8X19fX19fXy8gIFxcX19fX19fXy8gXFxfX19fX19fLyAgIFxcX19fL1xuXHRcdCovXG5cblx0XHQvKipcblx0XHQgKiBBZGQgZGF0YSB0byB0aGUgV1AgaGVhcnRiZWF0IHRvIHBlcnNpc3QgbmV3IG1vZGVscywgY2hhbmdlcywgYW5kIGRlbGV0aW9ucyB0byB0aGUgREJcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuN1xuXHRcdCAqL1xuXHRcdCQoIGRvY3VtZW50ICkub24oICdoZWFydGJlYXQtc2VuZCcsIGZ1bmN0aW9uKCBldmVudCwgZGF0YSApIHtcblxuXHRcdFx0Ly8gcHJldmVudCBzaW11bHRhbmVvdXMgc2F2ZXNcblx0XHRcdGlmICggc2VsZi5zYXZpbmcgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNoYW5nZXMgPSBzZWxmLmdldF91bnNhdmVkX2NoYW5nZXMoKTtcblxuXHRcdFx0Ly8gb25seSBzZW5kIGRhdGEgaWYgd2UgaGF2ZSBkYXRhIHRvIHNlbmRcblx0XHRcdGlmICggc2VsZi5oYXNfdW5zYXZlZF9jaGFuZ2VzKCBjaGFuZ2VzICkgKSB7XG5cblx0XHRcdFx0Y2hhbmdlcy5pZCA9IENvdXJzZS5nZXQoICdpZCcgKTtcblx0XHRcdFx0c2VsZi5zYXZpbmcgPSB0cnVlO1xuXHRcdFx0XHRkYXRhLmxsbXNfYnVpbGRlciA9IEpTT04uc3RyaW5naWZ5KCBjaGFuZ2VzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0d2luZG93LmxsbXNfYnVpbGRlci5kZWJ1Zy5sb2coICc9PT09IHN0YXJ0IGhlYXJ0YmVhdC1zZW5kID09PT0nLCBkYXRhLCAnPT09PSBmaW5pc2ggaGVhcnRiZWF0LXNlbmQgPT09PScgKTtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdoZWFydGJlYXQtc2VuZCcsIHNlbGYgKTtcblxuXHRcdH0gKTtcblxuXHRcdC8qKlxuXHRcdCAqIENvbmZpcm0gZGV0YWNobWVudHMgJiBkZWxldGlvbnMgYW5kIHJlcGxhY2UgdGVtcCBJRHMgd2l0aCBuZXcgcGVyc2lzdGVkIElEc1xuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0JCggZG9jdW1lbnQgKS5vbiggJ2hlYXJ0YmVhdC10aWNrJywgZnVuY3Rpb24oIGV2ZW50LCBkYXRhICkge1xuXG5cdFx0XHRpZiAoICEgZGF0YS5sbG1zX2J1aWxkZXIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0d2luZG93LmxsbXNfYnVpbGRlci5kZWJ1Zy5sb2coICc9PT09IHN0YXJ0IGhlYXJ0YmVhdC10aWNrID09PT0nLCBkYXRhLCAnPT09PSBmaW5pc2ggaGVhcnRiZWF0LXRpY2sgPT09PScgKTtcblxuXHRcdFx0ZGF0YS5sbG1zX2J1aWxkZXIgPSBwcm9jZXNzX3JlbW92YWxzKCBkYXRhLmxsbXNfYnVpbGRlciApO1xuXHRcdFx0ZGF0YS5sbG1zX2J1aWxkZXIgPSBwcm9jZXNzX3VwZGF0ZXMoIGRhdGEubGxtc19idWlsZGVyICk7XG5cblx0XHRcdHNlbGYuc2F2aW5nID0gZmFsc2U7XG5cblx0XHRcdEJhY2tib25lLnB1YlN1Yi50cmlnZ2VyKCAnaGVhcnRiZWF0LXRpY2snLCBzZWxmLCBkYXRhLmxsbXNfYnVpbGRlciApO1xuXG5cdFx0fSApO1xuXG5cdFx0LyoqXG5cdFx0ICogT24gaGVhcnRiZWF0IGVycm9ycyBwdWJsaXNoIGFuIGVycm9yIHRvIHRoZSBtYWluIGJ1aWxkZXIgYXBwbGljYXRpb25cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdCQoIGRvY3VtZW50ICkub24oICdoZWFydGJlYXQtZXJyb3InLCBmdW5jdGlvbiggZXZlbnQsIGRhdGEgKSB7XG5cblx0XHRcdHdpbmRvdy5sbG1zX2J1aWxkZXIuZGVidWcubG9nKCAnPT09PSBzdGFydCBoZWFydGJlYXQtZXJyb3IgPT09PScsIGRhdGEsICc9PT09IGZpbmlzaCBoZWFydGJlYXQtZXJyb3IgPT09PScgKTtcblxuXHRcdFx0c2VsZi5zYXZpbmcgPSBmYWxzZTtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdoZWFydGJlYXQtdGljaycsIHNlbGYsIHtcblx0XHRcdFx0c3RhdHVzOiAnZXJyb3InLFxuXHRcdFx0XHRtZXNzYWdlOiBkYXRhLnJlc3BvbnNlVGV4dCArICcgKCcgKyBkYXRhLnN0YXR1cyArICcgJyArIGRhdGEuc3RhdHVzVGV4dCArJyknLFxuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdFx0Lypcblx0XHRcdCAvJCQgICAgICAgICAgIC8kJCAgIC8kJFxuXHRcdFx0fF9fLyAgICAgICAgICB8X18vICB8ICQkXG5cdFx0XHQgLyQkIC8kJCQkJCQkICAvJCQgLyQkJCQkJFxuXHRcdFx0fCAkJHwgJCRfXyAgJCR8ICQkfF8gICQkXy9cblx0XHRcdHwgJCR8ICQkICBcXCAkJHwgJCQgIHwgJCRcblx0XHRcdHwgJCR8ICQkICB8ICQkfCAkJCAgfCAkJCAvJCRcblx0XHRcdHwgJCR8ICQkICB8ICQkfCAkJCAgfCAgJCQkJC9cblx0XHRcdHxfXy98X18vICB8X18vfF9fLyAgIFxcX19fL1xuXHRcdCovXG5cdFx0aW5pdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxufSApO1xuXG4vKipcbiAqIFNpbmdsZSBMZXNzb24gVmlld1xuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTcuMFxuICovXG5kZWZpbmUoICdWaWV3cy9MZXNzb24nLFtcblx0XHQnVmlld3MvX0RldGFjaGFibGUnLFxuXHRcdCdWaWV3cy9fRWRpdGFibGUnLFxuXHRcdCdWaWV3cy9fU2hpZnRhYmxlJyxcblx0XHQnVmlld3MvX1RyYXNoYWJsZSdcblx0XSwgZnVuY3Rpb24oXG5cdFx0RGV0YWNoYWJsZSxcblx0XHRFZGl0YWJsZSxcblx0XHRTaGlmdGFibGUsXG5cdFx0VHJhc2hhYmxlXG5cdCkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5WaWV3LmV4dGVuZCggXy5kZWZhdWx0cygge1xuXG5cdFx0LyoqXG5cdFx0ICogR2V0IGRlZmF1bHQgYXR0cmlidXRlcyBmb3IgdGhlIGh0bWwgd3JhcHBlciBlbGVtZW50XG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0YXR0cmlidXRlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQnZGF0YS1pZCc6IHRoaXMubW9kZWwuaWQsXG5cdFx0XHRcdCdkYXRhLXNlY3Rpb24taWQnOiB0aGlzLm1vZGVsLmdldCggJ3BhcmVudF9zZWN0aW9uJyApLFxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSFRNTCBjbGFzcyBuYW1lc1xuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdGNsYXNzTmFtZTogJ2xsbXMtYnVpbGRlci1pdGVtIGxsbXMtbGVzc29uJyxcblxuXHRcdC8qKlxuXHRcdCAqIEV2ZW50c1xuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMlxuXHRcdCAqL1xuXHRcdGV2ZW50czogXy5kZWZhdWx0cygge1xuXHRcdFx0J2NsaWNrIC5lZGl0LWxlc3Nvbic6ICdvcGVuX2xlc3Nvbl9lZGl0b3InLFxuXHRcdFx0J2NsaWNrIC5lZGl0LXF1aXonOiAnb3Blbl9xdWl6X2VkaXRvcicsXG5cdFx0XHQnY2xpY2sgLmVkaXQtYXNzaWdubWVudCc6ICdvcGVuX2Fzc2lnbm1lbnRfZWRpdG9yJyxcblx0XHRcdCdjbGljayAuc2VjdGlvbi1wcmV2JzogJ3NlY3Rpb25fcHJldicsXG5cdFx0XHQnY2xpY2sgLnNlY3Rpb24tbmV4dCc6ICdzZWN0aW9uX25leHQnLFxuXHRcdFx0J2NsaWNrIC5zaGlmdC11cC0tbGVzc29uJzogJ3NoaWZ0X3VwJyxcblx0XHRcdCdjbGljayAuc2hpZnQtZG93bi0tbGVzc29uJzogJ3NoaWZ0X2Rvd24nLFxuXHRcdH0sIERldGFjaGFibGUuZXZlbnRzLCBFZGl0YWJsZS5ldmVudHMsIFRyYXNoYWJsZS5ldmVudHMgKSxcblxuXHRcdC8qKlxuXHRcdCAqIEhUTUwgZWxlbWVudCB3cmFwcGVyIElEIGF0dHJpYnV0ZVxuXHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAnbGxtcy1sZXNzb24tJyArIHRoaXMubW9kZWwuaWQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFdyYXBwZXIgVGFnIG5hbWVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHR0YWdOYW1lOiAnbGknLFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSB1bmRlcnNjb3JlIHRlbXBsYXRlXG5cdFx0ICogQHR5cGUgIHtbdHlwZV19XG5cdFx0ICovXG5cdFx0dGVtcGxhdGU6IHdwLnRlbXBsYXRlKCAnbGxtcy1sZXNzb24tdGVtcGxhdGUnICksXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXphdGlvbiBjYWxsYmFjayBmdW5jIChyZW5kZXJzIHRoZSBlbGVtZW50IG9uIHNjcmVlbilcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE0LjFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNC4xXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cblx0XHRcdHRoaXMubGlzdGVuVG8oIHRoaXMubW9kZWwsICdjaGFuZ2UnLCB0aGlzLnJlbmRlciApO1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIub24oICAnbGVzc29uLXNlbGVjdGVkJywgdGhpcy5vbl9zZWxlY3QsIHRoaXMgKTtcblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggICduZXctbGVzc29uLWFkZGVkJywgdGhpcy5vbl9zZWxlY3QsIHRoaXMgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDb21waWxlcyB0aGUgdGVtcGxhdGUgYW5kIHJlbmRlcnMgdGhlIHZpZXdcblx0XHQgKiBAcmV0dXJuICAgc2VsZiAoZm9yIGNoYWluaW5nKVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dGhpcy4kZWwuaHRtbCggdGhpcy50ZW1wbGF0ZSggdGhpcy5tb2RlbCApICk7XG5cdFx0XHR0aGlzLm1heWJlX2hpZGVfc2hpZnRhYmxlX2J1dHRvbnMoKTtcblx0XHRcdGlmICggdGhpcy5tb2RlbC5nZXQoICdfc2VsZWN0ZWQnICkgKSB7XG5cdFx0XHRcdHRoaXMuJGVsLmFkZENsYXNzKCAnc2VsZWN0ZWQnICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLiRlbC5yZW1vdmVDbGFzcyggJ3NlbGVjdGVkJyApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ2xpY2sgZXZlbnQgZm9yIHRoZSBhc3NpZ25tZW50IGVkaXRvciBhY3Rpb24gaWNvblxuXHRcdCAqIE9wZW5zIHNpZGViYXIgdG8gdGhlIGFzc2lnbm1lbnQgZWRpdG9yIHRhYlxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRvcGVuX2Fzc2lnbm1lbnRfZWRpdG9yOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdsZXNzb24tc2VsZWN0ZWQnLCB0aGlzLm1vZGVsLCAnYXNzaWdubWVudCcgKTtcblx0XHRcdHRoaXMubW9kZWwuc2V0KCAnX3NlbGVjdGVkJywgdHJ1ZSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsaWNrIGV2ZW50IGZvciBsZXNzb24gc2V0dGluZ3MgYWN0aW9uIGljb25cblx0XHQgKiBPcGVucyBzaWRlYmFyIHRvIHRoZSBsZXNzb24gZWRpdG9yIHRhYlxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRvcGVuX2xlc3Nvbl9lZGl0b3I6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ2xlc3Nvbi1zZWxlY3RlZCcsIHRoaXMubW9kZWwsICdsZXNzb24nICk7XG5cdFx0XHR0aGlzLm1vZGVsLnNldCggJ19zZWxlY3RlZCcsIHRydWUgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDbGljayBldmVudCBmb3IgdGhlIHF1aXogZWRpdG9yIGFjdGlvbiBpY29uXG5cdFx0ICogT3BlbnMgc2lkZWJhciB0byB0aGUgcXVpeiBlZGl0b3IgdGFiXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdG9wZW5fcXVpel9lZGl0b3I6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ2xlc3Nvbi1zZWxlY3RlZCcsIHRoaXMubW9kZWwsICdxdWl6JyApO1xuXHRcdFx0dGhpcy5tb2RlbC5zZXQoICdfc2VsZWN0ZWQnLCB0cnVlICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBhIGxlc3NvbiBpcyBzZWxlY3RlZCBtYXJrIGl0IGFzIHNlbGVjdGVkIGluIHRoZSBoaWRkZW4gcHJvcFxuXHRcdCAqIEFsbG93cyB2aWV3cyB0byByZS1yZW5kZXIgYW5kIHJlZmxlY3QgY3VycmVudCBzdGF0ZSBwcm9wZXJseVxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBtb2RlbCAgbGVzc29uIG1vZGVsIHRoYXQncyBiZWVuIHNlbGVjdGVkXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdG9uX3NlbGVjdDogZnVuY3Rpb24oIG1vZGVsICkge1xuXG5cdFx0XHRpZiAoIHRoaXMubW9kZWwuaWQgIT09IG1vZGVsLmlkICkge1xuXHRcdFx0XHR0aGlzLm1vZGVsLnNldCggJ19zZWxlY3RlZCcsIGZhbHNlICk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ2xpY2sgZXZlbnQgZm9yIHRoZSBcIk5leHQgU2VjdGlvblwiIGJ1dHRvblxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAgIGpzIGV2ZW50IG9ialxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMTFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMVxuXHRcdCAqL1xuXHRcdHNlY3Rpb25fbmV4dDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHRoaXMuX21vdmVfdG9fc2VjdGlvbiggJ25leHQnICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsaWNrIGV2ZW50IGZvciB0aGUgXCJQcmV2aW91cyBTZWN0aW9uXCIgYnV0dG9uXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICAganMgZXZlbnQgb2JqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4xMVxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjExXG5cdFx0ICovXG5cdFx0c2VjdGlvbl9wcmV2OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dGhpcy5fbW92ZV90b19zZWN0aW9uKCAncHJldicgKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogTW92ZSB0aGUgbGVzc29uIGludG8gYSBuZXcgc2VjdGlvblxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBkaXJlY3Rpb24gIGRpcmVjdGlvbiBbcHJldnxuZXh0XVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMTFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMVxuXHRcdCAqL1xuXHRcdF9tb3ZlX3RvX3NlY3Rpb246IGZ1bmN0aW9uKCBkaXJlY3Rpb24gKSB7XG5cblx0XHRcdHZhciBmcm9tX2NvbGwgPSB0aGlzLm1vZGVsLmNvbGxlY3Rpb24sXG5cdFx0XHRcdHRvX3NlY3Rpb247XG5cblx0XHRcdGlmICggJ25leHQnID09PSBkaXJlY3Rpb24gKSB7XG5cdFx0XHRcdHRvX3NlY3Rpb24gPSBmcm9tX2NvbGwucGFyZW50LmdldF9uZXh0KCk7XG5cdFx0XHR9IGVsc2UgaWYgKCAncHJldicgPT09IGRpcmVjdGlvbiApIHtcblx0XHRcdFx0dG9fc2VjdGlvbiA9IGZyb21fY29sbC5wYXJlbnQuZ2V0X3ByZXYoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0b19zZWN0aW9uICkge1xuXG5cdFx0XHRcdGZyb21fY29sbC5yZW1vdmUoIHRoaXMubW9kZWwgKTtcblx0XHRcdFx0dG9fc2VjdGlvbi5hZGRfbGVzc29uKCB0aGlzLm1vZGVsICk7XG5cdFx0XHRcdHRvX3NlY3Rpb24uc2V0KCAnX2V4cGFuZGVkJywgdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdH0sIERldGFjaGFibGUsIEVkaXRhYmxlLCBTaGlmdGFibGUsIFRyYXNoYWJsZSApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBTaW5nbGUgU2VjdGlvbiBWaWV3XG4gKiBAc2luY2UgICAgMy4xMy4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL0xlc3Nvbkxpc3QnLFsgJ1ZpZXdzL0xlc3NvbicsICdWaWV3cy9fUmVjZWl2YWJsZScgXSwgZnVuY3Rpb24oIExlc3NvblZpZXcsIFJlY2VpdmFibGUgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLkNvbGxlY3Rpb25WaWV3LmV4dGVuZCggXy5kZWZhdWx0cygge1xuXG5cdFx0Y2xhc3NOYW1lOiAnbGxtcy1sZXNzb25zJyxcblxuXHRcdC8qKlxuXHRcdCAqIFNlY3Rpb24gbW9kZWxcblx0XHQgKiBAdHlwZSAge1t0eXBlXX1cblx0XHQgKi9cblx0XHRtb2RlbFZpZXc6IExlc3NvblZpZXcsXG5cblx0XHQvKipcblx0XHQgKiBBcmUgc2VjdGlvbnMgc2VsZWN0YWJsZT9cblx0XHQgKiBAdHlwZSAge0Jvb2x9XG5cdFx0ICovXG5cdFx0c2VsZWN0YWJsZTogZmFsc2UsXG5cblx0XHQvKipcblx0XHQgKiBBcmUgc2VjdGlvbnMgc29ydGFibGU/XG5cdFx0ICogQHR5cGUgIHtCb29sfVxuXHRcdCAqL1xuXHRcdHNvcnRhYmxlOiB0cnVlLFxuXG5cdFx0c29ydGFibGVPcHRpb25zOiB7XG5cdFx0XHRheGlzOiBmYWxzZSxcblx0XHRcdGNvbm5lY3RXaXRoOiAnLmxsbXMtbGVzc29ucycsXG5cdFx0XHRjdXJzb3I6ICdtb3ZlJyxcblx0XHRcdGhhbmRsZTogJy5kcmFnLWxlc3NvbicsXG5cdFx0XHRpdGVtczogJy5sbG1zLWxlc3NvbicsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ2xsbXMtbGVzc29uIGxsbXMtc29ydGFibGUtcGxhY2Vob2xkZXInLFxuXHRcdH0sXG5cblx0XHRzb3J0YWJsZV9zdGFydDogZnVuY3Rpb24oIGNvbGxlY3Rpb24gKSB7XG5cdFx0XHQkKCAnLmxsbXMtbGVzc29ucycgKS5hZGRDbGFzcyggJ2RyYWdnaW5nJyApO1xuXHRcdH0sXG5cblx0XHRzb3J0YWJsZV9zdG9wOiBmdW5jdGlvbiggY29sbGVjdGlvbiApIHtcblx0XHRcdCQoICcubGxtcy1sZXNzb25zJyApLnJlbW92ZUNsYXNzKCAnZHJhZ2dpbmcnICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJsb2FkcyB0aGUgZnVuY3Rpb24gZnJvbSBCYWNrYm9uZS5Db2xsZWN0aW9uVmlldyBjb3JlIGJlY2F1c2UgaXQgZG9lc24ndCBzZW5kIHN0b3AgZXZlbnRzXG5cdFx0ICogaWYgbW92aW5nIGZyb20gb25lIHNvcnRhYmxlIHRvIGFub3RoZXIuLi4gOi0oXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgdWkgICAgIGpRdWVyeSBVSSBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0X3NvcnRTdG9wIDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblxuXHRcdFx0dmFyIG1vZGVsQmVpbmdTb3J0ZWQgPSB0aGlzLmNvbGxlY3Rpb24uZ2V0KCB1aS5pdGVtLmF0dHIoICdkYXRhLW1vZGVsLWNpZCcgKSApLFxuXHRcdFx0XHRtb2RlbFZpZXdDb250YWluZXJFbCA9IHRoaXMuX2dldENvbnRhaW5lckVsKCksXG5cdFx0XHRcdG5ld0luZGV4ID0gbW9kZWxWaWV3Q29udGFpbmVyRWwuY2hpbGRyZW4oKS5pbmRleCggdWkuaXRlbSApO1xuXG5cdFx0XHRpZiAoIG5ld0luZGV4ID09IC0xICYmIG1vZGVsQmVpbmdTb3J0ZWQgKSB7XG5cdFx0XHRcdHRoaXMuY29sbGVjdGlvbi5yZW1vdmUoIG1vZGVsQmVpbmdTb3J0ZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcmVvcmRlckNvbGxlY3Rpb25CYXNlZE9uSFRNTCgpO1xuXHRcdFx0dGhpcy51cGRhdGVEZXBlbmRlbnRDb250cm9scygpO1xuXG5cdFx0XHRpZiggdGhpcy5faXNCYWNrYm9uZUNvdXJpZXJBdmFpbGFibGUoKSApIHtcblx0XHRcdFx0dGhpcy5zcGF3biggJ3NvcnRTdG9wJywgeyBtb2RlbEJlaW5nU29ydGVkIDogbW9kZWxCZWluZ1NvcnRlZCwgbmV3SW5kZXggOiBuZXdJbmRleCB9ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnRyaWdnZXIoICdzb3J0U3RvcCcsIG1vZGVsQmVpbmdTb3J0ZWQsIG5ld0luZGV4ICk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdH0sIFJlY2VpdmFibGUgKSApO1xuXG59ICk7XG5cbi8qKlxuICogU2luZ2xlIFNlY3Rpb24gVmlld1xuICogQHNpbmNlICAgIDMuMTMuMFxuICogQHZlcnNpb24gIDMuMTYuMTJcbiAqL1xuZGVmaW5lKCAnVmlld3MvU2VjdGlvbicsW1xuXHRcdCdWaWV3cy9MZXNzb25MaXN0Jyxcblx0XHQnVmlld3MvX0VkaXRhYmxlJyxcblx0XHQnVmlld3MvX1NoaWZ0YWJsZScsXG5cdFx0J1ZpZXdzL19UcmFzaGFibGUnXG5cdF0sIGZ1bmN0aW9uKFxuXHRcdExlc3Nvbkxpc3RWaWV3LFxuXHRcdEVkaXRhYmxlLFxuXHRcdFNoaWZ0YWJsZSxcblx0XHRUcmFzaGFibGVcblx0KSB7XG5cblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKCBfLmRlZmF1bHRzKCB7XG5cblx0XHQvKipcblx0XHQgKiBHZXQgZGVmYXVsdCBhdHRyaWJ1dGVzIGZvciB0aGUgaHRtbCB3cmFwcGVyIGVsZW1lbnRcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTMuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjEzLjBcblx0XHQgKi9cblx0XHRhdHRyaWJ1dGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdCdkYXRhLWlkJzogdGhpcy5tb2RlbC5pZCxcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEVsZW1lbnQgY2xhc3NuYW1lc1xuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdGNsYXNzTmFtZTogJ2xsbXMtYnVpbGRlci1pdGVtIGxsbXMtc2VjdGlvbicsXG5cblx0XHQvKipcblx0XHQgKiBFdmVudHNcblx0XHQgKiBAdHlwZSAgICAge09iamVjdH1cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMTJcblx0XHQgKi9cblx0XHRldmVudHM6IF8uZGVmYXVsdHMoIHtcblxuXHRcdFx0J2NsaWNrJzogJ3NlbGVjdCcsXG5cdFx0XHQnY2xpY2sgLmV4cGFuZCc6ICdleHBhbmQnLFxuXHRcdFx0J2NsaWNrIC5jb2xsYXBzZSc6ICdjb2xsYXBzZScsXG5cdFx0XHQnY2xpY2sgLnNoaWZ0LXVwLS1zZWN0aW9uJzogJ3NoaWZ0X3VwJyxcblx0XHRcdCdjbGljayAuc2hpZnQtZG93bi0tc2VjdGlvbic6ICdzaGlmdF9kb3duJyxcblxuXHRcdFx0J21vdXNlZW50ZXIgLmxsbXMtbGVzc29ucyc6ICdvbl9tb3VzZWVudGVyJyxcblxuXHRcdH0sIEVkaXRhYmxlLmV2ZW50cywgVHJhc2hhYmxlLmV2ZW50cyApLFxuXG5cdFx0LyoqXG5cdFx0ICogSFRNTCBlbGVtZW50IHdyYXBwZXIgSUQgYXR0cmlidXRlXG5cdFx0ICogQHJldHVybiAgIHN0cmluZ1xuXHRcdCAqIEBzaW5jZSAgICAzLjEzLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xMy4wXG5cdFx0ICovXG5cdFx0aWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICdsbG1zLXNlY3Rpb24tJyArIHRoaXMubW9kZWwuaWQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFdyYXBwZXIgVGFnIG5hbWVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHR0YWdOYW1lOiAnbGknLFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSB1bmRlcnNjb3JlIHRlbXBsYXRlXG5cdFx0ICogQHR5cGUgIHtbdHlwZV19XG5cdFx0ICovXG5cdFx0dGVtcGxhdGU6IHdwLnRlbXBsYXRlKCAnbGxtcy1zZWN0aW9uLXRlbXBsYXRlJyApLFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6YXRpb24gY2FsbGJhY2sgZnVuYyAocmVuZGVycyB0aGUgZWxlbWVudCBvbiBzY3JlZW4pXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xMy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5tb2RlbCwgJ2NoYW5nZScsIHRoaXMucmVuZGVyICk7XG5cdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLm1vZGVsLCAnY2hhbmdlOl9leHBhbmRlZCcsIHRoaXMudG9nZ2xlX2V4cGFuZGVkICk7XG5cdFx0XHR0aGlzLmxlc3Nvbkxpc3RWaWV3LmNvbGxlY3Rpb24ub24oICdhZGQnLCB0aGlzLm9uX2xlc3Nvbl9hZGQsIHRoaXMgKTtcblxuXHRcdFx0dGhpcy5kcmFnVGltZW91dCA9IG51bGw7XG5cblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggJ2V4cGFuZC1hbGwnLCB0aGlzLmV4cGFuZCwgdGhpcyApO1xuXHRcdFx0QmFja2JvbmUucHViU3ViLm9uKCAnY29sbGFwc2UtYWxsJywgdGhpcy5jb2xsYXBzZSwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlciB0aGUgc2VjdGlvblxuXHRcdCAqIEluaXRhbGl6ZXMgYSBuZXcgY29sbGVjdGlvbiBhbmQgdmlld3MgZm9yIGFsbCBsZXNzb25zIGluIHRoZSBzZWN0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xMy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHRoaXMuJGVsLmh0bWwoIHRoaXMudGVtcGxhdGUoIHRoaXMubW9kZWwudG9KU09OKCkgKSApO1xuXG5cdFx0XHR0aGlzLm1heWJlX2hpZGVfc2hpZnRhYmxlX2J1dHRvbnMoKTtcblxuXHRcdFx0dGhpcy5sZXNzb25MaXN0VmlldyA9IG5ldyBMZXNzb25MaXN0Vmlldygge1xuXHRcdFx0XHRlbDogdGhpcy4kZWwuZmluZCggJy5sbG1zLWxlc3NvbnMnICksXG5cdFx0XHRcdGNvbGxlY3Rpb246IHRoaXMubW9kZWwuZ2V0KCAnbGVzc29ucycgKSxcblx0XHRcdH0gKTtcblx0XHRcdHRoaXMubGVzc29uTGlzdFZpZXcucmVuZGVyKCk7XG5cdFx0XHR0aGlzLmxlc3Nvbkxpc3RWaWV3Lm9uKCAnc29ydFN0YXJ0JywgdGhpcy5sZXNzb25MaXN0Vmlldy5zb3J0YWJsZV9zdGFydCApO1xuXHRcdFx0dGhpcy5sZXNzb25MaXN0Vmlldy5vbiggJ3NvcnRTdG9wJywgdGhpcy5sZXNzb25MaXN0Vmlldy5zb3J0YWJsZV9zdG9wICk7XG5cblx0XHRcdC8vIHNlbGVjdGlvbiBjaGFuZ2VzXG5cdFx0XHR0aGlzLmxlc3Nvbkxpc3RWaWV3Lm9uKCAnc2VsZWN0aW9uQ2hhbmdlZCcsIHRoaXMuYWN0aXZlX2xlc3Nvbl9jaGFuZ2UsIHRoaXMgKTtcblxuXHRcdFx0dGhpcy5tYXliZV9oaWRlX3RyYXNoX2J1dHRvbigpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH0sXG5cblx0XHRhY3RpdmVfbGVzc29uX2NoYW5nZTogZnVuY3Rpb24oIGN1cnJlbnQsIHByZXZpb3VzICkge1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ2FjdGl2ZS1sZXNzb24tY2hhbmdlJywge1xuXHRcdFx0XHRjdXJyZW50OiBjdXJyZW50LFxuXHRcdFx0XHRwcmV2aW91czogcHJldmlvdXMsXG5cdFx0XHR9ICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ29sbGFwc2UgbGVzc29ucyB3aXRoaW4gdGhlIHNlY3Rpb25cblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgICAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHBhcmFtICAgIGJvb2wgIHVwZGF0ZSAgIGlmIHRydWUsIHVwZGF0ZXMgdGhlIG1vZGVsIHRvIHJlZmxlY3QgdGhlIG5ldyBzdGF0ZVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRjb2xsYXBzZTogZnVuY3Rpb24oIGV2ZW50LCB1cGRhdGUgKSB7XG5cblx0XHRcdGlmICggJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB1cGRhdGUgKSB7XG5cdFx0XHRcdHVwZGF0ZSA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZXZlbnQgKSB7XG5cdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLiRlbC5yZW1vdmVDbGFzcyggJ2V4cGFuZGVkJyApLmZpbmQoICcuZHJhZy1leHBhbmRlZCcgKS5yZW1vdmVDbGFzcyggJ2RyYWctZXhwYW5kZWQnICk7XG5cdFx0XHRpZiAoIHVwZGF0ZSApIHtcblx0XHRcdFx0dGhpcy5tb2RlbC5zZXQoICdfZXhwYW5kZWQnLCBmYWxzZSApO1xuXHRcdFx0fVxuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdzZWN0aW9uLXRvZ2dsZScsIHRoaXMubW9kZWwgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBFeHBhbmQgbGVzc29ucyB3aXRoaW4gdGhlIHNlY3Rpb25cblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgICAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHBhcmFtICAgIGJvb2wgIHVwZGF0ZSAgIGlmIHRydWUsIHVwZGF0ZXMgdGhlIG1vZGVsIHRvIHJlZmxlY3QgdGhlIG5ldyBzdGF0ZVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCBldmVudCwgdXBkYXRlICkge1xuXG5cdFx0XHRpZiAoICd1bmRlZmluZWQnID09PSB0eXBlb2YgdXBkYXRlICkge1xuXHRcdFx0XHR1cGRhdGUgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGV2ZW50ICkge1xuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy4kZWwuYWRkQ2xhc3MoICdleHBhbmRlZCcgKTtcblx0XHRcdGlmICggdXBkYXRlICkge1xuXHRcdFx0XHR0aGlzLm1vZGVsLnNldCggJ19leHBhbmRlZCcsIHRydWUgKTtcblx0XHRcdH1cblx0XHRcdEJhY2tib25lLnB1YlN1Yi50cmlnZ2VyKCAnc2VjdGlvbi10b2dnbGUnLCB0aGlzLm1vZGVsICk7XG5cblx0XHR9LFxuXG5cdFx0bWF5YmVfaGlkZV90cmFzaF9idXR0b246IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgJGJ0biA9IHRoaXMuJGVsLmZpbmQoICcudHJhc2gtLXNlY3Rpb24nICk7XG5cblx0XHRcdGlmICggdGhpcy5tb2RlbC5nZXQoICdsZXNzb25zJyApLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0XHQkYnRuLnNob3coKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQkYnRuLmhpZGUoKVxuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBhIGxlc3NvbiBpcyBhZGRlZCB0byB0aGUgc2VjdGlvbiB0cmlnZ2VyIGEgY29sbGVjdGlvbiByZW9yZGVyICYgdXBkYXRlIHRoZSBsZXNzb24ncyBpZFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBtb2RlbCAgTGVzc29uIG1vZGVsXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdG9uX2xlc3Nvbl9hZGQ6IGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuXHRcdFx0dGhpcy5sZXNzb25MaXN0Vmlldy5jb2xsZWN0aW9uLnRyaWdnZXIoICdyZW9yZGVyJyApO1xuXHRcdFx0bW9kZWwuc2V0KCAncGFyZW50X3NlY3Rpb24nLCB0aGlzLm1vZGVsLmdldCggJ2lkJyApICk7XG5cdFx0XHR0aGlzLmV4cGFuZCgpO1xuXG5cdFx0fSxcblxuXHRcdG9uX21vdXNlZW50ZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXG5cdFx0XHRpZiAoICQoIGV2ZW50LnRhcmdldCApLmhhc0NsYXNzKCAnZHJhZ2dpbmcnICkgKSB7XG5cblx0XHRcdFx0JCggJy5kcmFnLWV4cGFuZGVkJyApLnJlbW92ZUNsYXNzKCAnZHJhZy1leHBhbmRlZCcgKTtcblx0XHRcdFx0JCggZXZlbnQudGFyZ2V0ICkuYWRkQ2xhc3MoICdkcmFnLWV4cGFuZGVkJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRXhwYW5kXG5cdFx0ICogQHBhcmFtICAgIHtbdHlwZV19ICAgbW9kZWwgIFtkZXNjcmlwdGlvbl1cblx0XHQgKiBAcGFyYW0gICAge1t0eXBlXX0gICB2YWx1ZSAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEByZXR1cm4gICB7W3R5cGVdfVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0dG9nZ2xlX2V4cGFuZGVkOiBmdW5jdGlvbiggbW9kZWwsIHZhbHVlICkge1xuXG5cdFx0XHRpZiAoIHZhbHVlICkge1xuXHRcdFx0XHR0aGlzLmV4cGFuZCggbnVsbCwgZmFsc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2UoIG51bGwsIGZhbHNlICk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdH0sIEVkaXRhYmxlLCBTaGlmdGFibGUsIFRyYXNoYWJsZSApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBTaW5nbGUgU2VjdGlvbiBWaWV3XG4gKiBAc2luY2UgICAgMy4xMy4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL1NlY3Rpb25MaXN0JyxbICdWaWV3cy9TZWN0aW9uJywgJ1ZpZXdzL19SZWNlaXZhYmxlJyBdLCBmdW5jdGlvbiggU2VjdGlvblZpZXcsIFJlY2VpdmFibGUgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLkNvbGxlY3Rpb25WaWV3LmV4dGVuZCggXy5kZWZhdWx0cygge1xuXG5cdFx0LyoqXG5cdFx0ICogUGFyZW50IGVsZW1lbnRcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHRlbDogJyNsbG1zLXNlY3Rpb25zJyxcblxuXHRcdGV2ZW50cyA6IHtcblx0XHRcdCdtb3VzZWRvd24gPiBsaS5sbG1zLXNlY3Rpb24gPiAubGxtcy1idWlsZGVyLWhlYWRlciAubGxtcy1oZWFkbGluZScgOiAnX2xpc3RJdGVtX29uTW91c2Vkb3duJyxcblx0XHRcdC8vICdkYmxjbGljayA+IGxpLCB0Ym9keSA+IHRyID4gdGQnIDogJ19saXN0SXRlbV9vbkRvdWJsZUNsaWNrJyxcblx0XHRcdCdjbGljaycgOiAnX2xpc3RCYWNrZ3JvdW5kX29uQ2xpY2snLFxuXHRcdFx0J2NsaWNrIHVsLmNvbGxlY3Rpb24tdmlldycgOiAnX2xpc3RCYWNrZ3JvdW5kX29uQ2xpY2snLFxuXHRcdFx0J2tleWRvd24nIDogJ19vbktleWRvd24nXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNlY3Rpb24gbW9kZWxcblx0XHQgKiBAdHlwZSAge1t0eXBlXX1cblx0XHQgKi9cblx0XHRtb2RlbFZpZXc6IFNlY3Rpb25WaWV3LFxuXG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlIGtleWJvYXJkIGV2ZW50c1xuXHRcdCAqIEB0eXBlICB7Qm9vbH1cblx0XHQgKi9cblx0XHRwcm9jZXNzS2V5RXZlbnRzOiBmYWxzZSxcblxuXHRcdC8qKlxuXHRcdCAqIEFyZSBzZWN0aW9ucyBzZWxlY3RhYmxlP1xuXHRcdCAqIEB0eXBlICB7Qm9vbH1cblx0XHQgKi9cblx0XHRzZWxlY3RhYmxlOiB0cnVlLFxuXG5cdFx0LyoqXG5cdFx0ICogQXJlIHNlY3Rpb25zIHNvcnRhYmxlP1xuXHRcdCAqIEB0eXBlICB7Qm9vbH1cblx0XHQgKi9cblx0XHRzb3J0YWJsZTogdHJ1ZSxcblxuXHRcdHNvcnRhYmxlT3B0aW9uczoge1xuXHRcdFx0YXhpczogZmFsc2UsXG5cdFx0XHRjdXJzb3I6ICdtb3ZlJyxcblx0XHRcdGhhbmRsZTogJy5kcmFnLXNlY3Rpb24nLFxuXHRcdFx0aXRlbXM6ICcubGxtcy1zZWN0aW9uJyxcblx0XHRcdHBsYWNlaG9sZGVyOiAnbGxtcy1zZWN0aW9uIGxsbXMtc29ydGFibGUtcGxhY2Vob2xkZXInLFxuXHRcdH0sXG5cblx0XHRzb3J0YWJsZV9zdGFydDogZnVuY3Rpb24oIGNvbGxlY3Rpb24gKSB7XG5cdFx0XHR0aGlzLiRlbC5hZGRDbGFzcyggJ2RyYWdnaW5nJyApO1xuXHRcdH0sXG5cblx0XHRzb3J0YWJsZV9zdG9wOiBmdW5jdGlvbiggY29sbGVjdGlvbiApIHtcblx0XHRcdHRoaXMuJGVsLnJlbW92ZUNsYXNzKCAnZHJhZ2dpbmcnICk7XG5cdFx0fSxcblxuXHR9LCBSZWNlaXZhYmxlICkgKTtcblxufSApO1xuXG4vKipcbiAqIFNpbmdsZSBDb3Vyc2UgVmlld1xuICogQHNpbmNlICAgIDMuMTMuMFxuICogQHZlcnNpb24gIDMuMTYuMFxuICovXG5kZWZpbmUoICdWaWV3cy9Db3Vyc2UnLFsgJ1ZpZXdzL1NlY3Rpb25MaXN0JywgJ1ZpZXdzL19FZGl0YWJsZScgXSwgZnVuY3Rpb24oIFNlY3Rpb25MaXN0VmlldywgRWRpdGFibGUgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKCBfLmRlZmF1bHRzKCB7XG5cblx0XHQvKipcblx0XHQgKiBHZXQgZGVmYXVsdCBhdHRyaWJ1dGVzIGZvciB0aGUgaHRtbCB3cmFwcGVyIGVsZW1lbnRcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTMuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjEzLjBcblx0XHQgKi9cblx0XHRhdHRyaWJ1dGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdCdkYXRhLWlkJzogdGhpcy5tb2RlbC5pZCxcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhUTUwgZWxlbWVudCBzZWxlY3RvclxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdGVsOiAnI2xsbXMtYnVpbGRlci1tYWluJyxcblxuXHRcdC8qKlxuXHRcdCAqIFdyYXBwZXIgVGFnIG5hbWVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHR0YWdOYW1lOiAnZGl2JyxcblxuXHRcdC8qKlxuXHRcdCAqIEdldCB0aGUgdW5kZXJzY29yZSB0ZW1wbGF0ZVxuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdHRlbXBsYXRlOiB3cC50ZW1wbGF0ZSggJ2xsbXMtY291cnNlLXRlbXBsYXRlJyApLFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6YXRpb24gY2FsbGJhY2sgZnVuYyAocmVuZGVycyB0aGUgZWxlbWVudCBvbiBzY3JlZW4pXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xMy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTMuMFxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdC8vIHRoaXMubGlzdGVuVG8oIHRoaXMubW9kZWwsICdzeW5jJywgdGhpcy5yZW5kZXIgKTtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cblx0XHRcdHRoaXMuc2VjdGlvbkxpc3RWaWV3ID0gbmV3IFNlY3Rpb25MaXN0Vmlldygge1xuXHRcdFx0XHRjb2xsZWN0aW9uOiB0aGlzLm1vZGVsLmdldCggJ3NlY3Rpb25zJyApLFxuXHRcdFx0fSApO1xuXHRcdFx0dGhpcy5zZWN0aW9uTGlzdFZpZXcucmVuZGVyKCk7XG5cdFx0XHQvLyBkcmFnIGFuZCBkcm9wIHN0YXJ0XG5cdFx0XHR0aGlzLnNlY3Rpb25MaXN0Vmlldy5vbiggJ3NvcnRTdGFydCcsIHRoaXMuc2VjdGlvbkxpc3RWaWV3LnNvcnRhYmxlX3N0YXJ0ICk7XG5cdFx0XHQvLyBkcmFnIGFuZCBkcm9wIHN0b3Bcblx0XHRcdHRoaXMuc2VjdGlvbkxpc3RWaWV3Lm9uKCAnc29ydFN0b3AnLCB0aGlzLnNlY3Rpb25MaXN0Vmlldy5zb3J0YWJsZV9zdG9wICk7XG5cdFx0XHQvLyBzZWxlY3Rpb24gY2hhbmdlc1xuXHRcdFx0dGhpcy5zZWN0aW9uTGlzdFZpZXcub24oICdzZWxlY3Rpb25DaGFuZ2VkJywgdGhpcy5hY3RpdmVfc2VjdGlvbl9jaGFuZ2UgKTtcblx0XHRcdC8vIFwic2VsZWN0XCIgYSBzZWN0aW9uIHdoZW4gaXQncyBhZGRlZCB0byB0aGUgY291cnNlXG5cdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLm1vZGVsLmdldCggJ3NlY3Rpb25zJyksICdhZGQnLCB0aGlzLm9uX3NlY3Rpb25fYWRkICk7XG5cblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggJ3NlY3Rpb24tdG9nZ2xlJywgdGhpcy5vbl9zZWN0aW9uX3RvZ2dsZSwgdGhpcyApO1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIub24oICdleHBhbmQtc2VjdGlvbicsIHRoaXMuZXhwYW5kX3NlY3Rpb24sIHRoaXMgKTtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLm9uKCAnbGVzc29uLXNlbGVjdGVkJywgdGhpcy5hY3RpdmVfbGVzc29uX2NoYW5nZSwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENvbXBpbGVzIHRoZSB0ZW1wbGF0ZSBhbmQgcmVuZGVycyB0aGUgdmlld1xuXHRcdCAqIEByZXR1cm4gICBzZWxmIChmb3IgY2hhaW5pbmcpXG5cdFx0ICogQHNpbmNlICAgIDMuMTMuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjEzLjBcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy4kZWwuaHRtbCggdGhpcy50ZW1wbGF0ZSggdGhpcy5tb2RlbCApICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0YWN0aXZlX2xlc3Nvbl9jaGFuZ2U6IGZ1bmN0aW9uKCBtb2RlbCApIHtcblxuXHRcdFx0Ly8gc2V0IHBhcmVudCBzZWN0aW9uIHRvIGJlIGFjdGl2ZVxuXHRcdFx0dmFyIHNlY3Rpb24gPSB0aGlzLm1vZGVsLmdldCggJ3NlY3Rpb25zJyApLmdldCggbW9kZWwuZ2V0KCAncGFyZW50X3NlY3Rpb24nICkgKTtcblx0XHRcdHRoaXMuc2VjdGlvbkxpc3RWaWV3LnNldFNlbGVjdGVkTW9kZWwoIHNlY3Rpb24gKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBXaGVuIGEgc2VjdGlvbiBcInNlbGVjdGlvblwiIGNoYW5nZXMgaW4gdGhlIGxpc3Rcblx0XHQgKiBVcGRhdGUgZWFjaCBzZWN0aW9uIG1vZGVsIHNvIHdlIGNhbiBmaWd1cmUgb3V0IHdoaWNoIG9uZSBpcyBzZWxlY3RlZCBmcm9tIG90aGVyIHZpZXdzXG5cdFx0ICogQHBhcmFtICAgIGFycmF5ICAgY3VycmVudCAgIGFycmF5IG9mIHNlbGVjdGVkIG1vZGVsc1xuXHRcdCAqIEBwYXJhbSAgICBhcnJheSAgIHByZXZpb3VzICBhcnJheSBvZiBwcmV2aW91c2x5IHNlbGVjdGVkIG1vZGVsc1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRhY3RpdmVfc2VjdGlvbl9jaGFuZ2U6IGZ1bmN0aW9uKCBjdXJyZW50LCBwcmV2aW91cyApIHtcblxuXHRcdFx0Xy5lYWNoKCBjdXJyZW50LCBmdW5jdGlvbiggbW9kZWwgKSB7XG5cdFx0XHRcdG1vZGVsLnNldCggJ19zZWxlY3RlZCcsIHRydWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0Xy5lYWNoKCBwcmV2aW91cywgZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0XHRtb2RlbC5zZXQoICdfc2VsZWN0ZWQnLCBmYWxzZSApO1xuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFwiU2VsZWN0c1wiIHRoZSBuZXcgc2VjdGlvbiB3aGVuIGl0J3MgYWRkZWQgdG8gdGhlIGNvdXJzZVxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBtb2RlbCAgU2VjdGlvbiBtb2RlbCB0aGF0J3MganVzdCBiZWVuIGFkZGVkXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdG9uX3NlY3Rpb25fYWRkOiBmdW5jdGlvbiggbW9kZWwgKSB7XG5cblx0XHRcdHRoaXMuc2VjdGlvbkxpc3RWaWV3LnNldFNlbGVjdGVkTW9kZWwoIG1vZGVsICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBleHBhbmRpbmcvY29sbGFwc2luZyBzZWN0aW9uc1xuXHRcdCAqIGlmIGNvbGxhcHNpbmcsIHVuc2VsZWN0LCBpZiBleHBhbmRpbmcsIHNlbGVjdFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBtb2RlbCAgdG9nZ2xlZCBzZWN0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdG9uX3NlY3Rpb25fdG9nZ2xlOiBmdW5jdGlvbiggbW9kZWwgKSB7XG5cblx0XHRcdHZhciBzZWxlY3RlZCA9IG1vZGVsLmdldCggJ19leHBhbmRlZCcgKSA/IFsgbW9kZWwgXSA6IFtdO1xuXHRcdFx0dGhpcy5zZWN0aW9uTGlzdFZpZXcuc2V0U2VsZWN0ZWRNb2RlbHMoIHNlbGVjdGVkICk7XG5cblx0XHR9XG5cblx0fSwgRWRpdGFibGUgKSApO1xuXG59ICk7XG5cbi8qKlxuICogTW9kZWwgc2V0dGluZ3MgZmllbGRzIHZpZXdcbiAqIEBzaW5jZSAgICAzLjE3LjBcbiAqIEB2ZXJzaW9uICAzLjE3LjdcbiAqL1xuZGVmaW5lKCAnVmlld3MvU2V0dGluZ3NGaWVsZHMnLFtdLCBmdW5jdGlvbigpIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoIF8uZGVmYXVsdHMoIHtcblxuXHRcdC8qKlxuXHRcdCAqIERPTSBldmVudHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRldmVudHM6IHtcblx0XHRcdCdjbGljayAubGxtcy1zZXR0aW5ncy1ncm91cC10b2dnbGUnOiAndG9nZ2xlX2dyb3VwJyxcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUHJvY2Vzc2VkIGZpZWxkcyBkYXRhXG5cdFx0ICogQWxsb3dzIGFjY2VzcyBieSBJRCB3aXRob3V0IHRyYXZlcnNpbmcgdGhlIHNjaGVtYVxuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdGZpZWxkczoge30sXG5cblx0XHQvKipcblx0XHQgKiBXcmFwcGVyIFRhZyBuYW1lXG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0dGFnTmFtZTogJ2RpdicsXG5cblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIHVuZGVyc2NvcmUgdGVtcGxhdGVcblx0XHQgKiBAdHlwZSAge1t0eXBlXX1cblx0XHQgKi9cblx0XHR0ZW1wbGF0ZTogd3AudGVtcGxhdGUoICdsbG1zLXNldHRpbmdzLWZpZWxkcy10ZW1wbGF0ZScgKSxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemF0aW9uIGNhbGxiYWNrIGZ1bmMgKHJlbmRlcnMgdGhlIGVsZW1lbnQgb24gc2NyZWVuKVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHQvLyBpbml0aWFsaXplOiBmdW5jdGlvbigpIHt9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0cmlldmUgYW4gYXJyYXkgb2YgYWxsIGVkaXRvciBmaWVsZHMgaW4gYWxsIGdyb3Vwc1xuXHRcdCAqIEByZXR1cm4gICBhcnJheVxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4xXG5cdFx0ICovXG5cdFx0Z2V0X2VkaXRvcl9maWVsZHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIF8uZmlsdGVyKCB0aGlzLmZpZWxkcywgZnVuY3Rpb24oIGZpZWxkICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5pc19lZGl0b3JfZmllbGQoIGZpZWxkLnR5cGUgKTtcblx0XHRcdH0sIHRoaXMgKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHNldHRpbmdzIGdyb3VwIGRhdGEgZnJvbSBhIG1vZGVsXG5cdFx0ICogQHJldHVybiAgIHtbdHlwZV19XG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRnZXRfZ3JvdXBzOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMubW9kZWwuZ2V0X3NldHRpbmdzX2ZpZWxkcygpO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERldGVybWluZSBpZiBhIHNldHRpbmdzIGdyb3VwIGlzIGhpZGRlbiBpbiBsb2NhbFN0b3JhZ2Vcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgZ3JvdXBfaWQgIGlkIG9mIHRoZSBncm91cFxuXHRcdCAqIEByZXR1cm4gICB7Qm9vbGVhbn1cblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdGlzX2dyb3VwX2hpZGRlbjogZnVuY3Rpb24oIGdyb3VwX2lkICkge1xuXG5cdFx0XHR2YXIgaWQgPSAnbGxtcy0nICsgdGhpcy5tb2RlbC5nZXQoICd0eXBlJyApICsgJy1zZXR0aW5ncy1ncm91cC0tJyArIGdyb3VwX2lkO1xuXG5cdFx0XHRpZiAoICd1bmRlZmluZWQnICE9PSB3aW5kb3cubG9jYWxTdG9yYWdlICkge1xuXHRcdFx0XHRyZXR1cm4gKCAnaGlkZGVuJyA9PT0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCBpZCApICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIHN3aXRjaCBhdHRyaWJ1dGUgZm9yIGEgZmllbGQgd2l0aCBzd2l0Y2hlc1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBmaWVsZCAgZmllbGQgZGF0YSBvYmpcblx0XHQgKiBAcmV0dXJuICAgc3RyaW5nXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRnZXRfc3dpdGNoX2F0dHJpYnV0ZTogZnVuY3Rpb24oIGZpZWxkICkge1xuXG5cdFx0XHRyZXR1cm4gZmllbGQuc3dpdGNoX2F0dHJpYnV0ZSA/IGZpZWxkLnN3aXRjaF9hdHRyaWJ1dGUgOiBmaWVsZC5hdHRyaWJ1dGU7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lIGlmIGEgZmllbGQgaGFzIGEgc3dpdGNoXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIHR5cGUgIGZpZWxkIHR5cGUgc3RyaW5nXG5cdFx0ICogQHJldHVybiAgIHtCb29sZWFufVxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4wXG5cdFx0ICovXG5cdFx0aGFzX3N3aXRjaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRyZXR1cm4gKCAtMSAhPT0gdHlwZS5pbmRleE9mKCAnc3dpdGNoJyApICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERldGVybWluZSBpZiBhIGZpZWxkIGlzIGEgZGVmYXVsdCAodGV4dCkgZmllbGRcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgdHlwZSAgZmllbGQgdHlwZSBzdHJpbmdcblx0XHQgKiBAcmV0dXJuICAge0Jvb2xlYW59XG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRpc19kZWZhdWx0X2ZpZWxkOiBmdW5jdGlvbiggdHlwZSApIHtcblxuXHRcdFx0dmFyIHR5cGVzID0gWyAnYXVkaW9fZW1iZWQnLCAnZGF0ZXBpY2tlcicsICdudW1iZXInLCAndGV4dCcsICd2aWRlb19lbWJlZCcgXTtcblx0XHRcdHJldHVybiAoIC0xICE9PSB0eXBlcy5pbmRleE9mKCB0eXBlLnJlcGxhY2UoICdzd2l0Y2gtJywgJycgKSApICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lIGlmIGEgZmllbGQgaXMgYSBXWVNJV1lHIGVkaXRvciBmaWVsZFxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICB0eXBlICBmaWVsZCB0eXBlIHN0cmluZ1xuXHRcdCAqIEByZXR1cm4gICB7Qm9vbGVhbn1cblx0XHQgKiBAc2luY2UgICAgMy4xNy4xXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMVxuXHRcdCAqL1xuXHRcdGlzX2VkaXRvcl9maWVsZDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cblx0XHRcdHZhciB0eXBlcyA9IFsgJ2VkaXRvcicsICdzd2l0Y2gtZWRpdG9yJyBdO1xuXHRcdFx0cmV0dXJuICggLTEgIT09IHR5cGVzLmluZGV4T2YoIHR5cGUucmVwbGFjZSggJ3N3aXRjaC0nLCAnJyApICkgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmUgaWYgYSBzd2l0Y2ggaXMgZW5hYmxlZCBmb3IgYSBmaWVsZFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBmaWVsZCAgZmllbGQgZGF0YSBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAge0Jvb2xlYW59XG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjZcblx0XHQgKi9cblx0XHRpc19zd2l0Y2hfY29uZGl0aW9uX21ldDogZnVuY3Rpb24oIGZpZWxkICkge1xuXG5cdFx0XHRyZXR1cm4gKCBmaWVsZC5zd2l0Y2hfb24gPT09IHRoaXMubW9kZWwuZ2V0KCBmaWVsZC5zd2l0Y2hfYXR0cmlidXRlICkgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDb21waWxlcyB0aGUgdGVtcGxhdGUgYW5kIHJlbmRlcnMgdGhlIHZpZXdcblx0XHQgKiBAcmV0dXJuICAgc2VsZiAoZm9yIGNoYWluaW5nKVxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4xXG5cdFx0ICovXG5cdFx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dGhpcy4kZWwuaHRtbCggdGhpcy50ZW1wbGF0ZSggdGhpcyApICk7XG5cblx0XHRcdC8vIGlmIGVkaXRvcnMgZXhpc3QsIHJlbmRlciB0aGVtXG5cdFx0XHRfLmVhY2goIHRoaXMuZ2V0X2VkaXRvcl9maWVsZHMoKSwgZnVuY3Rpb24oIGZpZWxkICkge1xuXHRcdFx0XHR0aGlzLnJlbmRlcl9lZGl0b3IoIGZpZWxkICk7XG5cdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcnMgYW4gZWRpdG9yIGZpZWxkXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGZpZWxkICBmaWVsZCBkYXRhIG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMVxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjFcblx0XHQgKi9cblx0XHRyZW5kZXJfZWRpdG9yOiBmdW5jdGlvbiggZmllbGQgKSB7XG5cblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0d3AuZWRpdG9yLnJlbW92ZSggZmllbGQuaWQgKTtcblx0XHRcdGZpZWxkLnNldHRpbmdzLnRpbnltY2Uuc2V0dXAgPSBmdW5jdGlvbiggZWRpdG9yICkge1xuXG5cdFx0XHRcdHZhciAkZWQgPSAkKCAnIycgKyBlZGl0b3IuaWQgKSxcblx0XHRcdFx0XHQkcGFyZW50ID0gJGVkLmNsb3Nlc3QoICcubGxtcy1lZGl0YWJsZS1lZGl0b3InICksXG5cdFx0XHRcdFx0JGxhYmVsID0gJHBhcmVudC5maW5kKCAnLmxsbXMtbGFiZWwnICksXG5cdFx0XHRcdFx0cHJvcCA9ICRlZC5hdHRyKCAnZGF0YS1hdHRyaWJ1dGUnIClcblxuXHRcdFx0XHRpZiAoICRsYWJlbC5sZW5ndGggKSB7XG5cdFx0XHRcdFx0JGxhYmVsLnByZXBlbmRUbyggJHBhcmVudC5maW5kKCAnLndwLWVkaXRvci10b29scycgKSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gc2F2ZSBjaGFuZ2VzIHRvIHRoZSBtb2RlbCB2aWEgVmlzdWFsIGVkXG5cdFx0XHRcdGVkaXRvci5vbiggJ2NoYW5nZScsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRzZWxmLm1vZGVsLnNldCggcHJvcCwgd3AuZWRpdG9yLmdldENvbnRlbnQoIGVkaXRvci5pZCApICk7XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBzYXZlIGNoYW5nZXMgdmlhIFRleHQgZWRcblx0XHRcdFx0JGVkLm9uKCAnaW5wdXQnLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0c2VsZi5tb2RlbC5zZXQoIHByb3AsICRlZC52YWwoKSApO1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gdHJpZ2dlciBhbiBpbnB1dCBvbiB0aGUgVGV4dCBlZCB3aGVuIHF1aWNrdGFncyBidXR0b25zIGFyZSBjbGlja2VkXG5cdFx0XHRcdCRwYXJlbnQub24oICdjbGljaycsICcucXVpY2t0YWdzLXRvb2xiYXIgLmVkX2J1dHRvbicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0JGVkLnRyaWdnZXIoICdpbnB1dCcgKTtcblx0XHRcdFx0XHR9LCAxMCApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9O1xuXG5cdFx0XHR3cC5lZGl0b3IuaW5pdGlhbGl6ZSggZmllbGQuaWQsIGZpZWxkLnNldHRpbmdzICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSBIVE1MIGZvciBhIHNlbGVjdCBmaWVsZFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAgICBvcHRpb25zICAgIGZsYXQgb3IgbXVsdGktZGltZW5zaW9uYWwgb3B0aW9ucyBvYmplY3Rcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgYXR0cmlidXRlICBuYW1lIG9mIHRoZSBzZWxlY3QgZmllbGQncyBhdHRyaWJ1dGVcblx0XHQgKiBAcmV0dXJuICAgc3RyaW5nXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjJcblx0XHQgKi9cblx0XHRyZW5kZXJfc2VsZWN0X29wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zLCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRcdHZhciBodG1sID0gJycsXG5cdFx0XHRcdHNlbGVjdGVkID0gdGhpcy5tb2RlbC5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHRmdW5jdGlvbiBvcHRpb25faHRtbCggbGFiZWwsIHZhbCApIHtcblxuXHRcdFx0XHRyZXR1cm4gJzxvcHRpb24gdmFsdWU9XCInICsgdmFsICsgJ1wiJyArIF8uc2VsZWN0ZWQoIHZhbCwgc2VsZWN0ZWQgKSArICc+JyArIGxhYmVsICsgJzwvb3B0aW9uPic7XG5cblx0XHRcdH1cblxuXHRcdFx0Xy5lYWNoKCBvcHRpb25zLCBmdW5jdGlvbiggb3B0aW9uLCBpbmRleCApIHtcblxuXHRcdFx0XHQvLyB0aGlzIHdpbGwgYmUgYW4ga2V5OnZhbCBvYmplY3Rcblx0XHRcdFx0aWYgKCAnc3RyaW5nJyA9PT0gdHlwZW9mIG9wdGlvbiApIHtcblx0XHRcdFx0XHRodG1sICs9IG9wdGlvbl9odG1sKCBvcHRpb24sIGluZGV4ICk7XG5cdFx0XHRcdC8vIGVpdGhlciBvcHRpb24gZ3JvdXAgb3IgYXJyYXkgb2Yga2V5LHZhbCBvYmplY3RzXG5cdFx0XHRcdH0gZWxzZSBpZiAoICdvYmplY3QnID09PSB0eXBlb2Ygb3B0aW9uICkge1xuXHRcdFx0XHRcdC8vIG9wdGlvbiBncm91cFxuXHRcdFx0XHRcdGlmICggb3B0aW9uLmxhYmVsICYmIG9wdGlvbi5vcHRpb25zICkge1xuXHRcdFx0XHRcdFx0aHRtbCArPSAnPG9wdGdyb3VwIGxhYmVsPVwiJyArIG9wdGlvbi5sYWJlbCArICdcIj4nO1xuXHRcdFx0XHRcdFx0aHRtbCArPSB0aGlzLnJlbmRlcl9zZWxlY3Rfb3B0aW9ucyggb3B0aW9uLm9wdGlvbnMsIGF0dHJpYnV0ZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRodG1sICs9IG9wdGlvbl9odG1sKCBvcHRpb24udmFsLCBvcHRpb24ua2V5ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIHRoaXMgKTtcblxuXHRcdFx0cmV0dXJuIGh0bWw7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU2V0dXAgYW5kIGZpbGwgZmllbGRzIHdpdGggZGVmYXVsdCBkYXRhIGJhc2VkIG9uIGZpZWxkIHR5cGVcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgb3JpZ19maWVsZCAgIG9yaWdpbmFsIGZpZWxkIGFzIGRlZmluZWQgaW4gdGhlIHNldHRpbmdzXG5cdFx0ICogQHBhcmFtICAgIGludCAgIGZpZWxkX2luZGV4ICBpbmRleCBvZiB0aGUgZmllbGQgaW4gdGhlIGN1cnJlbnQgcm93XG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy43XG5cdFx0ICovXG5cdFx0c2V0dXBfZmllbGQ6IGZ1bmN0aW9uKCBvcmlnX2ZpZWxkLCBmaWVsZF9pbmRleCApIHtcblxuXHRcdFx0dmFyIGRlZmF1bHRzID0ge1xuXHRcdFx0XHRjbGFzc2VzOiBbXSxcblx0XHRcdFx0aWQ6IF8udW5pcXVlSWQoIG9yaWdfZmllbGQuYXR0cmlidXRlICsgJ18nICksXG5cdFx0XHRcdGlucHV0X3R5cGU6ICd0ZXh0Jyxcblx0XHRcdFx0bGFiZWw6ICcnLFxuXHRcdFx0XHRvcHRpb25zOiB7fSxcblx0XHRcdFx0cGxhY2Vob2xkZXI6ICcnLFxuXHRcdFx0XHR0aXA6ICcnLFxuXHRcdFx0XHR0aXBfcG9zaXRpb246ICd0b3AtcmlnaHQnLFxuXHRcdFx0XHRzZXR0aW5nczoge30sXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBjaGVjayB0aGUgZmllbGQgY29uZGl0aW9uIGlmIHNldFxuXHRcdFx0aWYgKCBvcmlnX2ZpZWxkLmNvbmRpdGlvbiAmJiBmYWxzZSA9PT0gXy5iaW5kKCBvcmlnX2ZpZWxkLmNvbmRpdGlvbiwgdGhpcy5tb2RlbCApKCkgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0c3dpdGNoICggb3JpZ19maWVsZC50eXBlICkge1xuXG5cdFx0XHRcdGNhc2UgJ2F1ZGlvX2VtYmVkJzpcblx0XHRcdFx0XHRkZWZhdWx0cy5jbGFzc2VzLnB1c2goICdsbG1zLWVkaXRhYmxlLWF1ZGlvJyApO1xuXHRcdFx0XHRcdGRlZmF1bHRzLnBsYWNlaG9sZGVyID0gJ2h0dHBzOi8vJztcblx0XHRcdFx0XHRkZWZhdWx0cy50aXAgPSBMTE1TLmwxMG4udHJhbnNsYXRlKCAnVXNlIFNvdW5kQ2xvdWQgb3IgU3BvdGlmeSBhdWRpbyBVUkxTLicgKTtcblx0XHRcdFx0XHRkZWZhdWx0cy5pbnB1dF90eXBlID0gJ3VybCc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2RhdGVwaWNrZXInOlxuXHRcdFx0XHRcdGRlZmF1bHRzLmNsYXNzZXMucHVzaCggJ2xsbXMtZWRpdGFibGUtZGF0ZScgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnZWRpdG9yJzpcblx0XHRcdFx0Y2FzZSAnc3dpdGNoLWVkaXRvcic6XG5cdFx0XHRcdFx0dmFyIG9yaWdfc2V0dGluZ3MgPSBvcmlnX2ZpZWxkLnNldHRpbmdzIHx8IHt9O1xuXHRcdFx0XHRcdGRlZmF1bHRzLnNldHRpbmdzID0gJC5leHRlbmQoIHRydWUsIHdwLmVkaXRvci5nZXREZWZhdWx0U2V0dGluZ3MoKSwge1xuXHRcdFx0XHRcdFx0bWVkaWFCdXR0b25zOiB0cnVlLFxuXHRcdFx0XHRcdFx0dGlueW1jZToge1xuXHRcdFx0XHRcdFx0XHR0b29sYmFyMTogJ2JvbGQsaXRhbGljLHN0cmlrZXRocm91Z2gsYnVsbGlzdCxudW1saXN0LGJsb2NrcXVvdGUsaHIsYWxpZ25sZWZ0LGFsaWduY2VudGVyLGFsaWducmlnaHQsbGluayx1bmxpbmssd3BfYWR2Jyxcblx0XHRcdFx0XHRcdFx0dG9vbGJhcjI6ICdmb3JtYXRzZWxlY3QsdW5kZXJsaW5lLGFsaWduanVzdGlmeSxmb3JlY29sb3IscGFzdGV0ZXh0LHJlbW92ZWZvcm1hdCxjaGFybWFwLG91dGRlbnQsaW5kZW50LHVuZG8scmVkbyx3cF9oZWxwJyxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBvcmlnX3NldHRpbmdzICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ251bWJlcic6XG5cdFx0XHRcdFx0ZGVmYXVsdHMuaW5wdXRfdHlwZSA9ICdudW1iZXInO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdwZXJtYWxpbmsnOlxuXHRcdFx0XHRcdGRlZmF1bHRzLmxhYmVsID0gTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1Blcm1hbGluaycgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndmlkZW9fZW1iZWQnOlxuXHRcdFx0XHRcdGRlZmF1bHRzLmNsYXNzZXMucHVzaCggJ2xsbXMtZWRpdGFibGUtdmlkZW8nICk7XG5cdFx0XHRcdFx0ZGVmYXVsdHMucGxhY2Vob2xkZXIgPSAnaHR0cHM6Ly8nO1xuXHRcdFx0XHRcdGRlZmF1bHRzLnRpcCA9IExMTVMubDEwbi50cmFuc2xhdGUoICdVc2UgWW91VHViZSwgVmltZW8sIG9yIFdpc3RpYSB2aWRlbyBVUkxTLicgKTtcblx0XHRcdFx0XHRkZWZhdWx0cy5pbnB1dF90eXBlID0gJ3VybCc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5oYXNfc3dpdGNoKCBvcmlnX2ZpZWxkLnR5cGUgKSApIHtcblx0XHRcdFx0ZGVmYXVsdHMuc3dpdGNoX29uID0gJ3llcyc7XG5cdFx0XHRcdGRlZmF1bHRzLnN3aXRjaF9vZmYgPSAnbm8nO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZmllbGQgPSBfLmRlZmF1bHRzKCBfLmRlZXBDbG9uZSggb3JpZ19maWVsZCApLCBkZWZhdWx0cyApO1xuXG5cdFx0XHQvLyBpZiBvcHRpb25zIGlzIGEgZnVuY3Rpb24gcnVuIGl0XG5cdFx0XHRpZiAoIF8uaXNGdW5jdGlvbiggZmllbGQub3B0aW9ucyApICkge1xuXHRcdFx0XHRmaWVsZC5vcHRpb25zID0gXy5iaW5kKCBmaWVsZC5vcHRpb25zLCB0aGlzLm1vZGVsICkoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgaXQncyBhIHJhZGlvIGZpZWxkIG9wdGlvbnMgdmFsdWVzIGNhbiBiZSBzdWJtaXR0ZWQgYXMgaW1hZ2VzXG5cdFx0XHQvLyB0aGlzIHdpbGwgdHJhbnNmb3JtIHRob3NlIGltYWdlcyBpbnRvIDxpbWc+IGh0bWxcblx0XHRcdGlmICggLTEgIT09IFsgJ3JhZGlvJywgJ3N3aXRjaC1yYWRpbycgXS5pbmRleE9mKCBvcmlnX2ZpZWxkLnR5cGUgKSApIHtcblxuXHRcdFx0XHR2YXIgaGFzX2ltYWdlcyA9IGZhbHNlO1xuXHRcdFx0XHRfLmVhY2goIG9yaWdfZmllbGQub3B0aW9ucywgZnVuY3Rpb24oIHZhbCwga2V5ICkge1xuXHRcdFx0XHRcdGlmICggLTEgIT09IHZhbC5pbmRleE9mKCAnLnBuZycgKSB8fCAtMSAhPT0gdmFsLmluZGV4T2YoICcuanBnJyApICkge1xuXHRcdFx0XHRcdFx0ZmllbGQub3B0aW9uc1trZXldID0gJzxzcGFuPjxpbWcgc3JjPVwiJyArIHZhbCArICdcIj48L3NwYW4+Jztcblx0XHRcdFx0XHRcdGhhc19pbWFnZXMgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRpZiAoIGhhc19pbWFnZXMgKSB7XG5cdFx0XHRcdFx0ZmllbGQuY2xhc3Nlcy5wdXNoKCAnaGFzLWltYWdlcycgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGFkZCB0b29sdGlwIHBvc2l0aW9uIGNsYXNzZXNcblx0XHRcdGlmICggZmllbGQudGlwICkge1xuXHRcdFx0XHRmaWVsZC5jbGFzc2VzLnB1c2goICd0aXAtLScgKyBmaWVsZC50aXBfcG9zaXRpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gdHJhbnNmb3JtIGNsYXNzZXMgYXJyYXkgdG8gYSBjc3MgY2xhc3Mgc3RyaW5nXG5cdFx0XHRpZiAoIGZpZWxkLmNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0XHRmaWVsZC5jbGFzc2VzID0gJyAnICsgZmllbGQuY2xhc3Nlcy5qb2luKCAnICcgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5maWVsZHNbIGZpZWxkLmlkIF0gPSBmaWVsZDtcblxuXHRcdFx0cmV0dXJuIGZpZWxkO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERldGVybWluZSBpZiB0b2dnbGluZyBhIHN3aXRjaCBzZWxlY3Qgc2hvdWxkIHJlcmVuZGVyIHRoZSB2aWV3XG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIGZpZWxkX3R5cGUgIGZpZWxkIHR5cGUgc3RyaW5nXG5cdFx0ICogQHJldHVybiAgIGJvb2xlYW5cblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdHNob3VsZF9yZXJlbmRlcl9vbl90b2dnbGU6IGZ1bmN0aW9uKCBmaWVsZF90eXBlICkge1xuXG5cdFx0XHRyZXR1cm4gKCAtMSAhPT0gZmllbGRfdHlwZS5pbmRleE9mKCAnc3dpdGNoLScgKSApID8gJ3llcycgOiAnbm8nO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsaWNrIGV2ZW50IGZvciB0b2dnbGluZyB2aXNpYmlsaXR5IG9mIHNldHRpbmdzIGdyb3Vwc1xuXHRcdCAqIElmIGxvY2FsU3RvcmFnZSBpcyBhdmFpbGFibGUsIHBlcnNpc3Qgc3RhdGVcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgIGpzIGV2ZW50IG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHR0b2dnbGVfZ3JvdXA6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dmFyICRlbCA9ICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSxcblx0XHRcdFx0JGdyb3VwID0gJGVsLmNsb3Nlc3QoICcubGxtcy1tb2RlbC1zZXR0aW5ncycgKTtcblxuXHRcdFx0JGdyb3VwLnRvZ2dsZUNsYXNzKCAnaGlkZGVuJyApO1xuXG5cdFx0XHRpZiAoICd1bmRlZmluZWQnICE9PSB3aW5kb3cubG9jYWxTdG9yYWdlICkge1xuXG5cdFx0XHRcdHZhciBpZCA9ICRncm91cC5hdHRyKCAnaWQnICk7XG5cdFx0XHRcdGlmICggJGdyb3VwLmhhc0NsYXNzKCAnaGlkZGVuJyApICkge1xuXHRcdFx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSggaWQsICdoaWRkZW4nICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCBpZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0fSApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBMZXNzb24gRWRpdG9yIChTaWRlYmFyKSBWaWV3XG4gKiBAc2luY2UgICAgMy4xNy4wXG4gKiBAdmVyc2lvbiAgMy4xNy4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL0xlc3NvbkVkaXRvcicsW1xuXHRcdCdWaWV3cy9fRGV0YWNoYWJsZScsXG5cdFx0J1ZpZXdzL19FZGl0YWJsZScsXG5cdFx0J1ZpZXdzL19UcmFzaGFibGUnLFxuXHRcdCdWaWV3cy9fU3VidmlldycsXG5cdFx0J1ZpZXdzL1NldHRpbmdzRmllbGRzJ1xuXHRdLCBmdW5jdGlvbihcblx0XHREZXRhY2hhYmxlLFxuXHRcdEVkaXRhYmxlLFxuXHRcdFRyYXNoYWJsZSxcblx0XHRTdWJ2aWV3LFxuXHRcdFNldHRpbmdzRmllbGRzXG5cdCkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5WaWV3LmV4dGVuZCggXy5kZWZhdWx0cygge1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCB2aWV3IHN0YXRlXG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0c3RhdGU6ICdkZWZhdWx0JyxcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgU3Vidmlld3Ncblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHR2aWV3czoge1xuXHRcdFx0c2V0dGluZ3M6IHtcblx0XHRcdFx0Y2xhc3M6IFNldHRpbmdzRmllbGRzLFxuXHRcdFx0XHRpbnN0YW5jZTogbnVsbCxcblx0XHRcdFx0c3RhdGU6ICdkZWZhdWx0Jyxcblx0XHRcdH0sXG5cdFx0fSxcblxuXHRcdGVsOiAnI2xsbXMtZWRpdG9yLWxlc3NvbicsXG5cblx0XHQvKipcblx0XHQgKiBFdmVudHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRldmVudHM6IF8uZGVmYXVsdHMoIHt9LCBEZXRhY2hhYmxlLmV2ZW50cywgRWRpdGFibGUuZXZlbnRzLCBUcmFzaGFibGUuZXZlbnRzICksXG5cblx0XHQvKipcblx0XHQgKiBUZW1wbGF0ZSBmdW5jdGlvblxuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdHRlbXBsYXRlOiB3cC50ZW1wbGF0ZSggJ2xsbXMtbGVzc29uLXNldHRpbmdzLXRlbXBsYXRlJyApLFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBkYXRhICBwYXJlbnQgdGVtcGxhdGUgZGF0YVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0dGhpcy5tb2RlbCA9IGRhdGEubGVzc29uO1xuXG5cdFx0XHR2YXIgY2hhbmdlX2V2ZW50cyA9IFtcblx0XHRcdFx0J2NoYW5nZTpkYXRlX2F2YWlsYWJsZScsXG5cdFx0XHRcdCdjaGFuZ2U6ZHJpcF9tZXRob2QnLFxuXHRcdFx0XHQnY2hhbmdlOnRpbWVfYXZhaWxhYmxlJyxcblx0XHRcdF07XG5cdFx0XHRfLmVhY2goIGNoYW5nZV9ldmVudHMsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5tb2RlbCwgZXZlbnQsIHRoaXMucmVuZGVyICk7XG5cdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdC8vIHdoZW4gdGhlIFwiaGFzX3ByZXJlcXVpc2l0ZVwiIGF0dHIgaXMgdG9nZ2xlZCBPTlxuXHRcdFx0Ly8gdHJpZ2dlciB0aGUgcHJlcmVxIHNlbGVjdCBvYmplY3QgdG8gc2V0IHRoZSBkZWZhdWx0IChmaXJzdCBhdmFpbGFibGUpIHByZXJlcSBmb3IgdGhlIGxlc3NvblxuXHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5tb2RlbCwgJ2NoYW5nZTpoYXNfcHJlcmVxdWlzaXRlJywgZnVuY3Rpb24oIGxlc3NvbiwgdmFsICkge1xuXHRcdFx0XHRpZiAoICd5ZXMnID09PSB2YWwgKSB7XG5cdFx0XHRcdFx0dGhpcy4kZWwuZmluZCggJ3NlbGVjdFtuYW1lPVwicHJlcmVxdWlzaXRlXCJdJyApLnRyaWdnZXIoICdjaGFuZ2UnICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXIgdGhlIHZpZXdcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLnRlbXBsYXRlKCB0aGlzLm1vZGVsICkgKTtcblxuXHRcdFx0dGhpcy5yZW1vdmVfc3VidmlldyggJ3NldHRpbmdzJyApO1xuXG5cdFx0XHR0aGlzLnJlbmRlcl9zdWJ2aWV3KCAnc2V0dGluZ3MnLCB7XG5cdFx0XHRcdGVsOiAnI2xsbXMtbGVzc29uLXNldHRpbmdzLWZpZWxkcycsXG5cdFx0XHRcdG1vZGVsOiB0aGlzLm1vZGVsLFxuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmluaXRfZGF0ZXBpY2tlcnMoKTtcblx0XHRcdHRoaXMuaW5pdF9zZWxlY3RzKCk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHR9LCBEZXRhY2hhYmxlLCBFZGl0YWJsZSwgVHJhc2hhYmxlLCBTdWJ2aWV3LCBTZXR0aW5nc0ZpZWxkcyApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBTaW5nbGUgUXVpeiBWaWV3XG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL1BvcG92ZXInLFtdLCBmdW5jdGlvbigpIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoIHtcblxuXHRcdGRlZmF1bHRzOiB7XG5cdFx0XHRwbGFjZW1lbnQ6ICdhdXRvJyxcblx0XHRcdC8vIGNvbnRhaW5lcjogZG9jdW1lbnQuYm9keSxcblx0XHRcdHdpZHRoOiAnYXV0bycsXG5cdFx0XHR0cmlnZ2VyOiAnbWFudWFsJyxcblx0XHRcdHN0eWxlOiAnbGlnaHQnLFxuXHRcdFx0YW5pbWF0aW9uOiAncG9wJyxcblx0XHRcdHRpdGxlOiAnJyxcblx0XHRcdGNvbnRlbnQ6ICcnLFxuXHRcdFx0Y2xvc2VhYmxlOiBmYWxzZSxcblx0XHRcdGJhY2tkcm9wOiBmYWxzZSxcblx0XHRcdG9uU2hvdzogZnVuY3Rpb24oICRlbCApIHt9LFxuXHRcdFx0b25IaWRlOiBmdW5jdGlvbiggJGVsICkge30sXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFdyYXBwZXIgVGFnIG5hbWVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHR0YWdOYW1lOiAnZGl2JyxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemF0aW9uIGNhbGxiYWNrIGZ1bmMgKHJlbmRlcnMgdGhlIGVsZW1lbnQgb24gc2NyZWVuKVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTQuMVxuXHRcdCAqIEB2ZXJzaW9uICAzLjE0LjFcblx0XHQgKi9cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLiRlbC5sZW5ndGggKSB7XG5cdFx0XHRcdHRoaXMuZGVmYXVsdHMuY29udGFpbmVyID0gdGhpcy4kZWwucGFyZW50KCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYXJncyA9IF8uZGVmYXVsdHMoIGRhdGEuYXJncywgdGhpcy5kZWZhdWx0cyApO1xuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDb21waWxlcyB0aGUgdGVtcGxhdGUgYW5kIHJlbmRlcnMgdGhlIHZpZXdcblx0XHQgKiBAcmV0dXJuICAgc2VsZiAoZm9yIGNoYWluaW5nKVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dGhpcy4kZWwud2VidWlQb3BvdmVyKCB0aGlzLmFyZ3MgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhpZGUgdGhlIHBvcG92ZXJcblx0XHQgKiBAcmV0dXJuICAgc2VsZiAoZm9yIGNoYWluaW5nKVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMlxuXHRcdCAqL1xuXHRcdGhpZGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC53ZWJ1aVBvcG92ZXIoICdoaWRlJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU2hvdyB0aGUgcG9wb3ZlclxuXHRcdCAqIEByZXR1cm4gICBzZWxmIChmb3IgY2hhaW5pbmcpXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjEyXG5cdFx0ICovXG5cdFx0c2hvdzogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHRoaXMuJGVsLndlYnVpUG9wb3ZlciggJ3Nob3cnICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH0sXG5cblx0fSApO1xuXG59ICk7XG5cbi8qKlxuICogUG9zdCBQb3BvdmVyIFNlcmFjaCBjb250ZW50IFZpZXdcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE3LjBcbiAqL1xuZGVmaW5lKCAnVmlld3MvUG9zdFNlYXJjaCcsW10sIGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5WaWV3LmV4dGVuZCgge1xuXG5cdFx0LyoqXG5cdFx0ICogRE9NIEV2ZW50c1xuXHRcdCAqIEB0eXBlICAgICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGV2ZW50czoge1xuXHRcdFx0J3NlbGVjdDI6c2VsZWN0JzogJ2FkZF9wb3N0Jyxcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV3JhcHBlciBUYWcgbmFtZVxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRhZ05hbWU6ICdzZWxlY3QnLFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXJcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZGF0YSAgY3VzdG9taXplIHRoZSBzZWFyY2ggYm94IHdpdGggZGF0YVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMTJcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4xMlxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHR0aGlzLnBvc3RfdHlwZSA9IGRhdGEucG9zdF90eXBlO1xuXHRcdFx0dGhpcy5zZWFyY2hpbmdfbWVzc2FnZSA9IGRhdGEuc2VhcmNoaW5nX21lc3NhZ2UgfHwgTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1NlYXJjaGluZy4uLicgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZWxlY3QgZXZlbnQsIGFkZHMgdGhlIGV4aXN0aW5nIGxlc3NvbiB0byB0aGUgY291cnNlXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBzZWxlY3QyOnNlbGVjdCBldmVudCBvYmplY3Rcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdGFkZF9wb3N0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdHZhciB0eXBlID0gdGhpcy4kZWwuYXR0ciggJ2RhdGEtcG9zdC10eXBlJyApO1xuXG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggdHlwZS5yZXBsYWNlKCAnbGxtc18nLCAnJyApICsgJy1zZWFyY2gtc2VsZWN0JywgZXZlbnQucGFyYW1zLmRhdGEsIGV2ZW50ICk7XG5cdFx0XHR0aGlzLiRlbC52YWwoIG51bGwgKS50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlciB0aGUgc2VjdGlvblxuXHRcdCAqIEluaXRhbGl6ZXMgYSBuZXcgY29sbGVjdGlvbiBhbmQgdmlld3MgZm9yIGFsbCBsZXNzb25zIGluIHRoZSBzZWN0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMTJcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLiRlbC5sbG1zU2VsZWN0Migge1xuXHRcdFx0XHRcdGFqYXg6IHtcblx0XHRcdFx0XHRcdGRhdGFUeXBlOiAnSlNPTicsXG5cdFx0XHRcdFx0XHRkZWxheTogMjUwLFxuXHRcdFx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRcdFx0XHR1cmw6IHdpbmRvdy5hamF4dXJsLFxuXHRcdFx0XHRcdFx0ZGF0YTogZnVuY3Rpb24oIHBhcmFtcyApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRhY3Rpb246ICdsbG1zX2J1aWxkZXInLFxuXHRcdFx0XHRcdFx0XHRcdGFjdGlvbl90eXBlOiAnc2VhcmNoJyxcblx0XHRcdFx0XHRcdFx0XHRjb3Vyc2VfaWQ6IHdpbmRvdy5sbG1zX2J1aWxkZXIuY291cnNlLmlkLFxuXHRcdFx0XHRcdFx0XHRcdHBvc3RfdHlwZTogc2VsZi5wb3N0X3R5cGUsXG5cdFx0XHRcdFx0XHRcdFx0dGVybTogcGFyYW1zLnRlcm0sXG5cdFx0XHRcdFx0XHRcdFx0cGFnZTogcGFyYW1zLnBhZ2UsXG5cdFx0XHRcdFx0XHRcdFx0X2FqYXhfbm9uY2U6IHdwX2FqYXhfZGF0YS5ub25jZSxcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHQvLyBlcnJvcjogZnVuY3Rpb24oIHhociwgc3RhdHVzLCBlcnJvciApIHtcblx0XHRcdFx0XHRcdC8vIFx0Y29uc29sZS5sb2coIHN0YXR1cywgZXJyb3IgKTtcblx0XHRcdFx0XHRcdC8vIH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRkcm9wZG93blBhcmVudDogJCggJy53cmFwLmxpZnRlcmxtcy5sbG1zLWJ1aWxkZXInICksXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgZXNjYXBlIGh0bWwgZnJvbSByZW5kZXJfcmVzdWx0XG5cdFx0XHRcdFx0ZXNjYXBlTWFya3VwOiBmdW5jdGlvbiggbWFya3VwICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG1hcmt1cDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyOiBzZWxmLnNlYXJjaGluZ19tZXNzYWdlLFxuXHRcdFx0XHRcdHRlbXBsYXRlUmVzdWx0OiBzZWxmLnJlbmRlcl9yZXN1bHQsXG5cdFx0XHRcdFx0d2lkdGg6ICcxMDAlJyxcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzZWxmLiRlbC5hdHRyKCAnZGF0YS1wb3N0LXR5cGUnLCBzZWxmLnBvc3RfdHlwZSApO1xuXHRcdFx0fSwgMCApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyIGEgbmljZXIgVUkgZm9yIGVhY2ggc2VhcmNoIHJlc3VsdCBpbiB0aGUgaW4gdGhlIFNlbGVjdDIgc2VhcmNoIHJlc3VsdHNcblx0XHQgKiBAcGFyYW0gICAgb2JqZWN0ICAgcmVzICByZXN1bHQgZGF0YVxuXHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMTJcblx0XHQgKi9cblx0XHRyZW5kZXJfcmVzdWx0OiBmdW5jdGlvbiggcmVzICkge1xuXG5cdFx0XHR2YXIgJGh0bWwgPSAkKCAnPGRpdiBjbGFzcz1cImxsbXMtZXhpc3RpbmctbGVzc29uLXJlc3VsdFwiIC8+JyApO1xuXG5cdFx0XHRpZiAoIHJlcy5sb2FkaW5nICkge1xuXHRcdFx0XHRyZXR1cm4gJGh0bWwuYXBwZW5kKCByZXMudGV4dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgJHNpZGUgPSAkKCAnPGFzaWRlIGNsYXNzPVwibGxtcy1leGlzdGluZy1hY3Rpb25cIiAvPicgKSxcblx0XHRcdFx0JG1haW4gPSAkKCAnPGRpdiBjbGFzcz1cImxsbXMtZXhpc3RpbmctaW5mb1wiIC8+JyApO1xuXHRcdFx0XHRpY29uID0gKCAnYXR0YWNoJyA9PT0gcmVzLmFjdGlvbiApID8gJ3BhcGVyY2xpcCcgOiAnY2xvbmUnLFxuXHRcdFx0XHR0ZXh0ID0gKCAnYXR0YWNoJyA9PT0gcmVzLmFjdGlvbiApID8gTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0F0dGFjaCcgKSA6IExMTVMubDEwbi50cmFuc2xhdGUoICdDbG9uZScgKTtcblxuXHRcdFx0JHNpZGUuYXBwZW5kKCAnPGkgY2xhc3M9XCJmYSBmYS0nICsgaWNvbiArICdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PHNtYWxsPicgKyB0ZXh0ICsgJzwvc21hbGw+JyApO1xuXG5cdFx0XHQkbWFpbi5hcHBlbmQoICc8aDQ+JyArIHJlcy5kYXRhLnRpdGxlICsgJzwvaDQ+JyApO1xuXHRcdFx0JG1haW4uYXBwZW5kKCAnPGg1PicgKyBMTE1TLmwxMG4udHJhbnNsYXRlKCAnSUQnICkgKyAnOiA8ZW0+JyArIHJlcy5kYXRhLmlkICsgJzwvZW0+PC9oNT4nICk7XG5cblx0XHRcdF8uZWFjaCggcmVzLnBhcmVudHMsIGZ1bmN0aW9uKCBwYXJlbnQgKSB7XG5cdFx0XHRcdCRtYWluLmFwcGVuZCggJzxoNT4nICsgcGFyZW50ICsgJzwvZW0+PC9oNT4nICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybiAkaHRtbC5hcHBlbmQoICRzaWRlICkuYXBwZW5kKCAkbWFpbiApO1xuXG5cdFx0fSxcblxuXHR9ICk7XG5cbn0gKTtcblxuLyoqXG4gKiBTaW5nbGUgTGVzc29uIFZpZXdcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE2LjBcbiAqL1xuZGVmaW5lKCAnVmlld3MvUXVlc3Rpb25UeXBlJyxbIF0sIGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5WaWV3LmV4dGVuZCgge1xuXG5cdFx0LyoqXG5cdFx0ICogSFRNTCBjbGFzcyBuYW1lc1xuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdGNsYXNzTmFtZTogJ2xsbXMtcXVlc3Rpb24tdHlwZScsXG5cblx0XHRldmVudHM6IHtcblx0XHRcdCdjbGljayAubGxtcy1hZGQtcXVlc3Rpb24nOiAnYWRkX3F1ZXN0aW9uJyxcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSFRNTCBlbGVtZW50IHdyYXBwZXIgSUQgYXR0cmlidXRlXG5cdFx0ICogQHJldHVybiAgIHN0cmluZ1xuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICdsbG1zLXF1ZXN0aW9uLXR5cGUtJyArIHRoaXMubW9kZWwuaWQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFdyYXBwZXIgVGFnIG5hbWVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHR0YWdOYW1lOiAnbGknLFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSB1bmRlcnNjb3JlIHRlbXBsYXRlXG5cdFx0ICogQHR5cGUgIHtbdHlwZV19XG5cdFx0ICovXG5cdFx0dGVtcGxhdGU6IHdwLnRlbXBsYXRlKCAnbGxtcy1xdWVzdGlvbi10eXBlLXRlbXBsYXRlJyApLFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6YXRpb24gY2FsbGJhY2sgZnVuYyAocmVuZGVycyB0aGUgZWxlbWVudCBvbiBzY3JlZW4pXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENvbXBpbGVzIHRoZSB0ZW1wbGF0ZSBhbmQgcmVuZGVycyB0aGUgdmlld1xuXHRcdCAqIEByZXR1cm4gICBzZWxmIChmb3IgY2hhaW5pbmcpXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy4kZWwuaHRtbCggdGhpcy50ZW1wbGF0ZSggdGhpcy5tb2RlbCApICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQWRkIGEgcXVlc3Rpb24gb2YgdGhlIHNlbGVjdGVkIHR5cGUgdG8gdGhlIGN1cnJlbnQgcXVpelxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0YWRkX3F1ZXN0aW9uOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dGhpcy5xdWl6LmFkZF9xdWVzdGlvbigge1xuXHRcdFx0XHRfZXhwYW5kZWQ6IHRydWUsXG5cdFx0XHRcdGNob2ljZXM6IHRoaXMubW9kZWwuZ2V0KCAnZGVmYXVsdF9jaG9pY2VzJyApID8gdGhpcy5tb2RlbC5nZXQoICdkZWZhdWx0X2Nob2ljZXMnICkgOiBudWxsLFxuXHRcdFx0XHRxdWVzdGlvbl90eXBlOiB0aGlzLm1vZGVsLFxuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLnF1aXoudHJpZ2dlciggJ25ldy1xdWVzdGlvbi1hZGRlZCcgKTtcblxuXHRcdH0sXG5cblx0XHQvLyBmaWx0ZXI6IGZ1bmN0aW9uKCB0ZXJtICkge1xuXG5cdFx0Ly8gXHR2YXIgd29yZHMgPSB0aGlzLm1vZGVsLmdldF9rZXl3b3JkcygpLm1hcCggZnVuY3Rpb24oIHdvcmQgKSB7XG5cdFx0Ly8gXHRcdHJldHVybiB3b3JkLnRvTG93ZXJDYXNlKCk7XG5cdFx0Ly8gXHR9ICk7XG5cblx0XHQvLyBcdHRlcm0gPSB0ZXJtLnRvTG93ZXJDYXNlKCk7XG5cblx0XHQvLyBcdGlmICggLTEgPT09IHdvcmRzLmluZGV4T2YoIHRlcm0gKSApIHtcblx0XHQvLyBcdFx0dGhpcy4kZWwuYWRkQ2xhc3MoICdmaWx0ZXJlZCcgKTtcblx0XHQvLyBcdH0gZWxzZSB7XG5cdFx0Ly8gXHRcdHRoaXMuJGVsLnJlbW92ZUNsYXNzKCAnZmlsdGVyZWQnICk7XG5cdFx0Ly8gXHR9XG5cblx0XHQvLyB9LFxuXG5cdFx0Ly8gY2xlYXJfZmlsdGVyOiBmdW5jdGlvbigpIHtcblx0XHQvLyBcdHRoaXMuJGVsLnJlbW92ZUNsYXNzKCAnZmlsdGVyZWQnICk7XG5cdFx0Ly8gfVxuXG5cdH0gKTtcblxufSApO1xuXG4vKipcbiAqIFF1aXogcXVlc3Rpb24gYmFuayB2aWV3XG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL1F1ZXN0aW9uQmFuaycsWyAnVmlld3MvUXVlc3Rpb25UeXBlJyBdLCBmdW5jdGlvbiggUXVlc3Rpb25WaWV3ICkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5Db2xsZWN0aW9uVmlldy5leHRlbmQoIHtcblxuXHRcdGNsYXNzTmFtZTogJ2xsbXMtcXVlc3Rpb24nLFxuXG5cdFx0LyoqXG5cdFx0ICogUGFyZW50IGVsZW1lbnRcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHRlbDogJyNsbG1zLXF1ZXN0aW9uLWJhbmsnLFxuXG5cdFx0LyoqXG5cdFx0ICogU2VjdGlvbiBtb2RlbFxuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdG1vZGVsVmlldzogUXVlc3Rpb25WaWV3LFxuXG5cdFx0LyoqXG5cdFx0ICogQXJlIHNlY3Rpb25zIHNlbGVjdGFibGU/XG5cdFx0ICogQHR5cGUgIHtCb29sfVxuXHRcdCAqL1xuXHRcdHNlbGVjdGFibGU6IGZhbHNlLFxuXG5cdFx0LyoqXG5cdFx0ICogQXJlIHNlY3Rpb25zIHNvcnRhYmxlP1xuXHRcdCAqIEB0eXBlICB7Qm9vbH1cblx0XHQgKi9cblx0XHRzb3J0YWJsZTogZmFsc2UsXG5cblx0fSApO1xuXG59ICk7XG5cbi8qKlxuICogU2luZ2xlIFF1ZXN0aW9uIENob2ljZSBWaWV3XG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL1F1ZXN0aW9uQ2hvaWNlJyxbICdWaWV3cy9fRWRpdGFibGUnLCBdLCBmdW5jdGlvbiggRWRpdGFibGUgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKCBfLmRlZmF1bHRzKCB7XG5cblx0XHQvKipcblx0XHQgKiBIVE1MIGNsYXNzIG5hbWVzXG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0Y2xhc3NOYW1lOiAnbGxtcy1xdWVzdGlvbi1jaG9pY2UnLFxuXG5cdFx0ZXZlbnRzOiBfLmRlZmF1bHRzKCB7XG5cdFx0XHQnY2hhbmdlIGlucHV0W25hbWU9XCJjb3JyZWN0XCJdJzogJ3RvZ2dsZV9jb3JyZWN0Jyxcblx0XHRcdCdjbGljayAubGxtcy1hY3Rpb24taWNvbltocmVmPVwiI2xsbXMtYWRkLWNob2ljZVwiXSc6ICdhZGRfY2hvaWNlJyxcblx0XHRcdCdjbGljayAubGxtcy1hY3Rpb24taWNvbltocmVmPVwiI2xsbXMtZGVsLWNob2ljZVwiXSc6ICdkZWxfY2hvaWNlJyxcblx0XHR9LCBFZGl0YWJsZS5ldmVudHMgKSxcblxuXHRcdC8qKlxuXHRcdCAqIEhUTUwgZWxlbWVudCB3cmFwcGVyIElEIGF0dHJpYnV0ZVxuXHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAnbGxtcy1xdWVzdGlvbi1jaG9pY2UtJyArIHRoaXMubW9kZWwuaWQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFdyYXBwZXIgVGFnIG5hbWVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHR0YWdOYW1lOiAnbGknLFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSB1bmRlcnNjb3JlIHRlbXBsYXRlXG5cdFx0ICogQHR5cGUgIHtbdHlwZV19XG5cdFx0ICovXG5cdFx0dGVtcGxhdGU6IHdwLnRlbXBsYXRlKCAnbGxtcy1xdWVzdGlvbi1jaG9pY2UtdGVtcGxhdGUnICksXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXphdGlvbiBjYWxsYmFjayBmdW5jIChyZW5kZXJzIHRoZSBlbGVtZW50IG9uIHNjcmVlbilcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE0LjFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNC4xXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cblx0XHRcdHRoaXMubGlzdGVuVG8oIHRoaXMubW9kZWwuY29sbGVjdGlvbiwgJ2FkZCcsIHRoaXMubWF5YmVfZGlzYWJsZV9idXR0b25zICk7XG5cdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLm1vZGVsLCAnY2hhbmdlJywgdGhpcy5yZW5kZXIgKTtcblxuXHRcdFx0aWYgKCAnaW1hZ2UnID09PSB0aGlzLm1vZGVsLmdldCggJ2Nob2ljZV90eXBlJyApICkge1xuXHRcdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLm1vZGVsLmdldCggJ2Nob2ljZScgKSwgJ2NoYW5nZScsIHRoaXMucmVuZGVyICk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ29tcGlsZXMgdGhlIHRlbXBsYXRlIGFuZCByZW5kZXJzIHRoZSB2aWV3XG5cdFx0ICogQHJldHVybiAgIHNlbGYgKGZvciBjaGFpbmluZylcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLnRlbXBsYXRlKCB0aGlzLm1vZGVsICkgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBBZGQgYSBuZXcgY2hvaWNlIHRvIHRoZSBjdXJyZW50IGNob2ljZSBsaXN0XG5cdFx0ICogQWRkcyAqYWZ0ZXIqIHRoZSBjbGlja2VkIGNob2ljZVxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAgSlMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGFkZF9jaG9pY2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR2YXIgaW5kZXggPSB0aGlzLm1vZGVsLmNvbGxlY3Rpb24uaW5kZXhPZiggdGhpcy5tb2RlbCApO1xuXHRcdFx0dGhpcy5tb2RlbC5jb2xsZWN0aW9uLnBhcmVudC5hZGRfY2hvaWNlKCB7fSwge1xuXHRcdFx0XHRhdDogaW5kZXggKyAxLFxuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERlbGV0ZSB0aGUgY2hvaWNlIGZyb20gdGhlIGNob2ljZSBsaXN0ICYgZW5zdXJlIHRoZXJlJ3MgYXQgbGVhc3Qgb25lIGNvcnJlY3QgY2hvaWNlXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmpcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0ZGVsX2Nob2ljZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdtb2RlbC10cmFzaGVkJywgdGhpcy5tb2RlbCApO1xuXHRcdFx0dGhpcy5tb2RlbC5jb2xsZWN0aW9uLnJlbW92ZSggdGhpcy5tb2RlbCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gdGhlIGNvcnJlY3QgYW5zd2VyIGlucHV0IGNoYW5nZXMgc3luYyBzdGF0dXMgdG8gbW9kZWxcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0dG9nZ2xlX2NvcnJlY3Q6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgY29ycmVjdCA9IHRoaXMuJGVsLmZpbmQoICdpbnB1dFtuYW1lPVwiY29ycmVjdFwiXScgKS5pcyggJzpjaGVja2VkJyApO1xuXHRcdFx0dGhpcy5tb2RlbC5zZXQoICdjb3JyZWN0JywgY29ycmVjdCApO1xuXHRcdFx0dGhpcy5tb2RlbC5jb2xsZWN0aW9uLnRyaWdnZXIoICdjb3JyZWN0LXVwZGF0ZScsIHRoaXMubW9kZWwgKTtcblxuXHRcdH0sXG5cblx0fSwgRWRpdGFibGUgKSApO1xuXG59ICk7XG5cbi8qKlxuICogUXVpeiBxdWVzdGlvbiBiYW5rIHZpZXdcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE2LjBcbiAqL1xuZGVmaW5lKCAnVmlld3MvUXVlc3Rpb25DaG9pY2VMaXN0JyxbICdWaWV3cy9RdWVzdGlvbkNob2ljZScgXSwgZnVuY3Rpb24oIENob2ljZVZpZXcgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLkNvbGxlY3Rpb25WaWV3LmV4dGVuZCgge1xuXG5cdFx0Y2xhc3NOYW1lOiAnbGxtcy1xdWl6LXF1ZXN0aW9ucycsXG5cblx0XHQvKipcblx0XHQgKiBDaG9pY2UgbW9kZWwgdmlld1xuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdG1vZGVsVmlldzogQ2hvaWNlVmlldyxcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBrZXlib2FyZCBldmVudHNcblx0XHQgKiBAdHlwZSAge0Jvb2x9XG5cdFx0ICovXG5cdFx0cHJvY2Vzc0tleUV2ZW50czogZmFsc2UsXG5cblx0XHQvKipcblx0XHQgKiBBcmUgc2VjdGlvbnMgc2VsZWN0YWJsZT9cblx0XHQgKiBAdHlwZSAge0Jvb2x9XG5cdFx0ICovXG5cdFx0c2VsZWN0YWJsZTogZmFsc2UsXG5cblx0XHQvKipcblx0XHQgKiBBcmUgc2VjdGlvbnMgc29ydGFibGU/XG5cdFx0ICogQHR5cGUgIHtCb29sfVxuXHRcdCAqL1xuXHRcdHNvcnRhYmxlOiB0cnVlLFxuXG5cdFx0c29ydGFibGVPcHRpb25zOiB7XG5cdFx0XHRheGlzOiBmYWxzZSxcblx0XHRcdC8vIGNvbm5lY3RXaXRoOiAnLmxsbXMtbGVzc29ucycsXG5cdFx0XHRjdXJzb3I6ICdtb3ZlJyxcblx0XHRcdGhhbmRsZTogJy5sbG1zLWNob2ljZS1pZCcsXG5cdFx0XHRpdGVtczogJy5sbG1zLXF1ZXN0aW9uLWNob2ljZScsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ2xsbXMtcXVlc3Rpb24tY2hvaWNlIGxsbXMtc29ydGFibGUtcGxhY2Vob2xkZXInLFxuXHRcdH0sXG5cblx0XHRzb3J0YWJsZV9zdGFydDogZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0dGhpcy4kZWwuYWRkQ2xhc3MoICdkcmFnZ2luZycgKTtcblx0XHR9LFxuXG5cdFx0c29ydGFibGVfc3RvcDogZnVuY3Rpb24oIG1vZGVsICkge1xuXHRcdFx0dGhpcy4kZWwucmVtb3ZlQ2xhc3MoICdkcmFnZ2luZycgKTtcblx0XHR9LFxuXG5cdH0gKTtcblxufSApO1xuXG4vKipcbiAqIFNpbmdsZSBRdWVzdGlvbiBWaWV3XG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL1F1ZXN0aW9uJyxbXG5cdFx0J1ZpZXdzL19FZGl0YWJsZScsXG5cdFx0J1ZpZXdzL1F1ZXN0aW9uQ2hvaWNlTGlzdCdcblx0XSwgZnVuY3Rpb24oXG5cdFx0RWRpdGFibGUsXG5cdFx0Q2hvaWNlTGlzdFZpZXdcblx0KSB7XG5cblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKCBfLmRlZmF1bHRzKCB7XG5cblx0XHQvKipcblx0XHQgKiBHZW5lcmF0ZSBDU1MgY2xhc3NlcyBmb3IgdGhlIHF1ZXN0aW9uXG5cdFx0ICogQHJldHVybiAgIHN0cmluZ1xuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Y2xhc3NOYW1lOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAnbGxtcy1xdWVzdGlvbiBxdHlwZS0tJyArIHRoaXMubW9kZWwuZ2V0KCAncXVlc3Rpb25fdHlwZScgKS5nZXQoICdpZCcgKTtcblx0XHR9LFxuXG5cdFx0ZXZlbnRzOiBfLmRlZmF1bHRzKCB7XG5cdFx0XHQnY2xpY2sgLmNsb25lLS1xdWVzdGlvbic6ICdjbG9uZScsXG5cdFx0XHQnY2xpY2sgLmRlbGV0ZS0tcXVlc3Rpb24nOiAnZGVsZXRlJyxcblx0XHRcdCdjbGljayAuZXhwYW5kLS1xdWVzdGlvbic6ICdleHBhbmQnLFxuXHRcdFx0J2NsaWNrIC5jb2xsYXBzZS0tcXVlc3Rpb24nOiAnY29sbGFwc2UnLFxuXHRcdFx0J2NoYW5nZSBpbnB1dFtuYW1lPVwicXVlc3Rpb25fcG9pbnRzXCJdJzogJ3VwZGF0ZV9wb2ludHMnLFxuXHRcdH0sIEVkaXRhYmxlLmV2ZW50cyApLFxuXG5cdFx0LyoqXG5cdFx0ICogSFRNTCBlbGVtZW50IHdyYXBwZXIgSUQgYXR0cmlidXRlXG5cdFx0ICogQHJldHVybiAgIHN0cmluZ1xuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICdsbG1zLXF1ZXN0aW9uLScgKyB0aGlzLm1vZGVsLmlkO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBXcmFwcGVyIFRhZyBuYW1lXG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0dGFnTmFtZTogJ2xpJyxcblxuXHRcdC8qKlxuXHRcdCAqIEdldCB0aGUgdW5kZXJzY29yZSB0ZW1wbGF0ZVxuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdHRlbXBsYXRlOiB3cC50ZW1wbGF0ZSggJ2xsbXMtcXVlc3Rpb24tdGVtcGxhdGUnICksXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXphdGlvbiBjYWxsYmFjayBmdW5jIChyZW5kZXJzIHRoZSBlbGVtZW50IG9uIHNjcmVlbilcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBjaGFuZ2VfZXZlbnRzID0gW1xuXHRcdFx0XHQnY2hhbmdlOl9leHBhbmRlZCcsXG5cdFx0XHRcdCdjaGFuZ2U6bWVudV9vcmRlcicsXG5cdFx0XHRdO1xuXHRcdFx0Xy5lYWNoKCBjaGFuZ2VfZXZlbnRzLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMubGlzdGVuVG8oIHRoaXMubW9kZWwsIGV2ZW50LCB0aGlzLnJlbmRlciApO1xuXHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLm1vZGVsLmdldCggJ2ltYWdlJyApLCAnY2hhbmdlJywgdGhpcy5yZW5kZXIgKTtcblxuXHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5tb2RlbC5nZXRfcGFyZW50KCksICdjaGFuZ2U6X3BvaW50cycsIHRoaXMucmVuZGVyX3BvaW50c19wZXJjZW50YWdlICk7XG5cblx0XHRcdHRoaXMub24oICdtdWx0aV9jaG9pY2VzX3RvZ2dsZScsIHRoaXMubXVsdGlfY2hvaWNlc190b2dnbGUsIHRoaXMgKTtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLm9uKCAnZGVsLXF1ZXN0aW9uLWNob2ljZScsIHRoaXMuZGVsX2Nob2ljZSwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENvbXBpbGVzIHRoZSB0ZW1wbGF0ZSBhbmQgcmVuZGVycyB0aGUgdmlld1xuXHRcdCAqIEByZXR1cm4gICBzZWxmIChmb3IgY2hhaW5pbmcpXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLnRlbXBsYXRlKCB0aGlzLm1vZGVsICkgKTtcblxuXHRcdFx0aWYgKCB0aGlzLm1vZGVsLmdldCggJ3F1ZXN0aW9uX3R5cGUnKS5nZXQoICdjaG9pY2VzJyApICkge1xuXG5cdFx0XHRcdHRoaXMuY2hvaWNlTGlzdFZpZXcgPSBuZXcgQ2hvaWNlTGlzdFZpZXcoIHtcblx0XHRcdFx0XHRlbDogdGhpcy4kZWwuZmluZCggJy5sbG1zLXF1ZXN0aW9uLWNob2ljZXMnICksXG5cdFx0XHRcdFx0Y29sbGVjdGlvbjogdGhpcy5tb2RlbC5nZXQoICdjaG9pY2VzJyApLFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHRoaXMuY2hvaWNlTGlzdFZpZXcucmVuZGVyKCk7XG5cdFx0XHRcdHRoaXMuY2hvaWNlTGlzdFZpZXcub24oICdzb3J0U3RhcnQnLCB0aGlzLmNob2ljZUxpc3RWaWV3LnNvcnRhYmxlX3N0YXJ0ICk7XG5cdFx0XHRcdHRoaXMuY2hvaWNlTGlzdFZpZXcub24oICdzb3J0U3RvcCcsIHRoaXMuY2hvaWNlTGlzdFZpZXcuc29ydGFibGVfc3RvcCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggJ2dyb3VwJyA9PT0gdGhpcy5tb2RlbC5nZXQoICdxdWVzdGlvbl90eXBlJyApLmdldCggJ2lkJyApICkge1xuXG5cdFx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0c2VsZi5xdWVzdGlvbkxpc3RWaWV3ID0gc2VsZi5jb2xsZWN0aW9uTGlzdFZpZXcucXVpei5nZXRfcXVlc3Rpb25fbGlzdCgge1xuXHRcdFx0XHRcdFx0ZWw6IHNlbGYuJGVsLmZpbmQoICcubGxtcy1xdWl6LXF1ZXN0aW9ucycgKSxcblx0XHRcdFx0XHRcdGNvbGxlY3Rpb246IHNlbGYubW9kZWwuZ2V0KCAncXVlc3Rpb25zJyApLFxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRzZWxmLnF1ZXN0aW9uTGlzdFZpZXcucmVuZGVyKCk7XG5cdFx0XHRcdFx0c2VsZi5xdWVzdGlvbkxpc3RWaWV3Lm9uKCAnc29ydFN0YXJ0Jywgc2VsZi5xdWVzdGlvbkxpc3RWaWV3LnNvcnRhYmxlX3N0YXJ0ICk7XG5cdFx0XHRcdFx0c2VsZi5xdWVzdGlvbkxpc3RWaWV3Lm9uKCAnc29ydFN0b3AnLCBzZWxmLnF1ZXN0aW9uTGlzdFZpZXcuc29ydGFibGVfc3RvcCApO1xuXHRcdFx0XHR9LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aGlzLm1vZGVsLmdldCggJ2Rlc2NyaXB0aW9uX2VuYWJsZWQnICkgKSB7XG5cdFx0XHRcdHRoaXMuaW5pdF9lZGl0b3IoICdxdWVzdGlvbi1kZXNjLS0nICsgdGhpcy5tb2RlbC5nZXQoICdpZCcgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMubW9kZWwuZ2V0KCAnY2xhcmlmaWNhdGlvbnNfZW5hYmxlZCcgKSApIHtcblx0XHRcdFx0dGhpcy5pbml0X2VkaXRvciggJ3F1ZXN0aW9uLWNsYXJpZmljYXRpb25zLS0nICsgdGhpcy5tb2RlbC5nZXQoICdpZCcgKSwge1xuXHRcdFx0XHRcdG1lZGlhQnV0dG9uczogZmFsc2UsXG5cdFx0XHRcdFx0dGlueW1jZToge1xuXHRcdFx0XHRcdFx0dG9vbGJhcjE6ICdib2xkLGl0YWxpYyxzdHJpa2V0aHJvdWdoLGJ1bGxpc3QsbnVtbGlzdCxhbGlnbmxlZnQsYWxpZ25jZW50ZXIsYWxpZ25yaWdodCcsXG5cdFx0XHRcdFx0XHR0b29sYmFyMjogJycsXG5cdFx0XHRcdFx0XHRzZXR1cDogXy5iaW5kKCB0aGlzLm9uX2VkaXRvcl9yZWFkeSwgdGhpcyApLFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmluaXRfZm9ybWF0dGluZ19lbHMoKTtcblx0XHRcdHRoaXMuaW5pdF9zZWxlY3RzKCk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiByZXJlbmRlciBwb2ludHMgcGVyY2VudGFnZSB3aGVuIHF1ZXN0aW9uIHBvaW50cyBhcmUgdXBkYXRlZFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW5kZXJfcG9pbnRzX3BlcmNlbnRhZ2U6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC5maW5kKCAnLmxsbXMtcXVlc3Rpb24tcG9pbnRzJyApLmF0dHIoICdkYXRhLXRpcCcsIHRoaXMubW9kZWwuZ2V0X3BvaW50c19wZXJjZW50YWdlKCkgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDbGljayBldmVudCB0byBkdXBsaWNhdGUgYSBxdWVzdGlvbiB3aXRoaW4gYSBxdWl6XG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Y2xvbmU6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dGhpcy5tb2RlbC5jb2xsZWN0aW9uLmFkZCggdGhpcy5fZ2V0X3F1ZXN0aW9uX2Nsb25lKCB0aGlzLm1vZGVsICkgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZWN1cnNpdmUgY2xvbmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBjb3JyZWN0bHkgY2xvbmUgY2hpbGRyZW4gb2YgYSBxdWVzdGlvblxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBxdWVzdGlvbiAgcXVlc3RvbiBtb2RlbFxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdF9nZXRfcXVlc3Rpb25fY2xvbmU6IGZ1bmN0aW9uKCBxdWVzdGlvbiApIHtcblxuXHRcdFx0Ly8gY3JlYXRlIGEgZHVwbGljYXRlXG5cdFx0XHR2YXIgY2xvbmUgPSBfLmNsb25lKCBxdWVzdGlvbi5hdHRyaWJ1dGVzICk7XG5cblx0XHRcdC8vIHJlbW92ZSBpZCAod2Ugd2FudCB0aGUgZHVwbGljYXRlIHRvIGhhdmUgYSB0ZW1wIGlkKVxuXHRcdFx0ZGVsZXRlIGNsb25lLmlkO1xuXG5cdFx0XHRjbG9uZS5wYXJlbnRfaWQgPSBxdWVzdGlvbi5nZXQoICdpZCcgKTtcblxuXHRcdFx0Ly8gc2V0IHRoZSBxdWVzdGlvbiB0eXBlIElEXG5cdFx0XHRjbG9uZS5xdWVzdGlvbl90eXBlID0gcXVlc3Rpb24uZ2V0KCAncXVlc3Rpb25fdHlwZScgKS5nZXQoICdpZCcgKTtcblxuXHRcdFx0Ly8gY2xvbmUgdGhlIGltYWdlIGF0dHJpYnV0ZXMgc2VwZXJhdGVseVxuXHRcdFx0Y2xvbmUuaW1hZ2UgPSBfLmNsb25lKCBxdWVzdGlvbi5nZXQoICdpbWFnZScgKS5hdHRyaWJ1dGVzICk7XG5cblx0XHRcdC8vIGlmIGl0IGhhcyBjaG9pY2VzIGNsb25lIGFsbCB0aGUgY2hvaWNlc1xuXHRcdFx0aWYgKCBxdWVzdGlvbi5nZXQoICdjaG9pY2VzJyApICkge1xuXG5cdFx0XHRcdGNsb25lLmNob2ljZXMgPSBbXTtcblxuXHRcdFx0XHRxdWVzdGlvbi5nZXQoICdjaG9pY2VzJyApLmVhY2goIGZ1bmN0aW9uICggY2hvaWNlICkge1xuXG5cdFx0XHRcdFx0dmFyIGNob2ljZV9jbG9uZSA9IF8uY2xvbmUoIGNob2ljZS5hdHRyaWJ1dGVzICk7XG5cdFx0XHRcdFx0ZGVsZXRlIGNob2ljZV9jbG9uZS5pZDtcblx0XHRcdFx0XHRkZWxldGUgY2hvaWNlX2Nsb25lLnF1ZXN0aW9uX2lkO1xuXG5cdFx0XHRcdFx0Y2xvbmUuY2hvaWNlcy5wdXNoKCBjaG9pY2VfY2xvbmUgKTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAnZ3JvdXAnID09PSBxdWVzdGlvbi5nZXQoICdxdWVzdGlvbl90eXBlJyApLmdldCggJ2lkJyApICkge1xuXG5cdFx0XHRcdGNsb25lLnF1ZXN0aW9ucyA9IFtdO1xuXHRcdFx0XHRxdWVzdGlvbi5nZXQoICdxdWVzdGlvbnMnICkuZWFjaCggZnVuY3Rpb24oIGNoaWxkICkge1xuXHRcdFx0XHRcdGNsb25lLnF1ZXN0aW9ucy5wdXNoKCB0aGlzLl9nZXRfcXVlc3Rpb25fY2xvbmUoIGNoaWxkICkgKTtcblx0XHRcdFx0fSwgdGhpcyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjbG9uZTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDb2xsYXBzZSBhIHF1ZXN0aW9uIGFuZCBoaWRlIGl0J3Mgc2V0dGluZ3Ncblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Y29sbGFwc2U6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLm1vZGVsLnNldCggJ19leHBhbmRlZCcsIGZhbHNlICk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGVsZXRlIHRoZSBxdWVzdGlvbiBmcm9tIGEgcXVpeiAvIHF1ZXN0aW9uIGdyb3VwXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0ZGVsZXRlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGlmICggd2luZG93LmNvbmZpcm0oIExMTVMubDEwbi50cmFuc2xhdGUoICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgcXVlc3Rpb24/JyApICkgKSB7XG5cblx0XHRcdFx0dGhpcy5tb2RlbC5jb2xsZWN0aW9uLnJlbW92ZSggdGhpcy5tb2RlbCApO1xuXHRcdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ21vZGVsLXRyYXNoZWQnLCB0aGlzLm1vZGVsICk7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDbGljayBldmVudCB0byByZXZlYWwgYSBxdWVzdGlvbidzIHNldHRpbmdzICYgY2hvaWNlc1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLm1vZGVsLnNldCggJ19leHBhbmRlZCcsIHRydWUgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBXaGVuIHRvZ2dsaW5nIG11bHRpcGxlIGNvcnJlY3QgYW5zd2VycyAqb2ZmKiByZW1vdmUgYWxsIGNvcnJlY3QgY2hvaWNlcyBleGNlcHQgdGhlIGZpcnN0IGNvcnJlY3QgY2hvaWNlIGluIHRoZSBsaXN0XG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIHZhbCAgdmFsdWUgb2YgdGhlIHF1ZXN0aW9uJ3MgYG11bHRpX2Nob2ljZWAgYXR0ciBbeWVzfG5vXVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRtdWx0aV9jaG9pY2VzX3RvZ2dsZTogZnVuY3Rpb24oIHZhbCApIHtcblxuXHRcdFx0aWYgKCAneWVzJyA9PT0gdmFsICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9kZWwuZ2V0KCAnY2hvaWNlcycgKS51cGRhdGVfY29ycmVjdCggXy5maXJzdCggdGhpcy5tb2RlbC5nZXQoICdjaG9pY2VzJyApLmdldF9jb3JyZWN0KCkgKSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZSB0aGUgbW9kZWwncyBwb2ludHMgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIHBvaW50cyBpbnB1dCBpcyB1cGRhdGVkXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHVwZGF0ZV9wb2ludHM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLm1vZGVsLnNldCggJ3BvaW50cycsIHRoaXMuJGVsLmZpbmQoICdpbnB1dFtuYW1lPVwicXVlc3Rpb25fcG9pbnRzXCJdJyApLnZhbCgpICogMSApO1xuXG5cdFx0fVxuXG5cdH0sIEVkaXRhYmxlICkgKTtcblxufSApO1xuXG4vKipcbiAqIFF1aXogcXVlc3Rpb24gYmFuayB2aWV3XG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL1F1ZXN0aW9uTGlzdCcsWyAnVmlld3MvUXVlc3Rpb24nIF0sIGZ1bmN0aW9uKCBRdWVzdGlvblZpZXcgKSB7XG5cblx0cmV0dXJuIEJhY2tib25lLkNvbGxlY3Rpb25WaWV3LmV4dGVuZCgge1xuXG5cdFx0Y2xhc3NOYW1lOiAnbGxtcy1xdWl6LXF1ZXN0aW9ucycsXG5cblx0XHQvKipcblx0XHQgKiBQYXJlbnQgZWxlbWVudFxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdC8vIGVsOiAnI2xsbXMtcXVpei1xdWVzdGlvbnMnLFxuXG5cdFx0LyoqXG5cdFx0ICogU2VjdGlvbiBtb2RlbFxuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdG1vZGVsVmlldzogUXVlc3Rpb25WaWV3LFxuXG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlIGtleWJvYXJkIGV2ZW50c1xuXHRcdCAqIEB0eXBlICB7Qm9vbH1cblx0XHQgKi9cblx0XHRwcm9jZXNzS2V5RXZlbnRzOiBmYWxzZSxcblxuXHRcdC8qKlxuXHRcdCAqIEFyZSBzZWN0aW9ucyBzZWxlY3RhYmxlP1xuXHRcdCAqIEB0eXBlICB7Qm9vbH1cblx0XHQgKi9cblx0XHRzZWxlY3RhYmxlOiBmYWxzZSxcblxuXHRcdC8qKlxuXHRcdCAqIEFyZSBzZWN0aW9ucyBzb3J0YWJsZT9cblx0XHQgKiBAdHlwZSAge0Jvb2x9XG5cdFx0ICovXG5cdFx0c29ydGFibGU6IHRydWUsXG5cblx0XHRzb3J0YWJsZU9wdGlvbnM6IHtcblx0XHRcdGF4aXM6IGZhbHNlLFxuXHRcdFx0Y29ubmVjdFdpdGg6ICcubGxtcy1xdWl6LXF1ZXN0aW9ucycsXG5cdFx0XHRjdXJzb3I6ICdtb3ZlJyxcblx0XHRcdGhhbmRsZTogJy5sbG1zLWRhdGEtc3RhbXAnLFxuXHRcdFx0aXRlbXM6ICcubGxtcy1xdWVzdGlvbicsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ2xsbXMtcXVlc3Rpb24gbGxtcy1zb3J0YWJsZS1wbGFjZWhvbGRlcicsXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhpZ2hsaWdodCBkcm9wIGFyZWFzIHdoZW4gZHJhZ2dpbmcgc3RhcnRzXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIG1vZGVsICBtb2RlbCBiZWluZyBzb3J0ZWRcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0c29ydGFibGVfc3RhcnQ6IGZ1bmN0aW9uKCBtb2RlbCApIHtcblx0XHRcdHZhciBzZWxlY3RvciA9ICdncm91cCcgPT09IG1vZGVsLmdldCggJ3F1ZXN0aW9uX3R5cGUnICkuZ2V0KCAnaWQnICkgPyAnLmxsbXMtZWRpdG9yLXRhYiA+IC5sbG1zLXF1aXotcXVlc3Rpb25zJyA6ICcubGxtcy1xdWl6LXF1ZXN0aW9ucyc7XG5cdFx0XHQkKCBzZWxlY3RvciApLmFkZENsYXNzKCAnZHJhZ2dpbmcnICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBoaWdobGlnaHRzIHdoZW4gZHJhZ2dpbmcgc3RvcHNcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgbW9kZWwgIG1vZGVsIGJlaW5nIHNvcnRlZFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRzb3J0YWJsZV9zdG9wOiBmdW5jdGlvbigpIHtcblx0XHRcdCQoICcubGxtcy1xdWl6LXF1ZXN0aW9ucycgKS5yZW1vdmVDbGFzcyggJ2RyYWdnaW5nJyApO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBPdmVycmlkZXMgcmVjZWl2ZSB0byBlbnN1cmUgdGhhdCBxdWVzdGlvbiBncm91cHMgY2FuJ3QgYmUgbW92ZWQgaW50byBxdWVzdG9uIGdyb3Vwc1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIHVpICAgICBqUXVlcnkgVUkgU29ydGFibGUgdWkgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdF9yZWNlaXZlIDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblxuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdC8vIHByZXZlbnQgbW92aW5nIGEgcXVlc3Rpb24gZ3JvdXAgaW50byBhIHF1ZXN0aW9uIGdyb3VwXG5cdFx0XHRpZiAoIHVpLml0ZW0uaGFzQ2xhc3MoICdxdHlwZS0tZ3JvdXAnICkgJiYgJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggJy5xdHlwZS0tZ3JvdXAnICkubGVuZ3RoICkgeztcblx0XHRcdFx0dWkuc2VuZGVyLnNvcnRhYmxlKCAnY2FuY2VsJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzZW5kZXJMaXN0RWwgPSB1aS5zZW5kZXI7XG5cdFx0XHR2YXIgc2VuZGVyQ29sbGVjdGlvbkxpc3RWaWV3ID0gc2VuZGVyTGlzdEVsLmRhdGEoIFwidmlld1wiICk7XG5cdFx0XHRpZiggISBzZW5kZXJDb2xsZWN0aW9uTGlzdFZpZXcgfHwgISBzZW5kZXJDb2xsZWN0aW9uTGlzdFZpZXcuY29sbGVjdGlvbiApIHJldHVybjtcblxuXHRcdFx0dmFyIG5ld0luZGV4ID0gdGhpcy5fZ2V0Q29udGFpbmVyRWwoKS5jaGlsZHJlbigpLmluZGV4KCB1aS5pdGVtICk7XG5cdFx0XHR2YXIgbW9kZWxSZWNlaXZlZCA9IHNlbmRlckNvbGxlY3Rpb25MaXN0Vmlldy5jb2xsZWN0aW9uLmdldCggdWkuaXRlbS5hdHRyKCBcImRhdGEtbW9kZWwtY2lkXCIgKSApO1xuXHRcdFx0c2VuZGVyQ29sbGVjdGlvbkxpc3RWaWV3LmNvbGxlY3Rpb24ucmVtb3ZlKCBtb2RlbFJlY2VpdmVkICk7XG5cdFx0XHR0aGlzLmNvbGxlY3Rpb24uYWRkKCBtb2RlbFJlY2VpdmVkLCB7IGF0IDogbmV3SW5kZXggfSApO1xuXHRcdFx0bW9kZWxSZWNlaXZlZC5jb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uOyAvLyBvdGhlcndpc2Ugd2lsbCBub3QgZ2V0IHByb3Blcmx5IHNldCwgc2luY2UgbW9kZWxSZWNlaXZlZC5jb2xsZWN0aW9uIG1pZ2h0IGFscmVhZHkgaGF2ZSBhIHZhbHVlLlxuXHRcdFx0dGhpcy5zZXRTZWxlY3RlZE1vZGVsKCBtb2RlbFJlY2VpdmVkICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJyaWRlIHRvIGFsbG93IG1hbmlwdWxhdGlubyBvZiBwbGFjZWhvbGRlciBlbGVtZW50XG5cdFx0ICogQHBhcmFtICAgIHtbdHlwZV19ICAgZXZlbnQgIFtkZXNjcmlwdGlvbl1cblx0XHQgKiBAcGFyYW0gICAge1t0eXBlXX0gICB1aSAgICAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEByZXR1cm4gICB7W3R5cGVdfVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0X3NvcnRTdGFydCA6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cblx0XHRcdHZhciBtb2RlbEJlaW5nU29ydGVkID0gdGhpcy5jb2xsZWN0aW9uLmdldCggdWkuaXRlbS5hdHRyKCBcImRhdGEtbW9kZWwtY2lkXCIgKSApO1xuXG5cdFx0XHR1aS5wbGFjZWhvbGRlci5hZGRDbGFzcyggJ3F0eXBlLS0nICsgbW9kZWxCZWluZ1NvcnRlZC5nZXQoICdxdWVzdGlvbl90eXBlJyApLmdldCggJ2lkJyApICk7XG5cblx0XHRcdGlmKCB0aGlzLl9pc0JhY2tib25lQ291cmllckF2YWlsYWJsZSgpIClcblx0XHRcdFx0dGhpcy5zcGF3biggXCJzb3J0U3RhcnRcIiwgeyBtb2RlbEJlaW5nU29ydGVkIDogbW9kZWxCZWluZ1NvcnRlZCB9ICk7XG5cdFx0XHRlbHNlIHRoaXMudHJpZ2dlciggXCJzb3J0U3RhcnRcIiwgbW9kZWxCZWluZ1NvcnRlZCApO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBPdmVybG9hZHMgdGhlIGZ1bmN0aW9uIGZyb20gQmFja2JvbmUuQ29sbGVjdGlvblZpZXcgY29yZSBiZWNhdXNlIGl0IGRvZXNuJ3Qgc2VuZCBzdG9wIGV2ZW50c1xuXHRcdCAqIGlmIG1vdmluZyBmcm9tIG9uZSBzb3J0YWJsZSB0byBhbm90aGVyLi4uIDotKFxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIHVpICAgICBqUXVlcnkgVUkgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdF9zb3J0U3RvcCA6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHR2YXIgbW9kZWxCZWluZ1NvcnRlZCA9IHRoaXMuY29sbGVjdGlvbi5nZXQoIHVpLml0ZW0uYXR0ciggJ2RhdGEtbW9kZWwtY2lkJyApICksXG5cdFx0XHRcdG1vZGVsVmlld0NvbnRhaW5lckVsID0gdGhpcy5fZ2V0Q29udGFpbmVyRWwoKSxcblx0XHRcdFx0bmV3SW5kZXggPSBtb2RlbFZpZXdDb250YWluZXJFbC5jaGlsZHJlbigpLmluZGV4KCB1aS5pdGVtICk7XG5cblx0XHRcdGlmICggbmV3SW5kZXggPT0gLTEgJiYgbW9kZWxCZWluZ1NvcnRlZCApIHtcblx0XHRcdFx0dGhpcy5jb2xsZWN0aW9uLnJlbW92ZSggbW9kZWxCZWluZ1NvcnRlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9yZW9yZGVyQ29sbGVjdGlvbkJhc2VkT25IVE1MKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZURlcGVuZGVudENvbnRyb2xzKCk7XG5cblx0XHRcdGlmKCB0aGlzLl9pc0JhY2tib25lQ291cmllckF2YWlsYWJsZSgpICkge1xuXHRcdFx0XHR0aGlzLnNwYXduKCAnc29ydFN0b3AnLCB7IG1vZGVsQmVpbmdTb3J0ZWQgOiBtb2RlbEJlaW5nU29ydGVkLCBuZXdJbmRleCA6IG5ld0luZGV4IH0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggJ3NvcnRTdG9wJywgbW9kZWxCZWluZ1NvcnRlZCwgbmV3SW5kZXggKTtcblx0XHRcdH1cblxuXHRcdH0sXG5cblx0fSApO1xuXG59ICk7XG5cbi8qKlxuICogU2luZ2xlIFF1aXogVmlld1xuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTkuMlxuICovXG5kZWZpbmUoICdWaWV3cy9RdWl6JyxbXG5cdFx0J01vZGVscy9RdWl6Jyxcblx0XHQnVmlld3MvUG9wb3ZlcicsXG5cdFx0J1ZpZXdzL1Bvc3RTZWFyY2gnLFxuXHRcdCdWaWV3cy9RdWVzdGlvbkJhbmsnLFxuXHRcdCdWaWV3cy9RdWVzdGlvbkxpc3QnLFxuXHRcdCdWaWV3cy9TZXR0aW5nc0ZpZWxkcycsXG5cdFx0J1ZpZXdzL19EZXRhY2hhYmxlJyxcblx0XHQnVmlld3MvX0VkaXRhYmxlJyxcblx0XHQnVmlld3MvX1N1YnZpZXcnLFxuXHRcdCdWaWV3cy9fVHJhc2hhYmxlJ1xuXHRdLCBmdW5jdGlvbihcblx0XHRRdWl6TW9kZWwsXG5cdFx0UG9wb3Zlcixcblx0XHRQb3N0U2VhcmNoLFxuXHRcdFF1ZXN0aW9uQmFuayxcblx0XHRRdWVzdGlvbkxpc3QsXG5cdFx0U2V0dGluZ3NGaWVsZHMsXG5cdFx0RGV0YWNoYWJsZSxcblx0XHRFZGl0YWJsZSxcblx0XHRTdWJ2aWV3LFxuXHRcdFRyYXNoYWJsZVxuXHQpIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoIF8uZGVmYXVsdHMoIHtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgdmlldyBzdGF0ZVxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdHN0YXRlOiAnZGVmYXVsdCcsXG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IFN1YnZpZXdzXG5cdFx0ICogQHR5cGUgIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dmlld3M6IHtcblx0XHRcdHNldHRpbmdzOiB7XG5cdFx0XHRcdGNsYXNzOiBTZXR0aW5nc0ZpZWxkcyxcblx0XHRcdFx0aW5zdGFuY2U6IG51bGwsXG5cdFx0XHRcdHN0YXRlOiAnZGVmYXVsdCcsXG5cdFx0XHR9LFxuXHRcdFx0YmFuazoge1xuXHRcdFx0XHRjbGFzczogUXVlc3Rpb25CYW5rLFxuXHRcdFx0XHRpbnN0YW5jZTogbnVsbCxcblx0XHRcdFx0c3RhdGU6ICdkZWZhdWx0Jyxcblx0XHRcdH0sXG5cdFx0XHRsaXN0OiB7XG5cdFx0XHRcdGNsYXNzOiBRdWVzdGlvbkxpc3QsXG5cdFx0XHRcdGluc3RhbmNlOiBudWxsLFxuXHRcdFx0XHRzdGF0ZTogJ2RlZmF1bHQnLFxuXHRcdFx0fSxcblx0XHR9LFxuXG5cdFx0ZWw6ICcjbGxtcy1lZGl0b3ItcXVpeicsXG5cblx0XHQvKipcblx0XHQgKiBFdmVudHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRldmVudHM6IF8uZGVmYXVsdHMoIHtcblx0XHRcdCdjbGljayAjbGxtcy1leGlzdGluZy1xdWl6JzogJ2FkZF9leGlzdGluZ19xdWl6X2NsaWNrJyxcblx0XHRcdCdjbGljayAjbGxtcy1uZXctcXVpeic6ICdhZGRfbmV3X3F1aXonLFxuXHRcdFx0J2NsaWNrICNsbG1zLXNob3ctcXVlc3Rpb24tYmFuayc6ICdzaG93X3Rvb2xzJyxcblx0XHRcdCdjbGljayAuYnVsay10b2dnbGUnOiAnYnVsa190b2dnbGUnLFxuXHRcdFx0Ly8gJ2tleXVwICNsbG1zLXF1ZXN0aW9uLWJhbmstZmlsdGVyJzogJ2ZpbHRlcl9xdWVzdGlvbl90eXBlcycsXG5cdFx0XHQvLyAnc2VhcmNoICNsbG1zLXF1ZXN0aW9uLWJhbmstZmlsdGVyJzogJ2ZpbHRlcl9xdWVzdGlvbl90eXBlcycsXG5cdFx0fSwgRGV0YWNoYWJsZS5ldmVudHMsIEVkaXRhYmxlLmV2ZW50cywgVHJhc2hhYmxlLmV2ZW50cyApLFxuXG5cdFx0LyoqXG5cdFx0ICogV3JhcHBlciBUYWcgbmFtZVxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRhZ05hbWU6ICdkaXYnLFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSB1bmRlcnNjb3JlIHRlbXBsYXRlXG5cdFx0ICogQHR5cGUgIHtbdHlwZV19XG5cdFx0ICovXG5cdFx0dGVtcGxhdGU6IHdwLnRlbXBsYXRlKCAnbGxtcy1xdWl6LXRlbXBsYXRlJyApLFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6YXRpb24gY2FsbGJhY2sgZnVuYyAocmVuZGVycyB0aGUgZWxlbWVudCBvbiBzY3JlZW4pXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTkuMlxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHR0aGlzLmxlc3NvbiA9IGRhdGEubGVzc29uO1xuXG5cdFx0XHQvLyBpbml0aWFsaXplIHRoZSBtb2RlbCBpZiB0aGUgcXVpeiBpcyBlbmFibGVkIG9yIGl0J3MgZGlzYWJsZWQgYnV0IHdlIHN0aWxsIGhhdmUgZGF0YSBmb3IgYSBxdWl6XG5cdFx0XHRpZiAoICd5ZXMnID09PSB0aGlzLmxlc3Nvbi5nZXQoICdxdWl6X2VuYWJsZWQnICkgfHwgISBfLmlzRW1wdHkoIHRoaXMubGVzc29uLmdldCggJ3F1aXonICkgKSApIHtcblxuXHRcdFx0XHR0aGlzLm1vZGVsID0gdGhpcy5sZXNzb24uZ2V0KCAncXVpeicgKTtcblxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogQHRvZG8gIHRoaXMgaXMgYSB0ZXJyaWxiZSB0ZXJyaWJsZSBwYXRjaFxuXHRcdFx0XHQgKiAgICAgICAgSSd2ZSBzcGVudCBuZWFybHkgMyBkYXlzIHRyeWluZyB0byBmaWd1cmUgb3V0IGhvdyB0byBub3QgdXNlIHRoaXMgbGluZSBvZiBjb2RlXG5cdFx0XHRcdCAqICAgICAgICBJU1NVRSBSRVBST0RVQ1RJT046XG5cdFx0XHRcdCAqICAgICAgICBPcGVuIGNvdXJzZSBidWlsZGVyXG5cdFx0XHRcdCAqICAgICAgICBPcGVuIGEgbGVzc29uIChBKSBhbmQgYWRkIGEgcXVpelxuXHRcdFx0XHQgKiAgICAgICAgU3dpdGNoIHRvIGEgbmV3IGxlc3NvbiAoQilcblx0XHRcdFx0ICogICAgICAgIEFkZCBhIG5ldyBxdWl6XG5cdFx0XHRcdCAqICAgICAgICBSZXR1cm4gdG8gbGVzc29uIEEgYW5kIHRoZSBxdWl6emVzIHBhcmVudCB3aWxsIGJlIHNldCB0byBMRVNTT04gQlxuXHRcdFx0XHQgKiAgICAgICAgVGhpcyB3aWxsIGhhcHBlbiBmb3IgKmV2ZXJ5KiBxdWl6IGluIHRoZSBidWlsZGVyLi4uXG5cdFx0XHRcdCAqICAgICAgICBBZGRpbmcgdGhpcyBzZXRfcGFyZW50IG9uIGluaXQgZ3VhcmFudGVlcyB0aGF0IHRoZSBxdWl6emVzIGNvcnJlY3QgcGFyZW50IGlzIHNldFxuXHRcdFx0XHQgKiAgICAgICAgYWZ0ZXIgYWRkaW5nIG5ldyBxdWl6emVzIHRvIG90aGVyIGxlc3NvbnNcblx0XHRcdFx0ICogICAgICAgIGl0J3MgYXdmdWwgYW5kIGl0J3MgZ3Jvc3MuLi5cblx0XHRcdFx0ICogICAgICAgIEknbSBjb25mdXNlZCBhbmQgdGlyZWQgYW5kIGdvaW5nIHRvIG1pc3MgcmVsZWFzZSBkYXRlcyBhZ2FpbiBiZWNhdXNlIG9mIGl0XG5cdFx0XHRcdCAqL1xuXHRcdFx0XHR0aGlzLm1vZGVsLnNldF9wYXJlbnQoIHRoaXMubGVzc29uICk7XG5cblx0XHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5tb2RlbCwgJ2NoYW5nZTpfcG9pbnRzJywgdGhpcy5yZW5kZXJfcG9pbnRzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5vbiggJ21vZGVsLXRyYXNoZWQnLCB0aGlzLm9uX3RyYXNoZWQgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDb21waWxlcyB0aGUgdGVtcGxhdGUgYW5kIHJlbmRlcnMgdGhlIHZpZXdcblx0XHQgKiBAcmV0dXJuICAgc2VsZiAoZm9yIGNoYWluaW5nKVxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xOS4yXG5cdFx0ICovXG5cdFx0cmVuZGVyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dGhpcy4kZWwuaHRtbCggdGhpcy50ZW1wbGF0ZSggdGhpcy5tb2RlbCApICk7XG5cblx0XHRcdC8vIHJlbmRlciB0aGUgcXVpeiBidWlsZGVyXG5cdFx0XHRpZiAoIHRoaXMubW9kZWwgKSB7XG5cblx0XHRcdFx0Ly8gZG9uJ3QgYWxsb3cgaW50ZXJhY3Rpb24gdW50aWwgcXVlc3Rpb25zIGFyZSBsYXp5IGxvYWRlZFxuXHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RhcnQoIHRoaXMuJGVsICk7XG5cblx0XHRcdFx0dGhpcy5yZW5kZXJfc3VidmlldyggJ3NldHRpbmdzJywge1xuXHRcdFx0XHRcdGVsOiAnI2xsbXMtcXVpei1zZXR0aW5ncy1maWVsZHMnLFxuXHRcdFx0XHRcdG1vZGVsOiB0aGlzLm1vZGVsLFxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0dGhpcy5pbml0X2RhdGVwaWNrZXJzKCk7XG5cdFx0XHRcdHRoaXMuaW5pdF9zZWxlY3RzKCk7XG5cblx0XHRcdFx0dGhpcy5yZW5kZXJfc3VidmlldyggJ2JhbmsnLCB7XG5cdFx0XHRcdFx0Y29sbGVjdGlvbjogd2luZG93LmxsbXNfYnVpbGRlci5xdWVzdGlvbnMsXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR2YXIgbGFzdF9ncm91cCA9IG51bGwsXG5cdFx0XHRcdFx0Z3JvdXAgPSBudWxsO1xuXHRcdFx0XHQvLyBsZXQgYWxsIHRoZSBxdWVzdGlvbiB0eXBlcyByZWZlcmVuY2UgdGhlIHF1aXogZm9yIGFkZGluZyBxdWVzdGlvbnMgcXVpY2tseVxuXHRcdFx0XHR0aGlzLmdldF9zdWJ2aWV3KCAnYmFuaycgKS5pbnN0YW5jZS52aWV3TWFuYWdlci5lYWNoKCBmdW5jdGlvbiggdmlldyApIHtcblxuXHRcdFx0XHRcdHZpZXcucXVpeiA9IHRoaXMubW9kZWw7XG5cblx0XHRcdFx0XHRncm91cCA9IHZpZXcubW9kZWwuZ2V0KCAnZ3JvdXAnICkubmFtZTtcblxuXHRcdFx0XHRcdGlmICggbGFzdF9ncm91cCAhPT0gZ3JvdXAgKSB7XG5cdFx0XHRcdFx0XHRsYXN0X2dyb3VwID0gZ3JvdXA7XG5cdFx0XHRcdFx0XHR2aWV3LiRlbC5iZWZvcmUoICc8bGkgY2xhc3M9XCJsbG1zLXF1ZXN0aW9uLWJhbmstaGVhZGVyXCI+PGg0PicgKyBncm91cCArICc8L2g0PjwvbGk+JyApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdFx0dGhpcy5tb2RlbC5sb2FkX3F1ZXN0aW9ucyggXy5iaW5kKCBmdW5jdGlvbiggZXJyICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlcnIgKSB7XG5cdFx0XHRcdFx0XHRhbGVydCggTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBsb2FkIHRoZSBxdWVzdGlvbnMuIFBsZWFzZSByZWZyZXNoIHRoZSBwYWdlIGFuZCB0cnkgYWdhaW4uJyApICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RvcCggdGhpcy4kZWwgKTtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcl9zdWJ2aWV3KCAnbGlzdCcsIHtcblx0XHRcdFx0XHRcdGVsOiAnI2xsbXMtcXVpei1xdWVzdGlvbnMnLFxuXHRcdFx0XHRcdFx0Y29sbGVjdGlvbjogdGhpcy5tb2RlbC5nZXQoICdxdWVzdGlvbnMnICksXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdHZhciBsaXN0ID0gdGhpcy5nZXRfc3VidmlldyggJ2xpc3QnICkuaW5zdGFuY2U7XG5cdFx0XHRcdFx0bGlzdC5xdWl6ID0gdGhpcztcblx0XHRcdFx0XHRsaXN0LmNvbGxlY3Rpb24ub24oICdhZGQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGxpc3QuY29sbGVjdGlvbi50cmlnZ2VyKCAncmVvcmRlcicgKTtcblx0XHRcdFx0XHR9LCB0aGlzICk7XG5cdFx0XHRcdFx0bGlzdC5vbiggJ3NvcnRTdGFydCcsIGxpc3Quc29ydGFibGVfc3RhcnQgKTtcblx0XHRcdFx0XHRsaXN0Lm9uKCAnc29ydFN0b3AnLCBsaXN0LnNvcnRhYmxlX3N0b3AgKTtcblxuXHRcdFx0XHR9LCB0aGlzICkgKTtcblxuXHRcdFx0XHR0aGlzLm1vZGVsLm9uKCAnbmV3LXF1ZXN0aW9uLWFkZGVkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyICRxdWVzdGlvbnMgPSB0aGlzLiRlbC5maW5kKCAnI2xsbXMtcXVpei1xdWVzdGlvbnMnICk7XG5cdFx0XHRcdFx0JHF1ZXN0aW9ucy5hbmltYXRlKCB7IHNjcm9sbFRvcDogJHF1ZXN0aW9ucy5wcm9wKCAnc2Nyb2xsSGVpZ2h0JyApIH0sIDIwMCApO1xuXHRcdFx0XHR9LCB0aGlzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogT24gcXVpeiBwb2ludHMgdXBkYXRlLCB1cGRhdGUgdGhlIHZhbHVlIG9mIHRoZSBUb3RhbCBQb2ludHMgYXJlYSBpbiB0aGUgaGVhZGVyXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIHF1aXogICAgSW5zdGFuY2Ugb2YgdGhlIHF1aXogbW9kZWxcblx0XHQgKiBAcGFyYW0gICAgaW50ICAgcG9pbnRzICBVcGRhdGVkIG51bWJlciBvZiBwb2ludHNcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjZcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy42XG5cdFx0ICovXG5cdFx0cmVuZGVyX3BvaW50czogZnVuY3Rpb24oIHF1aXosIHBvaW50cyApIHtcblxuXHRcdFx0dGhpcy4kZWwuZmluZCggJyNsbG1zLXF1aXotdG90YWwtcG9pbnRzJyApLnRleHQoIHBvaW50cyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEJ1bGsgZXhwYW5kIC8gY29sbGFwc2UgcXVlc3Rpb24gYnV0dG9uc1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0YnVsa190b2dnbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0dmFyIGV4cGFuZGVkID0gKCAnZXhwYW5kJyA9PT0gJCggZXZlbnQudGFyZ2V0ICkuYXR0ciggJ2RhdGEtYWN0aW9uJyApICk7XG5cblx0XHRcdHRoaXMubW9kZWwuZ2V0KCAncXVlc3Rpb25zJyApLmVhY2goIGZ1bmN0aW9uKCBxdWVzdGlvbiApIHtcblx0XHRcdFx0cXVlc3Rpb24uc2V0KCAnX2V4cGFuZGVkJywgZXhwYW5kZWQgKTtcblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBBZGRzIGEgbmV3IHF1aXogdG8gYSBsZXNzb24gd2hpY2ggY3VycmVudGx5IGhhcyBubyBxdWl6IGFzc29jaWF0ZWQgd2xpdGggaXRcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0YWRkX25ld19xdWl6OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHF1aXogPSB0aGlzLmxlc3Nvbi5nZXQoICdxdWl6JyApO1xuXHRcdFx0aWYgKCBfLmlzRW1wdHkoIHF1aXogKSApIHtcblx0XHRcdFx0cXVpeiA9IHRoaXMubGVzc29uLmFkZF9xdWl6KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmxlc3Nvbi5zZXQoICdxdWl6X2VuYWJsZWQnLCAneWVzJyApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vZGVsID0gcXVpejtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cblx0XHR9LFxuXG5cdFx0Ly8gY29tZSBiYWNrIHRvIHRoaXMgYW5kIG1ha2Ugc3VyZSBjbG9uaW5nIHJlc2V0cyBhbGwgdGhlIElEc1xuXHRcdGFkZF9leGlzdGluZ19xdWl6OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdHRoaXMucG9zdF9zZWFyY2hfcG9wb3Zlci5oaWRlKCk7XG5cblx0XHRcdHZhciBxdWl6ID0gZXZlbnQuZGF0YTtcblxuXHRcdFx0aWYgKCAnY2xvbmUnID09PSBldmVudC5hY3Rpb24gKSB7XG5cblx0XHRcdFx0ZGVsZXRlIHF1aXouaWQ7XG5cblx0XHRcdFx0Xy5lYWNoKCBxdWl6LnF1ZXN0aW9ucywgZnVuY3Rpb24oIHF1ZXN0aW9uICkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlIHF1ZXN0aW9uLnBhcmVudF9pZDtcblx0XHRcdFx0XHRkZWxldGUgcXVlc3Rpb24uaWQ7XG5cblx0XHRcdFx0XHRpZiAoIHF1ZXN0aW9uLmNob2ljZXMgKSB7XG5cblx0XHRcdFx0XHRcdF8uZWFjaCggcXVlc3Rpb24uY2hvaWNlcywgZnVuY3Rpb24oIGNob2ljZSApIHtcblxuXHRcdFx0XHRcdFx0XHRkZWxldGUgY2hvaWNlLnF1ZXN0aW9uX2lkO1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgY2hvaWNlLmlkO1xuXG5cdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHF1aXouX2ZvcmNlU3luYyA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHF1aXoubGVzc29uX2lkO1xuXG5cdFx0XHR0aGlzLmxlc3Nvbi5hZGRfcXVpeiggcXVpeiApO1xuXHRcdFx0dGhpcy5tb2RlbCA9IHRoaXMubGVzc29uLmdldCggJ3F1aXonICk7XG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE9wZW4gYWRkIGV4aXN0aW5nIHF1aXogcG9wb3ZlclxuXHRcdCAqIEBwYXJhbSAgICBvYmogICBldmVudCAgSlMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4xMlxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjEyXG5cdFx0ICovXG5cdFx0YWRkX2V4aXN0aW5nX3F1aXpfY2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dGhpcy5wb3N0X3NlYXJjaF9wb3BvdmVyID0gbmV3IFBvcG92ZXIoIHtcblx0XHRcdFx0ZWw6ICcjbGxtcy1leGlzdGluZy1xdWl6Jyxcblx0XHRcdFx0YXJnczoge1xuXHRcdFx0XHRcdGJhY2tkcm9wOiB0cnVlLFxuXHRcdFx0XHRcdGNsb3NlYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb250YWluZXI6ICcud3JhcC5saWZ0ZXJsbXMubGxtcy1idWlsZGVyJyxcblx0XHRcdFx0XHRkaXNtaXNzaWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRwbGFjZW1lbnQ6ICdsZWZ0Jyxcblx0XHRcdFx0XHR3aWR0aDogNDgwLFxuXHRcdFx0XHRcdHRpdGxlOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnQWRkIEV4aXN0aW5nIFF1aXonICksXG5cdFx0XHRcdFx0Y29udGVudDogbmV3IFBvc3RTZWFyY2goIHtcblx0XHRcdFx0XHRcdHBvc3RfdHlwZTogJ2xsbXNfcXVpeicsXG5cdFx0XHRcdFx0XHRzZWFyY2hpbmdfbWVzc2FnZTogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1NlYXJjaCBmb3IgZXhpc3RpbmcgcXVpenplcy4uLicgKSxcblx0XHRcdFx0XHR9ICkucmVuZGVyKCkuJGVsLFxuXHRcdFx0XHRcdG9uSGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRCYWNrYm9uZS5wdWJTdWIub2ZmKCAncXVpei1zZWFyY2gtc2VsZWN0JyApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdFx0dGhpcy5wb3N0X3NlYXJjaF9wb3BvdmVyLnNob3coKTtcblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbmNlKCAncXVpei1zZWFyY2gtc2VsZWN0JywgdGhpcy5hZGRfZXhpc3RpbmdfcXVpeiwgdGhpcyApO1xuXG5cdFx0fSxcblxuXHRcdC8vIGZpbHRlcl9xdWVzdGlvbl90eXBlczogXy5kZWJvdW5jZSggZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gXHR2YXIgdGVybSA9ICQoIGV2ZW50LnRhcmdldCApLnZhbCgpO1xuXG5cdFx0Ly8gXHR0aGlzLlF1ZXN0aW9uQmFua1ZpZXcudmlld01hbmFnZXIuZWFjaCggZnVuY3Rpb24oIHZpZXcgKSB7XG5cdFx0Ly8gXHRcdGlmICggISB0ZXJtICkge1xuXHRcdC8vIFx0XHRcdHZpZXcuY2xlYXJfZmlsdGVyKCk7XG5cdFx0Ly8gXHRcdH0gZWxzZSB7XG5cdFx0Ly8gXHRcdFx0dmlldy5maWx0ZXIoIHRlcm0gKTtcblx0XHQvLyBcdFx0fVxuXHRcdC8vIFx0fSApO1xuXG5cblx0XHQvLyB9LCAzMDAgKSxcblxuXHRcdC8qKlxuXHRcdCAqIENhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gdGhlIHF1aXogaGFzIGJlZW4gZGVsZXRlZFxuXHRcdCAqIEBwYXJhbSAgICBvYmplY3QgICBxdWl6ICBRdWl6IE1vZGVsXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi42XG5cdFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdG9uX3RyYXNoZWQ6IGZ1bmN0aW9uKCBxdWl6ICkge1xuXG5cdFx0XHR0aGlzLmxlc3Nvbi5zZXQoICdxdWl6X2VuYWJsZWQnLCAnbm8nICk7XG5cdFx0XHR0aGlzLmxlc3Nvbi5zZXQoICdxdWl6JywgJycgKTtcblxuXHRcdFx0ZGVsZXRlIHRoaXMubW9kZWw7XG5cblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogXCJBZGQgUXVlc3Rpb25cIiBidXR0b24gY2xpY2sgZXZlbnRcblx0XHQgKiBDcmVhdGVzIGEgcG9wb3ZlciB3aXRoIHF1ZXN0aW9uIHR5cGUgbGlzdCBpbnRlcmZhY2Vcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0c2hvd190b29sczogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIGNyZWF0ZSBwb3BvdmVyXG5cdFx0XHR2YXIgcG9wID0gbmV3IFBvcG92ZXIoIHtcblx0XHRcdFx0ZWw6ICcjbGxtcy1zaG93LXF1ZXN0aW9uLWJhbmsnLFxuXHRcdFx0XHRhcmdzOiB7XG5cdFx0XHRcdFx0YmFja2Ryb3A6IHRydWUsXG5cdFx0XHRcdFx0Y2xvc2VhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbnRhaW5lcjogJyNsbG1zLWJ1aWxkZXItc2lkZWJhcicsXG5cdFx0XHRcdFx0ZGlzbWlzc2libGU6IHRydWUsXG5cdFx0XHRcdFx0cGxhY2VtZW50OiAndG9wLWxlZnQnLFxuXHRcdFx0XHRcdHdpZHRoOiAnY2FsYyggMTAwJSAtIDQwcHggKScsXG5cdFx0XHRcdFx0dGl0bGU6IExMTVMubDEwbi50cmFuc2xhdGUoICdBZGQgYSBRdWVzdGlvbicgKSxcblx0XHRcdFx0XHR1cmw6ICcjbGxtcy1xdWl6LXRvb2xzJyxcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBzaG93IGl0XG5cdFx0XHRwb3Auc2hvdygpO1xuXG5cdFx0XHQvLyBpZiBhIHF1ZXN0aW9uIGlzIGFkZGVkLCBoaWRlIHRoZSBwb3BvdmVyXG5cdFx0XHR0aGlzLm1vZGVsLm9uKCAnbmV3LXF1ZXN0aW9uLWFkZGVkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHBvcC5oaWRlKCk7XG5cdFx0XHR9ICk7XG5cblx0XHR9LFxuXG5cdFx0Z2V0X3F1ZXN0aW9uX2xpc3Q6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdFx0cmV0dXJuIG5ldyBRdWVzdGlvbkxpc3QoIG9wdGlvbnMgKTtcblx0XHR9XG5cblx0fSwgRGV0YWNoYWJsZSwgRWRpdGFibGUsIFN1YnZpZXcsIFRyYXNoYWJsZSwgU2V0dGluZ3NGaWVsZHMgKSApO1xuXG59ICk7XG5cbi8qKlxuICogU2luZ2xlIEFzc2lnbm1lbnQgVmlld1xuICogQHNpbmNlICAgIDMuMTcuMFxuICogQHZlcnNpb24gIDMuMTcuN1xuICovXG5kZWZpbmUoICdWaWV3cy9Bc3NpZ25tZW50JyxbXG5cdFx0J1ZpZXdzL1BvcG92ZXInLFxuXHRcdCdWaWV3cy9Qb3N0U2VhcmNoJyxcblx0XHQnVmlld3MvX0RldGFjaGFibGUnLFxuXHRcdCdWaWV3cy9fRWRpdGFibGUnLFxuXHRcdCdWaWV3cy9fVHJhc2hhYmxlJyxcblx0XHQnVmlld3MvX1N1YnZpZXcnLFxuXHRcdCdWaWV3cy9TZXR0aW5nc0ZpZWxkcydcblx0XSwgZnVuY3Rpb24oXG5cdFx0UG9wb3Zlcixcblx0XHRQb3N0U2VhcmNoLFxuXHRcdERldGFjaGFibGUsXG5cdFx0RWRpdGFibGUsXG5cdFx0VHJhc2hhYmxlLFxuXHRcdFN1YnZpZXcsXG5cdFx0U2V0dGluZ3NGaWVsZHNcblx0KSB7XG5cblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKCBfLmRlZmF1bHRzKCB7XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHZpZXcgc3RhdGVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHRzdGF0ZTogJ2RlZmF1bHQnLFxuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBTdWJ2aWV3c1xuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHZpZXdzOiB7XG5cdFx0XHRzZXR0aW5nczoge1xuXHRcdFx0XHRjbGFzczogU2V0dGluZ3NGaWVsZHMsXG5cdFx0XHRcdGluc3RhbmNlOiBudWxsLFxuXHRcdFx0XHRzdGF0ZTogJ2RlZmF1bHQnLFxuXHRcdFx0fSxcblx0XHR9LFxuXG5cdFx0ZWw6ICcjbGxtcy1lZGl0b3ItYXNzaWdubWVudCcsXG5cblx0XHQvKipcblx0XHQgKiBET00gRXZlbnRzXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjFcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4xXG5cdFx0ICovXG5cdFx0ZXZlbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhZGRvbl9ldmVudHMgPSB0aGlzLmlzX2FkZG9uX2F2YWlsYWJsZSgpID8gd2luZG93LmxsbXNfYnVpbGRlci5hc3NpZ25tZW50cy5nZXRfdmlld19ldmVudHMoKSA6IHt9O1xuXHRcdFx0cmV0dXJuIF8uZGVmYXVsdHMoIHtcblx0XHRcdFx0J2NsaWNrICNsbG1zLWV4aXN0aW5nLWFzc2lnbm1lbnQnOiAnYWRkX2V4aXN0aW5nX2Fzc2lnbm1lbnRfY2xpY2snLFxuXHRcdFx0XHQnY2xpY2sgI2xsbXMtbmV3LWFzc2lnbm1lbnQnOiAnYWRkX25ld19hc3NpZ25tZW50Jyxcblx0XHRcdH0sIERldGFjaGFibGUuZXZlbnRzLCBFZGl0YWJsZS5ldmVudHMsIFRyYXNoYWJsZS5ldmVudHMsIGFkZG9uX2V2ZW50cyApO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBXcmFwcGVyIFRhZyBuYW1lXG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0dGFnTmFtZTogJ2RpdicsXG5cblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIHVuZGVyc2NvcmUgdGVtcGxhdGVcblx0XHQgKiBAdHlwZSAge1t0eXBlXX1cblx0XHQgKi9cblx0XHR0ZW1wbGF0ZTogd3AudGVtcGxhdGUoICdsbG1zLWFzc2lnbm1lbnQtdGVtcGxhdGUnICksXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXphdGlvbiBjYWxsYmFjayBmdW5jIChyZW5kZXJzIHRoZSBlbGVtZW50IG9uIHNjcmVlbilcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE3LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNy4yXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdHRoaXMubGVzc29uID0gZGF0YS5sZXNzb247XG5cblx0XHRcdC8vIGluaXRpYWxpemUgdGhlIG1vZGVsIGlmIHRoZSBhc3NpZ25tZW50IGlzIGVuYWJsZWQgb3IgaXQncyBkaXNhYmxlZCBidXQgd2Ugc3RpbGwgaGF2ZSBkYXRhIGZvciBhIGFzc2lnbm1lbnRcblx0XHRcdGlmICggJ3llcycgPT09IHRoaXMubGVzc29uLmdldCggJ2Fzc2lnbm1lbnRfZW5hYmxlZCcgKSB8fCAhIF8uaXNFbXB0eSggdGhpcy5sZXNzb24uZ2V0KCAnYXNzaWdubWVudCcgKSApICkge1xuXG5cdFx0XHRcdHRoaXMubW9kZWwgPSB0aGlzLmxlc3Nvbi5nZXQoICdhc3NpZ25tZW50JyApO1xuXG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBAdG9kbyAgdGhpcyBpcyBhIHRlcnJpbGJlIHRlcnJpYmxlIHBhdGNoXG5cdFx0XHRcdCAqICAgICAgICBJJ3ZlIHNwZW50IG5lYXJseSAzIGRheXMgdHJ5aW5nIHRvIGZpZ3VyZSBvdXQgaG93IHRvIG5vdCB1c2UgdGhpcyBsaW5lIG9mIGNvZGVcblx0XHRcdFx0ICogICAgICAgIElTU1VFIFJFUFJPRFVDVElPTjpcblx0XHRcdFx0ICogICAgICAgIE9wZW4gY291cnNlIGJ1aWxkZXJcblx0XHRcdFx0ICogICAgICAgIE9wZW4gYSBsZXNzb24gKEEpIGFuZCBhZGQgYSBhc3NpZ25tZW50XG5cdFx0XHRcdCAqICAgICAgICBTd2l0Y2ggdG8gYSBuZXcgbGVzc29uIChCKVxuXHRcdFx0XHQgKiAgICAgICAgQWRkIGEgbmV3IGFzc2lnbm1lbnRcblx0XHRcdFx0ICogICAgICAgIFJldHVybiB0byBsZXNzb24gQSBhbmQgdGhlIGFzc2lnbm1lbnQncyBwYXJlbnQgd2lsbCBiZSBzZXQgdG8gTEVTU09OIEJcblx0XHRcdFx0ICogICAgICAgIFRoaXMgd2lsbCBoYXBwZW4gZm9yICpldmVyeSogYXNzaWdubWVudCBpbiB0aGUgYnVpbGRlci4uLlxuXHRcdFx0XHQgKiAgICAgICAgQWRkaW5nIHRoaXMgc2V0X3BhcmVudCBvbiBpbml0IGd1YXJhbnRlZXMgdGhhdCB0aGUgYXNzaWdubWVudCdzIGNvcnJlY3QgcGFyZW50IGlzIHNldFxuXHRcdFx0XHQgKiAgICAgICAgYWZ0ZXIgYWRkaW5nIG5ldyBhc3NpZ25tZW50J3MgdG8gb3RoZXIgbGVzc29uc1xuXHRcdFx0XHQgKiAgICAgICAgaXQncyBhd2Z1bCBhbmQgaXQncyBncm9zcy4uLlxuXHRcdFx0XHQgKiAgICAgICAgSSdtIGNvbmZ1c2VkIGFuZCB0aXJlZCBhbmQgZ29pbmcgdG8gbWlzcyByZWxlYXNlIGRhdGVzIGFnYWluIGJlY2F1c2Ugb2YgaXRcblx0XHRcdFx0ICovXG5cdFx0XHRcdHRoaXMubW9kZWwuc2V0X3BhcmVudCggdGhpcy5sZXNzb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm9uKCAnbW9kZWwtdHJhc2hlZCcsIHRoaXMub25fdHJhc2hlZCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENvbXBpbGVzIHRoZSB0ZW1wbGF0ZSBhbmQgcmVuZGVycyB0aGUgdmlld1xuXHRcdCAqIEByZXR1cm4gICBzZWxmIChmb3IgY2hhaW5pbmcpXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3Ljdcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLnRlbXBsYXRlKCB0aGlzLm1vZGVsICkgKTtcblxuXHRcdFx0aWYgKCB0aGlzLm1vZGVsICYmIHRoaXMuaXNfYWRkb25fYXZhaWxhYmxlKCkgKSB7XG5cblx0XHRcdFx0dGhpcy5zdG9wTGlzdGVuaW5nKCB0aGlzLm1vZGVsLCAnY2hhbmdlOmFzc2lnbm1lbnRfdHlwZScsIHRoaXMucmVuZGVyICk7XG5cblx0XHRcdFx0dGhpcy5yZW5kZXJfc3VidmlldyggJ3NldHRpbmdzJywge1xuXHRcdFx0XHRcdGVsOiAnI2xsbXMtYXNzaWdubWVudC1zZXR0aW5ncy1maWVsZHMnLFxuXHRcdFx0XHRcdG1vZGVsOiB0aGlzLm1vZGVsLFxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gdGhpcy5pbml0X2RhdGVwaWNrZXJzKCk7XG5cdFx0XHRcdHRoaXMuaW5pdF9zZWxlY3RzKCk7XG5cblx0XHRcdFx0d2luZG93LmxsbXNfYnVpbGRlci5hc3NpZ25tZW50cy5yZW5kZXJfZWRpdG9yKCB0aGlzICk7XG5cblx0XHRcdFx0dGhpcy5saXN0ZW5UbyggdGhpcy5tb2RlbCwgJ2NoYW5nZTphc3NpZ25tZW50X3R5cGUnLCB0aGlzLnJlbmRlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEFkZHMgYSBuZXcgYXNzaWdubWVudCB0byBhIGxlc3NvbiB3aGljaCBjdXJyZW50bHkgaGFzIG5vIGFzc2lnbm1lbnQgYXNzb2NpYXRlZCB3bGl0aCBpdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRhZGRfbmV3X2Fzc2lnbm1lbnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHRoaXMuaXNfYWRkb25fYXZhaWxhYmxlKCkgKSB7XG5cblx0XHRcdFx0dGhpcy5tb2RlbCA9IHdpbmRvdy5sbG1zX2J1aWxkZXIuYXNzaWdubWVudHMuZ2V0X2Fzc2lnbm1lbnQoIHtcblx0XHRcdFx0XHQvKiB0cmFuc2xhdG9yczogJTEkcyA9IGFzc29jaWF0ZWQgbGVzc29uIHRpdGxlICovXG5cdFx0XHRcdFx0dGl0bGU6IExMTVMubDEwbi5yZXBsYWNlKCAnJTEkcyBBc3NpZ25tZW50Jywge1xuXHRcdFx0XHRcdFx0JyUxJHMnOiB0aGlzLmxlc3Nvbi5nZXQoICd0aXRsZScgKSxcblx0XHRcdFx0XHR9ICksXG5cdFx0XHRcdFx0bGVzc29uX2lkOiB0aGlzLmxlc3Nvbi5nZXQoICdpZCcgKSxcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdHRoaXMubGVzc29uLnNldCggJ2Fzc2lnbm1lbnRfZW5hYmxlZCcsICd5ZXMnICk7XG5cdFx0XHRcdHRoaXMubGVzc29uLnNldCggJ2Fzc2lnbm1lbnQnLCB0aGlzLm1vZGVsICk7XG5cblx0XHRcdFx0dGhpcy5yZW5kZXIoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLnNob3dfYWRfcG9wb3ZlciggJyNsbG1zLW5ldy1hc3NpZ25tZW50JyApO1xuXG5cdFx0XHR9XG5cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBXaGVuIGFuIGFzc2lnbm1lbnQgaXMgc2VsZWN0ZWQgZnJvbSB0aGUgcG9zdCBzZWxlY3QgcG9wb3ZlclxuXHRcdCAqIGluc3RhbnRpYXRlIGl0IGFuZCBhZGQgaXQgdG8gdGhlIGN1cnJlbnQgbGVzc29uXG5cdFx0ICogQHBhcmFtICAgIG9iamVjdCAgIGV2ZW50ICBkYXRhIGZyb20gdGhlIHNlbGVjdDIgc2VsZWN0IGV2ZW50XG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRhZGRfZXhpc3RpbmdfYXNzaWdubWVudDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHR0aGlzLnBvc3Rfc2VhcmNoX3BvcG92ZXIuaGlkZSgpO1xuXG5cdFx0XHR2YXIgYXNzaWdubWVudCA9IGV2ZW50LmRhdGE7XG5cblx0XHRcdGlmICggJ2Nsb25lJyA9PT0gZXZlbnQuYWN0aW9uICkge1xuXG5cdFx0XHRcdGRlbGV0ZSBhc3NpZ25tZW50LmlkO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGFzc2lnbm1lbnQuX2ZvcmNlU3luYyA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0YXNzaWdubWVudC5sZXNzb25faWQgPSB0aGlzLmxlc3Nvbi5nZXQoICdpZCcgKVxuXG5cdFx0XHRhc3NpZ25tZW50ID0gd2luZG93LmxsbXNfYnVpbGRlci5jb25zdHJ1Y3QuZ2V0X21vZGVsKCAnQXNzaWdubWVudCcsIGFzc2lnbm1lbnQgKTtcblxuXHRcdFx0dGhpcy5sZXNzb24uc2V0KCAnYXNzaWdubWVudF9lbmFibGVkJywgJ3llcycgKTtcblx0XHRcdHRoaXMubGVzc29uLnNldCggJ2Fzc2lnbm1lbnQnLCBhc3NpZ25tZW50ICk7XG5cdFx0XHR0aGlzLm1vZGVsID0gYXNzaWdubWVudDtcblxuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBPcGVuIGFkZCBleGlzdGluZyBhc3NpZ25tZW50IHBvcG92ZXJcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgZXZlbnQgIEpTIGV2ZW50IG9iamVjdFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRhZGRfZXhpc3RpbmdfYXNzaWdubWVudF9jbGljazogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRpZiAoIHRoaXMuaXNfYWRkb25fYXZhaWxhYmxlKCkgKSB7XG5cblx0XHRcdFx0dGhpcy5wb3N0X3NlYXJjaF9wb3BvdmVyID0gbmV3IFBvcG92ZXIoIHtcblx0XHRcdFx0XHRlbDogJyNsbG1zLWV4aXN0aW5nLWFzc2lnbm1lbnQnLFxuXHRcdFx0XHRcdGFyZ3M6IHtcblx0XHRcdFx0XHRcdGJhY2tkcm9wOiB0cnVlLFxuXHRcdFx0XHRcdFx0Y2xvc2VhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdFx0Y29udGFpbmVyOiAnLndyYXAubGlmdGVybG1zLmxsbXMtYnVpbGRlcicsXG5cdFx0XHRcdFx0XHRkaXNtaXNzaWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHBsYWNlbWVudDogJ2xlZnQnLFxuXHRcdFx0XHRcdFx0d2lkdGg6IDQ4MCxcblx0XHRcdFx0XHRcdHRpdGxlOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnQWRkIEV4aXN0aW5nIEFzc2lnbm1lbnQnICksXG5cdFx0XHRcdFx0XHRjb250ZW50OiBuZXcgUG9zdFNlYXJjaCgge1xuXHRcdFx0XHRcdFx0XHRwb3N0X3R5cGU6ICdsbG1zX2Fzc2lnbm1lbnQnLFxuXHRcdFx0XHRcdFx0XHRzZWFyY2hpbmdfbWVzc2FnZTogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ1NlYXJjaCBmb3IgZXhpc3RpbmcgYXNzaWdubWVudHMuLi4nICksXG5cdFx0XHRcdFx0XHR9ICkucmVuZGVyKCkuJGVsLFxuXHRcdFx0XHRcdFx0b25IaWRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0QmFja2JvbmUucHViU3ViLm9mZiggJ2Fzc2lnbm1lbnQtc2VhcmNoLXNlbGVjdCcgKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0dGhpcy5wb3N0X3NlYXJjaF9wb3BvdmVyLnNob3coKTtcblx0XHRcdFx0QmFja2JvbmUucHViU3ViLm9uY2UoICdhc3NpZ25tZW50LXNlYXJjaC1zZWxlY3QnLCB0aGlzLmFkZF9leGlzdGluZ19hc3NpZ25tZW50LCB0aGlzICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5zaG93X2FkX3BvcG92ZXIoICcjbGxtcy1leGlzdGluZy1hc3NpZ25tZW50JyApO1xuXG5cdFx0XHR9XG5cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmUgaWYgQXNzaWdubWVudHMgYWRkb24gaXMgYXZhaWxhYmxlIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4gICB7Qm9vbGVhbn1cblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdGlzX2FkZG9uX2F2YWlsYWJsZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHJldHVybiAoIHdpbmRvdy5sbG1zX2J1aWxkZXIuYXNzaWdubWVudHMgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDYWxsZWQgd2hlbiBhc3NpZ25tZW50IGlzIHRyYXNoZWRcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgYXNzaWdubWVudCAgQXNzaWdubWVudCBtb2RlbFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjBcblx0XHQgKi9cblx0XHRvbl90cmFzaGVkOiBmdW5jdGlvbiggYXNzaWdubWVudCApIHtcblxuXHRcdFx0dGhpcy5sZXNzb24uc2V0KCAnYXNzaWdubWVudF9lbmFibGVkJywgJ25vJyApO1xuXHRcdFx0dGhpcy5sZXNzb24uc2V0KCAnYXNzaWdubWVudCcsICcnICk7XG5cblx0XHRcdGRlbGV0ZSB0aGlzLm1vZGVsO1xuXG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNob3dzIGEgZGlydHkgZGlydHkgYWQgcG9wb2V2ZXIgZm9yIGFkdmFuY2VkIGFzc2lnbm1lbnRzXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIGVsICBqUXVlcnkgc2VsZWN0b3Igc3RyaW5nXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNy4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTcuMFxuXHRcdCAqL1xuXHRcdHNob3dfYWRfcG9wb3ZlcjogZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaDMgPSBMTE1TLmwxMG4udHJhbnNsYXRlKCAnR2V0IFlvdXIgU3R1ZGVudHMgVGFraW5nIEFjdGlvbicgKSxcblx0XHRcdFx0cCA9ICdHcmVhdCBsZWFybmluZyBjb250ZW50IGlzIG9ubHkgaGFsZiBvZiB0ZWFjaGluZyBvbmxpbmUuIFdoZW4geW91ciBsZWFybmVycyBmdWxseSBlbmdhZ2UsIHRoZXkgd2lsbCB0YWtlIHlvdXIgY29udGVudCBhbmQgbW92ZSBpbnRvIGFjdGlvbi4gUmVtb3ZlIGJhcnJpZXJzIGZvciB5b3VyIGxlYXJuZXJzIGJ5IHRlbGxpbmcgdGhlbSB3aGF0IHRvIGRvIHRvIGFwcGx5IHdoYXQgdGhleSBqdXN0IGxlYXJuZWQuIENyZWF0ZSBncmFkZWQgYXNzaWdubWVudHMgb3Igc2ltcGx5IGdpdmUgdGhlbSBhIGNoZWNrbGlzdCBvZiBhY3Rpb24gaXRlbXMgdG8gY29tcGxldGUgYmVmb3JlIG1vdmluZyBvbi4nLFxuXHRcdFx0XHRidG4gPSBMTE1TLmwxMG4udHJhbnNsYXRlKCAnR2V0IEFzc2lnbm1lbnRzIE5vdyEnICksXG5cdFx0XHRcdHVybCA9ICdodHRwczovL2xpZnRlcmxtcy5jb20vcHJvZHVjdC9saWZ0ZXJsbXMtYXNzaWdubWVudHM/dXRtX3NvdXJjZT1MaWZ0ZXJMTVMlMjBQbHVnaW4mdXRtX21lZGl1bT1Bc3NpZ25tZW50JTIwQnVpbGRlciUyMEJ1dHRvbiZ1dG1fY2FtcGFpZ249QXNzaWdubWVudCUyMEFkZG9uJTIwVXBzZWxsJnV0bV9jb250ZW50PTMuMTcuMCc7XG5cblx0XHRcdHRoaXMuYWRfcG9wb3ZlciA9IG5ldyBQb3BvdmVyKCB7XG5cdFx0XHRcdGVsOiBlbCxcblx0XHRcdFx0YXJnczoge1xuXHRcdFx0XHRcdGJhY2tkcm9wOiB0cnVlLFxuXHRcdFx0XHRcdGNsb3NlYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb250YWluZXI6ICcud3JhcC5saWZ0ZXJsbXMubGxtcy1idWlsZGVyJyxcblx0XHRcdFx0XHRkaXNtaXNzaWJsZTogdHJ1ZSxcblx0XHRcdFx0XHQvLyBwbGFjZW1lbnQ6ICdsZWZ0Jyxcblx0XHRcdFx0XHR3aWR0aDogMzgwLFxuXHRcdFx0XHRcdHRpdGxlOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnVW5sb2NrIExpZnRlckxNUyBBc3NpZ25tZW50cycgKSxcblx0XHRcdFx0XHRjb250ZW50OiAnPGgzPicgKyBoMyArICc8L2gzPjxwPicgKyBwICsgJzwvcD48YnI+PHA+PGEgY2xhc3M9XCJsbG1zLWJ1dHRvbi1wcmltYXJ5XCIgaHJlZj1cIicgKyB1cmwgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JyArIGJ0biArICc8L2E+PC9wPidcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmFkX3BvcG92ZXIuc2hvdygpO1xuXG5cdFx0fSxcblxuXHR9LCBEZXRhY2hhYmxlLCBFZGl0YWJsZSwgVHJhc2hhYmxlLCBTdWJ2aWV3LCBTZXR0aW5nc0ZpZWxkcyApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBTaWRlYmFyIEVkaXRvciBWaWV3XG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNy4wXG4gKi9cbmRlZmluZSggJ1ZpZXdzL0VkaXRvcicsW1xuXHRcdCdWaWV3cy9MZXNzb25FZGl0b3InLFxuXHRcdCdWaWV3cy9RdWl6Jyxcblx0XHQnVmlld3MvQXNzaWdubWVudCcsXG5cdFx0J1ZpZXdzL19TdWJ2aWV3J1xuXHRdLCBmdW5jdGlvbihcblx0XHRMZXNzb25FZGl0b3IsXG5cdFx0UXVpeixcblx0XHRBc3NpZ25tZW50LFxuXHRcdFN1YnZpZXdcblx0KSB7XG5cblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKCBfLmRlZmF1bHRzKCB7XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHZpZXcgc3RhdGVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHRzdGF0ZTogJ2xlc3NvbicsIC8vIFtsZXNzb258cXVpel1cblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgU3Vidmlld3Ncblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHR2aWV3czoge1xuXHRcdFx0bGVzc29uOiB7XG5cdFx0XHRcdGNsYXNzOiBMZXNzb25FZGl0b3IsXG5cdFx0XHRcdGluc3RhbmNlOiBudWxsLFxuXHRcdFx0XHRzdGF0ZTogJ2xlc3NvbicsXG5cdFx0XHR9LFxuXHRcdFx0YXNzaWdubWVudDoge1xuXHRcdFx0XHRjbGFzczogQXNzaWdubWVudCxcblx0XHRcdFx0aW5zdGFuY2U6IG51bGwsXG5cdFx0XHRcdHN0YXRlOiAnYXNzaWdubWVudCcsXG5cdFx0XHR9LFxuXHRcdFx0cXVpejoge1xuXHRcdFx0XHRjbGFzczogUXVpeixcblx0XHRcdFx0aW5zdGFuY2U6IG51bGwsXG5cdFx0XHRcdHN0YXRlOiAncXVpeicsXG5cdFx0XHR9LFxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBIVE1MIGVsZW1lbnQgc2VsZWN0b3Jcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHRlbDogJyNsbG1zLWVkaXRvcicsXG5cblx0XHRldmVudHM6IHtcblx0XHRcdCdjbGljayAubGxtcy1lZGl0b3ItbmF2IGFbaHJlZj1cIiNsbG1zLWVkaXRvci1jbG9zZVwiXSc6ICdjbG9zZV9lZGl0b3InLFxuXHRcdFx0J2NsaWNrIC5sbG1zLWVkaXRvci1uYXYgYTpub3QoW2hyZWY9XCIjbGxtcy1lZGl0b3ItY2xvc2VcIl0pJzogJ3N3aXRjaF90YWInLFxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBXcmFwcGVyIFRhZyBuYW1lXG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0dGFnTmFtZTogJ2RpdicsXG5cblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIHVuZGVyc2NvcmUgdGVtcGxhdGVcblx0XHQgKiBAdHlwZSAge1t0eXBlXX1cblx0XHQgKi9cblx0XHR0ZW1wbGF0ZTogd3AudGVtcGxhdGUoICdsbG1zLWVkaXRvci10ZW1wbGF0ZScgKSxcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemF0aW9uIGNhbGxiYWNrIGZ1bmMgKHJlbmRlcnMgdGhlIGVsZW1lbnQgb24gc2NyZWVuKVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0dGhpcy5TaWRlYmFyVmlldyA9IGRhdGEuU2lkZWJhclZpZXc7XG5cdFx0XHRpZiAoIGRhdGEudGFiICkge1xuXHRcdFx0XHR0aGlzLnN0YXRlID0gZGF0YS50YWI7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ29tcGlsZXMgdGhlIHRlbXBsYXRlIGFuZCByZW5kZXJzIHRoZSB2aWV3XG5cdFx0ICogQHJldHVybiAgIHNlbGYgKGZvciBjaGFpbmluZylcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHJlbmRlcjogZnVuY3Rpb24oIHZpZXdfZGF0YSApIHtcblxuXHRcdFx0dmlld19kYXRhID0gdmlld19kYXRhIHx8IHt9O1xuXG5cdFx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLnRlbXBsYXRlKCB0aGlzICkgKTtcblxuXHRcdFx0dGhpcy5yZW5kZXJfc3Vidmlld3MoIF8uZXh0ZW5kKCB2aWV3X2RhdGEsIHtcblx0XHRcdFx0bGVzc29uOiB0aGlzLm1vZGVsLFxuXHRcdFx0fSApICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsaWNrIGV2ZW50IGZvciBjbG9zZSBzaWRlYmFyIGVkaXRvciBidXR0b25cblx0XHQgKiBTZW5kcyBldmVudCB0byBtYWluIFNpZGViYXJWaWV3IHRvIHRyaWdnZXIgZWRpdG9yIGNsb3NpbmcgZXZlbnRzXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGV2ZW50ICBqcyBldmVudCBvYmpcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Y2xvc2VfZWRpdG9yOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ3NpZGViYXItZWRpdG9yLWNsb3NlJyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsaWNrIGV2ZW50IGZvciBzd2l0Y2hpbmcgdGFicyBpbiB0aGUgZWRpdG9yIG5hdmlnYXRpb25cblx0XHQgKiBAcGFyYW0gICAgb2JqZWN0ICBldmVudCAganMgZXZlbnQgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHN3aXRjaF90YWI6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dmFyICRidG4gPSAkKCBldmVudC50YXJnZXQgKSxcblx0XHRcdFx0dmlldyA9ICRidG4uYXR0ciggJ2RhdGEtdmlldycgKSxcblx0XHRcdFx0JHRhYiA9IHRoaXMuJGVsLmZpbmQoICRidG4uYXR0ciggJ2hyZWYnICkgKTtcblxuXHRcdFx0dGhpcy5zZXRfc3RhdGUoIHZpZXcgKS5yZW5kZXIoKTtcblxuXHRcdFx0Ly8gQmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdlZGl0b3ItdGFiLWFjdGl2YXRlZCcsICRidG4uYXR0ciggJ2hyZWYnICkuc3Vic3RyaW5nKCAxICkgKTtcblxuXHRcdH0sXG5cblx0fSwgU3VidmlldyApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBTaWRlYmFyIEVsZW1lbnRzIFZpZXdcbiAqIEBzaW5jZSAgICAzLjE2LjBcbiAqIEB2ZXJzaW9uICAzLjE2LjEyXG4gKi9cbmRlZmluZSggJ1ZpZXdzL0VsZW1lbnRzJyxbICdNb2RlbHMvU2VjdGlvbicsICdWaWV3cy9TZWN0aW9uJywgJ01vZGVscy9MZXNzb24nLCAnVmlld3MvTGVzc29uJywgJ1ZpZXdzL1BvcG92ZXInLCAnVmlld3MvUG9zdFNlYXJjaCcgXSwgZnVuY3Rpb24oIFNlY3Rpb24sIFNlY3Rpb25WaWV3LCBMZXNzb24sIExlc3NvblZpZXcsIFBvcG92ZXIsIExlc3NvblNlYXJjaCApIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoIHtcblxuXHRcdC8qKlxuXHRcdCAqIEhUTUwgZWxlbWVudCBzZWxlY3RvclxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdGVsOiAnI2xsbXMtZWxlbWVudHMnLFxuXG5cdFx0ZXZlbnRzOiB7XG5cdFx0XHQnY2xpY2sgI2xsbXMtbmV3LXNlY3Rpb24nOiAnYWRkX25ld19zZWN0aW9uJyxcblx0XHRcdCdjbGljayAjbGxtcy1uZXctbGVzc29uJzogJ2FkZF9uZXdfbGVzc29uJyxcblx0XHRcdCdjbGljayAjbGxtcy1leGlzdGluZy1sZXNzb24nOiAnYWRkX2V4aXN0aW5nX2xlc3NvbicsXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFdyYXBwZXIgVGFnIG5hbWVcblx0XHQgKiBAdHlwZSAge1N0cmluZ31cblx0XHQgKi9cblx0XHR0YWdOYW1lOiAnZGl2JyxcblxuXHRcdC8qKlxuXHRcdCAqIEdldCB0aGUgdW5kZXJzY29yZSB0ZW1wbGF0ZVxuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdHRlbXBsYXRlOiB3cC50ZW1wbGF0ZSggJ2xsbXMtZWxlbWVudHMtdGVtcGxhdGUnICksXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXphdGlvbiBjYWxsYmFjayBmdW5jIChyZW5kZXJzIHRoZSBlbGVtZW50IG9uIHNjcmVlbilcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdC8vIHNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIG1haW4gQ291cnNlIHZpZXdcblx0XHRcdHRoaXMuU2lkZWJhclZpZXcgPSBkYXRhLlNpZGViYXJWaWV3O1xuXG5cdFx0XHQvLyB3YXRjaCBjb3Vyc2Ugc2VjdGlvbnMgYW5kIGVuYWJsZS9kaXNhYmxlIGxlc3NvbiBidXR0b25zIGNvbmRpdGlvbmFsbHlcblx0XHRcdHRoaXMubGlzdGVuVG8oIHRoaXMuU2lkZWJhclZpZXcuQ291cnNlVmlldy5tb2RlbC5nZXQoICdzZWN0aW9ucycgKSwgJ2FkZCcsIHRoaXMubWF5YmVfZGlzYWJsZV9idXR0b25zICk7XG5cdFx0XHR0aGlzLmxpc3RlblRvKCB0aGlzLlNpZGViYXJWaWV3LkNvdXJzZVZpZXcubW9kZWwuZ2V0KCAnc2VjdGlvbnMnICksICdyZW1vdmUnLCB0aGlzLm1heWJlX2Rpc2FibGVfYnV0dG9ucyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENvbXBpbGVzIHRoZSB0ZW1wbGF0ZSBhbmQgcmVuZGVycyB0aGUgdmlld1xuXHRcdCAqIEByZXR1cm4gICBzZWxmIChmb3IgY2hhaW5pbmcpXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLnRlbXBsYXRlKCkgKTtcblx0XHRcdHRoaXMuZHJhZ2dhYmxlKCk7XG5cdFx0XHR0aGlzLm1heWJlX2Rpc2FibGVfYnV0dG9ucygpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0ZHJhZ2dhYmxlOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0JCggJyNsbG1zLW5ldy1zZWN0aW9uJyApLmRyYWdnYWJsZSgge1xuXHRcdFx0XHRhcHBlbmRUbzogJyNsbG1zLXNlY3Rpb25zJyxcblx0XHRcdFx0Y2FuY2VsOiBmYWxzZSxcblx0XHRcdFx0Y29ubmVjdFRvU29ydGFibGU6ICcubGxtcy1zZWN0aW9ucycsXG5cdFx0XHRcdGhlbHBlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBTZWN0aW9uVmlldyggeyBtb2RlbDogbmV3IFNlY3Rpb24oKSB9ICkucmVuZGVyKCkuJGVsO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdGFydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JCggJy5sbG1zLXNlY3Rpb25zJyApLmFkZENsYXNzKCAnZHJhZ2dpbmcnICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoICcubGxtcy1zZWN0aW9ucycgKS5yZW1vdmVDbGFzcyggJ2RyYWdnaW5nJyApO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSApO1xuXG5cdFx0XHQkKCAnI2xsbXMtbmV3LWxlc3NvbicgKS5kcmFnZ2FibGUoIHtcblx0XHRcdFx0Ly8gYXBwZW5kVG86ICcjbGxtcy1zZWN0aW9ucyAubGxtcy1zZWN0aW9uOmZpcnN0LWNoaWxkIC5sbG1zLWxlc3NvbnMnLFxuXHRcdFx0XHRhcHBlbmRUbzogJyNsbG1zLXNlY3Rpb25zJyxcblx0XHRcdFx0Y2FuY2VsOiBmYWxzZSxcblx0XHRcdFx0Y29ubmVjdFRvU29ydGFibGU6ICcubGxtcy1sZXNzb25zJyxcblx0XHRcdFx0aGVscGVyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gbmV3IExlc3NvblZpZXcoIHsgbW9kZWw6IG5ldyBMZXNzb24oKSB9ICkucmVuZGVyKCkuJGVsO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdGFydDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHQkKCAnLmxsbXMtbGVzc29ucycgKS5hZGRDbGFzcyggJ2RyYWdnaW5nJyApO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoICcubGxtcy1sZXNzb25zJyApLnJlbW92ZUNsYXNzKCAnZHJhZ2dpbmcnICk7XG5cdFx0XHRcdFx0JCggJy5kcmFnLWV4cGFuZGVkJyApLnJlbW92ZUNsYXNzKCAnLmRyYWctZXhwYW5kZWQnICk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9ICk7XG5cblx0XHR9LFxuXG5cdFx0YWRkX25ld19zZWN0aW9uOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ2FkZC1uZXctc2VjdGlvbicgKTtcblx0XHR9LFxuXG5cdFx0YWRkX25ld19sZXNzb246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRCYWNrYm9uZS5wdWJTdWIudHJpZ2dlciggJ2FkZC1uZXctbGVzc29uJyApO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTaG93IHRoZSBwb3BvdmVyIHRvIGFkZCBhbiBleGlzdGluZyBsZXNzb25zXG5cdFx0ICogQHBhcmFtICAgIG9iamVjdCAgIGV2ZW50ICBKUyBFdmVudCBPQmplY3Rcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjEyXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMTJcblx0XHQgKi9cblx0XHRhZGRfZXhpc3RpbmdfbGVzc29uOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHZhciBwb3AgPSBuZXcgUG9wb3Zlcigge1xuXHRcdFx0XHRlbDogJyNsbG1zLWV4aXN0aW5nLWxlc3NvbicsXG5cdFx0XHRcdGFyZ3M6IHtcblx0XHRcdFx0XHRiYWNrZHJvcDogdHJ1ZSxcblx0XHRcdFx0XHRjbG9zZWFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29udGFpbmVyOiAnLndyYXAubGlmdGVybG1zLmxsbXMtYnVpbGRlcicsXG5cdFx0XHRcdFx0ZGlzbWlzc2libGU6IHRydWUsXG5cdFx0XHRcdFx0cGxhY2VtZW50OiAnbGVmdCcsXG5cdFx0XHRcdFx0d2lkdGg6IDQ4MCxcblx0XHRcdFx0XHR0aXRsZTogTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0FkZCBFeGlzdGluZyBMZXNzb24nICksXG5cdFx0XHRcdFx0Y29udGVudDogbmV3IExlc3NvblNlYXJjaCgge1xuXHRcdFx0XHRcdFx0cG9zdF90eXBlOiAnbGVzc29uJyxcblx0XHRcdFx0XHRcdHNlYXJjaGluZ19tZXNzYWdlOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnU2VhcmNoIGZvciBleGlzdGluZyBsZXNzb25zLi4uJyApLFxuXHRcdFx0XHRcdH0gKS5yZW5kZXIoKS4kZWwsXG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdFx0cG9wLnNob3coKTtcblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggJ2xlc3Nvbi1zZWFyY2gtc2VsZWN0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHBvcC5oaWRlKClcblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEaXNhYmxlcyBsZXNzb24gYWRkIGJ1dHRvbnMgaWYgbm8gc2VjdGlvbnMgYXJlIGF2YWlsYWJsZSB0byBhZGQgYSBsZXNzb24gdG9cblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0bWF5YmVfZGlzYWJsZV9idXR0b25zOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyICRlbHMgPSAkKCAnI2xsbXMtbmV3LWxlc3NvbiwgI2xsbXMtZXhpc3RpbmctbGVzc29uJyApO1xuXG5cdFx0XHRpZiAoICEgdGhpcy5TaWRlYmFyVmlldy5Db3Vyc2VWaWV3Lm1vZGVsLmdldCggJ3NlY3Rpb25zJyApLmxlbmd0aCApIHtcblx0XHRcdFx0JGVscy5hdHRyKCAnZGlzYWJsZWQnLCAnZGlzYWJsZWQnICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkZWxzLnJlbW92ZUF0dHIoICdkaXNhYmxlZCcgKTtcblx0XHRcdH1cblxuXHRcdH0sXG5cblx0fSApO1xuXG59ICk7XG5cbi8qKlxuICogU2lkZWJhciBVdGlsaXRpZXMgVmlld1xuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTYuMFxuICovXG5kZWZpbmUoICdWaWV3cy9VdGlsaXRpZXMnLFtdLCBmdW5jdGlvbigpIHtcblxuXHRyZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoIHtcblxuXHRcdC8qKlxuXHRcdCAqIEhUTUwgZWxlbWVudCBzZWxlY3RvclxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdGVsOiAnI2xsbXMtdXRpbGl0aWVzJyxcblxuXHRcdGV2ZW50czoge1xuXHRcdFx0J2NsaWNrICNsbG1zLWNvbGxhcHNlLWFsbCc6ICdjb2xsYXBzZV9hbGwnLFxuXHRcdFx0J2NsaWNrICNsbG1zLWV4cGFuZC1hbGwnOiAnZXhwYW5kX2FsbCdcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV3JhcHBlciBUYWcgbmFtZVxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRhZ05hbWU6ICdkaXYnLFxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSB1bmRlcnNjb3JlIHRlbXBsYXRlXG5cdFx0ICogQHR5cGUgIHtbdHlwZV19XG5cdFx0ICovXG5cdFx0dGVtcGxhdGU6IHdwLnRlbXBsYXRlKCAnbGxtcy11dGlsaXRpZXMtdGVtcGxhdGUnICksXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXphdGlvbiBjYWxsYmFjayBmdW5jIChyZW5kZXJzIHRoZSBlbGVtZW50IG9uIHNjcmVlbilcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIHRoaXMucmVuZGVyKCk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ29tcGlsZXMgdGhlIHRlbXBsYXRlIGFuZCByZW5kZXJzIHRoZSB2aWV3XG5cdFx0ICogQHJldHVybiAgIHNlbGYgKGZvciBjaGFpbmluZylcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRlbC5odG1sKCB0aGlzLnRlbXBsYXRlKCkgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDb2xsYXBzZSBhbGwgc2VjdGlvbnNcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Y29sbGFwc2VfYWxsOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0QmFja2JvbmUucHViU3ViLnRyaWdnZXIoICdjb2xsYXBzZS1hbGwnICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEV4cGFuZCBhbGwgc2VjdGlvbnNcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0ZXhwYW5kX2FsbDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdEJhY2tib25lLnB1YlN1Yi50cmlnZ2VyKCAnZXhwYW5kLWFsbCcgKTtcblx0XHR9LFxuXG5cdH0gKTtcblxufSApO1xuXG4vKipcbiAqIE1haW4gc2lkZWJhciB2aWV3XG4gKiBAc2luY2UgICAgMy4xNi4wXG4gKiBAdmVyc2lvbiAgMy4xNi43XG4gKi9cbmRlZmluZSggJ1ZpZXdzL1NpZGViYXInLFtcblx0XHQnVmlld3MvRWRpdG9yJyxcblx0XHQnVmlld3MvRWxlbWVudHMnLFxuXHRcdCdWaWV3cy9VdGlsaXRpZXMnLFxuXHRcdCdWaWV3cy9fU3Vidmlldydcblx0XSwgZnVuY3Rpb24oXG5cdFx0RWRpdG9yLFxuXHRcdEVsZW1lbnRzLFxuXHRcdFV0aWxpdGllcyxcblx0XHRTdWJ2aWV3XG5cdCkge1xuXG5cdHJldHVybiBCYWNrYm9uZS5WaWV3LmV4dGVuZCggXy5kZWZhdWx0cygge1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBidWlsZGVyIHN0YXRlXG5cdFx0ICogQHR5cGUgIHtTdHJpbmd9XG5cdFx0ICovXG5cdFx0c3RhdGU6ICdidWlsZGVyJywgLy8gW2J1aWxkZXJ8ZWRpdG9yXVxuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBTdWJ2aWV3c1xuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHZpZXdzOiB7XG5cdFx0XHRlbGVtZW50czoge1xuXHRcdFx0XHRjbGFzczogRWxlbWVudHMsXG5cdFx0XHRcdGluc3RhbmNlOiBudWxsLFxuXHRcdFx0XHRzdGF0ZTogJ2J1aWxkZXInLFxuXHRcdFx0fSxcblx0XHRcdHV0aWxpdGllczoge1xuXHRcdFx0XHRjbGFzczogVXRpbGl0aWVzLFxuXHRcdFx0XHRpbnN0YW5jZTogbnVsbCxcblx0XHRcdFx0c3RhdGU6ICdidWlsZGVyJyxcblx0XHRcdH0sXG5cdFx0XHRlZGl0b3I6IHtcblx0XHRcdFx0Y2xhc3M6IEVkaXRvcixcblx0XHRcdFx0aW5zdGFuY2U6IG51bGwsXG5cdFx0XHRcdHN0YXRlOiAnZWRpdG9yJyxcblx0XHRcdH0sXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhUTUwgZWxlbWVudCBzZWxlY3RvclxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdGVsOiAnI2xsbXMtYnVpbGRlci1zaWRlYmFyJyxcblxuXHRcdC8qKlxuXHRcdCAqIERPTSBldmVudHNcblx0XHQgKiBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHRldmVudHM6IHtcblx0XHRcdCdjbGljayAjbGxtcy1zYXZlLWJ1dHRvbic6ICdzYXZlX25vdycsXG5cdFx0XHQnY2xpY2sgI2xsbXMtZXhpdC1idXR0b24nOiAnZXhpdF9ub3cnLFxuXHRcdFx0J2NsaWNrIC5sbG1zLWJ1aWxkZXItZXJyb3InOiAnY2xlYXJfZXJyb3JzJyxcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV3JhcHBlciBUYWcgbmFtZVxuXHRcdCAqIEB0eXBlICB7U3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRhZ05hbWU6ICdhc2lkZScsXG5cblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIHVuZGVyc2NvcmUgdGVtcGxhdGVcblx0XHQgKiBAdHlwZSAge1t0eXBlXX1cblx0XHQgKi9cblx0XHR0ZW1wbGF0ZTogd3AudGVtcGxhdGUoICdsbG1zLXNpZGViYXItdGVtcGxhdGUnICksXG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXphdGlvbiBjYWxsYmFjayBmdW5jIChyZW5kZXJzIHRoZSBlbGVtZW50IG9uIHNjcmVlbilcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdC8vIHNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIG1haW4gQ291cnNlIHZpZXdcblx0XHRcdHRoaXMuQ291cnNlVmlldyA9IGRhdGEuQ291cnNlVmlldztcblxuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblxuXHRcdFx0QmFja2JvbmUucHViU3ViLm9uKCAnY3VycmVudC1zYXZlLXN0YXR1cycsIHRoaXMuY2hhbmdlc19tYWRlLCB0aGlzICk7XG5cblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggJ2hlYXJ0YmVhdC1zZW5kJywgdGhpcy5oZWFydGJlYXRfc2VuZCwgdGhpcyApO1xuXHRcdFx0QmFja2JvbmUucHViU3ViLm9uKCAnaGVhcnRiZWF0LXRpY2snLCB0aGlzLmhlYXJ0YmVhdF90aWNrLCB0aGlzICk7XG5cblx0XHRcdEJhY2tib25lLnB1YlN1Yi5vbiggJ2xlc3Nvbi1zZWxlY3RlZCcsIHRoaXMub25fbGVzc29uX3NlbGVjdCwgdGhpcyApO1xuXHRcdFx0QmFja2JvbmUucHViU3ViLm9uKCAnc2lkZWJhci1lZGl0b3ItY2xvc2UnLCB0aGlzLm9uX2VkaXRvcl9jbG9zZSwgdGhpcyApO1xuXG5cdFx0XHR0aGlzLiRzYXZlQnV0dG9uID0gJCggJyNsbG1zLXNhdmUtYnV0dG9uJyApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENvbXBpbGVzIHRoZSB0ZW1wbGF0ZSBhbmQgcmVuZGVycyB0aGUgdmlld1xuXHRcdCAqIEByZXR1cm4gICBzZWxmIChmb3IgY2hhaW5pbmcpXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKCB2aWV3X2RhdGEgKSB7XG5cblx0XHRcdHZpZXdfZGF0YSA9IHZpZXdfZGF0YSB8fCB7fTtcblxuXHRcdFx0dGhpcy4kZWwuaHRtbCggdGhpcy50ZW1wbGF0ZSgpICk7XG5cblx0XHRcdHRoaXMucmVuZGVyX3N1YnZpZXdzKCBfLmV4dGVuZCggdmlld19kYXRhLCB7XG5cdFx0XHRcdFNpZGViYXJWaWV3OiB0aGlzLFxuXHRcdFx0fSApICk7XG5cblx0XHRcdHZhciAkZWwgPSAkKCAnLndyYXAubGlmdGVybG1zLmxsbXMtYnVpbGRlcicgKTtcblx0XHRcdGlmICggJ2J1aWxkZXInID09PSB0aGlzLnN0YXRlICkge1xuXHRcdFx0XHQkZWwucmVtb3ZlQ2xhc3MoICdlZGl0b3ItYWN0aXZlJyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JGVsLmFkZENsYXNzKCAnZWRpdG9yLWFjdGl2ZScgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy4kc2F2ZUJ1dHRvbiA9IHRoaXMuJGVsLmZpbmQoICcjbGxtcy1zYXZlLWJ1dHRvbicgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQWRkcyBlcnJvciBtZXNzYWdlIGVsZW1lbnRcblx0XHQgKiBAcGFyYW0gICAge1t0eXBlXX0gICAkZXJyICBbZGVzY3JpcHRpb25dXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRhZGRfZXJyb3I6IGZ1bmN0aW9uKCAkZXJyICkge1xuXG5cdFx0XHR0aGlzLiRlbC5maW5kKCAnLmxsbXMtYnVpbGRlci1zYXZlJyApLnByZXBlbmQoICRlcnIgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDbGVhciBhbnkgZXhpc3RpbmcgZXJyb3IgbWVzc2FnZSBlbGVtZW50c1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRjbGVhcl9lcnJvcnM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLiRlbC5maW5kKCAnLmxsbXMtYnVpbGRlci1zYXZlIC5sbG1zLWJ1aWxkZXItZXJyb3InICkucmVtb3ZlKCk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlIHNhdmUgc3RhdHVzIGJ1dHRvbiB3aGVuIGNoYW5nZXMgYXJlIGRldGVjdGVkXG5cdFx0ICogcnVucyBvbiBhbiBpbnRlcnZhbCB0byBjaGVjayBzdGF0dXMgb2YgY291cnNlIHJlZ3VsYXJseSBmb3IgdW5zYXZlZCBjaGFuZ2VzXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIHN5bmMgIGluc3RhbmNlIG9mIHRoZSBzeW5jIGNvbnRyb2xsZXJcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Y2hhbmdlc19tYWRlOiBmdW5jdGlvbiggc3luYyApIHtcblxuXHRcdFx0Ly8gaWYgYSBzYXZlIGlzIGN1cnJlbnRseSBydW5uaW5nLCBkb24ndCBkbyBhbnl0aGluZ1xuXHRcdFx0aWYgKCBzeW5jLnNhdmluZyApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHN5bmMuaGFzX3Vuc2F2ZWRfY2hhbmdlcyApIHtcblxuXHRcdFx0XHR0aGlzLiRzYXZlQnV0dG9uLmF0dHIoICdkYXRhLXN0YXR1cycsICd1bnNhdmVkJyApO1xuXHRcdFx0XHR0aGlzLiRzYXZlQnV0dG9uLnJlbW92ZUF0dHIoICdkaXNhYmxlZCcgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLiRzYXZlQnV0dG9uLmF0dHIoICdkYXRhLXN0YXR1cycsICdzYXZlZCcgKTtcblx0XHRcdFx0dGhpcy4kc2F2ZUJ1dHRvbi5hdHRyKCAnZGlzYWJsZWQnLCAnZGlzYWJsZWQnICk7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBFeGl0IHRoZSBidWlsZGVyIGFuZCByZXR1cm4gdG8gdGhlIFdQIENvdXJzZSBFZGl0b3Jcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2Ljdcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi43XG5cdFx0ICovXG5cdFx0ZXhpdF9ub3c6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHdpbmRvdy5sbG1zX2J1aWxkZXIuQ291cnNlTW9kZWwuZ2V0X2VkaXRfcG9zdF9saW5rKCk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIHdoZW4gYSBoZWFydGJlYXQgc2VuZCBldmVudCBzdGFydHMgY29udGFpbmluZyBidWlsZGVyIGluZm9ybWF0aW9uXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIHN5bmMgIGluc3RhbmNlIG9mIHRoZSBzeW5jIGNvbnRyb2xsZXJcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0aGVhcnRiZWF0X3NlbmQ6IGZ1bmN0aW9uKCBzeW5jICkge1xuXG5cdFx0XHRpZiAoIHN5bmMuc2F2aW5nICkge1xuXHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RhcnQoIHRoaXMuJHNhdmVCdXR0b24uZmluZCggJ2knICksICdzbWFsbCcgKTtcblx0XHRcdFx0dGhpcy4kc2F2ZUJ1dHRvbi5hdHRyKCB7XG5cdFx0XHRcdFx0J2RhdGEtc3RhdHVzJzogJ3NhdmluZycsXG5cdFx0XHRcdFx0ZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBUcmlnZ2VyZWQgd2hlbiBhIGhlYXJ0YmVhdCB0aWNrIGNvbXBsZXRlcyBhbmQgdXBkYXRlcyBzYXZlIHN0YXR1cyBvciBhcHBlbmRzIGVycm9yc1xuXHRcdCAqIEBwYXJhbSAgICBvYmogICBzeW5jICBpbnN0YW5jZSBvZiB0aGUgc3luYyBjb250cm9sbGVyXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGRhdGEgIHVwZGF0ZWQgZGF0YVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRoZWFydGJlYXRfdGljazogZnVuY3Rpb24oIHN5bmMsIGRhdGEgKSB7XG5cblx0XHRcdGlmICggISBzeW5jLnNhdmluZyApIHtcblxuXHRcdFx0XHR2YXIgc3RhdHVzID0gJ3NhdmVkJztcblxuXHRcdFx0XHR0aGlzLmNsZWFyX2Vycm9ycygpO1xuXG5cdFx0XHRcdGlmICggJ2Vycm9yJyA9PT0gZGF0YS5zdGF0dXMgKSB7XG5cblx0XHRcdFx0XHRzdGF0dXMgPSAnZXJyb3InO1xuXG5cdFx0XHRcdFx0dmFyIG1zZyA9IGRhdGEubWVzc2FnZSxcblx0XHRcdFx0XHRcdCRlcnIgPSAkKCAnPG9sIGNsYXNzPVwibGxtcy1idWlsZGVyLWVycm9yXCIgLz4nICk7XG5cblx0XHRcdFx0XHRpZiAoICdvYmplY3QnID09PSB0eXBlb2YgbXNnICkge1xuXHRcdFx0XHRcdFx0Xy5lYWNoKCBtc2csIGZ1bmN0aW9uKCB0eHQgKSB7XG5cdFx0XHRcdFx0XHRcdCRlcnIuYXBwZW5kKCAnPGxpPicgKyB0eHQgKyAnPC9saT4nICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdCRlcnIgPSAkZXJyLmFwcGVuZCggJzxsaT4nICsgbXNnICsgJzwvbGk+JyApOztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmFkZF9lcnJvciggJGVyciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLiRzYXZlQnV0dG9uLmZpbmQoICcubGxtcy1zcGlubmluZycgKS5yZW1vdmUoKTtcblx0XHRcdFx0dGhpcy4kc2F2ZUJ1dHRvbi5hdHRyKCB7XG5cdFx0XHRcdFx0J2RhdGEtc3RhdHVzJzogc3RhdHVzLFxuXHRcdFx0XHRcdGRpc2FibGVkOiAnZGlzYWJsZWQnLFxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmUgaWYgdGhlIGVkaXRvciBpcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBzdGF0ZVxuXHRcdCAqIEByZXR1cm4gICBib29sZWFuXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRpc19lZGl0b3JfYWN0aXZlOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0cmV0dXJuICggJ2VkaXRvcicgPT09IHRoaXMuc3RhdGUgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgZWRpdG9yIGNsb3NlcywgdXBkYXRlcyBzdGF0ZSB0byBiZSB0aGUgY291cnNlIGJ1aWxkZXIgdmlld1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRvbl9lZGl0b3JfY2xvc2U6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR0aGlzLnNldF9zdGF0ZSggJ2J1aWxkZXInICkucmVuZGVyKCk7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBhIGxlc3NvbiBpcyBzZWxlY3RlZCwgb3BlbnMgdGhlIHNpZGViYXIgdG8gdGhlIGVkaXRvciB2aWV3XG5cdFx0ICogQHBhcmFtICAgIG9iaiAgIGxlc3Nvbl9tb2RlbCAgaW5zdGFuY2Ugb2YgdGhlIGxlc3NvbiBtb2RlbCB3aGljaCB3YXMgc2VsZWN0ZWRcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0b25fbGVzc29uX3NlbGVjdDogZnVuY3Rpb24oIGxlc3Nvbl9tb2RlbCwgdGFiICkge1xuXG5cdFx0XHRpZiAoICdlZGl0b3InICE9PSB0aGlzLnN0YXRlICkge1xuXHRcdFx0XHR0aGlzLnNldF9zdGF0ZSggJ2VkaXRvcicgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlX3N1YnZpZXcoICdlZGl0b3InICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVuZGVyKCB7XG5cdFx0XHRcdG1vZGVsOiBsZXNzb25fbW9kZWwsXG5cdFx0XHRcdHRhYjogdGFiLFxuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNhdmUgYnV0dG9uIGNsaWNrIGV2ZW50XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHNhdmVfbm93OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0d2luZG93LmxsbXNfYnVpbGRlci5zeW5jLnNhdmVfbm93KCk7XG5cblx0XHR9LFxuXG5cdH0sIFN1YnZpZXcgKSApO1xuXG59ICk7XG5cbi8qKlxuICogTGlmdGVyTE1TIEpTIEJ1aWxkZXIgQXBwIEJvb3RzdHJhcFxuICogQHNpbmNlICAgIDMuMTYuMFxuICogQHZlcnNpb24gIDMuMTcuOFxuICovXG5yZXF1aXJlKCBbXG5cdCd2ZW5kb3IvYmFja2JvbmUuY29sbGVjdGlvblZpZXcnLFxuXHQndmVuZG9yL2JhY2tib25lLnRyYWNraXQnLFxuXHQnQ29udHJvbGxlcnMvQ29uc3RydWN0Jyxcblx0J0NvbnRyb2xsZXJzL0RlYnVnJyxcblx0J0NvbnRyb2xsZXJzL1NjaGVtYXMnLFxuXHQnQ29udHJvbGxlcnMvU3luYycsXG5cdCdNb2RlbHMvbG9hZGVyJyxcblx0J1ZpZXdzL0NvdXJzZScsXG5cdCdWaWV3cy9TaWRlYmFyJ1xuXSwgZnVuY3Rpb24oXG5cdENWLFxuXHRUcmFja0l0LFxuXHRDb25zdHJ1Y3QsXG5cdERlYnVnLFxuXHRTY2hlbWFzLFxuXHRTeW5jLFxuXHRNb2RlbHMsXG5cdENvdXJzZVZpZXcsXG5cdFNpZGViYXJWaWV3XG4pIHtcblxuXHR3aW5kb3cubGxtc19idWlsZGVyLmRlYnVnID0gbmV3IERlYnVnKCB3aW5kb3cubGxtc19idWlsZGVyLmRlYnVnICk7XG5cdHdpbmRvdy5sbG1zX2J1aWxkZXIuY29uc3RydWN0ID0gbmV3IENvbnN0cnVjdCgpO1xuXHR3aW5kb3cubGxtc19idWlsZGVyLnNjaGVtYXMgPSBuZXcgU2NoZW1hcyggd2luZG93LmxsbXNfYnVpbGRlci5zY2hlbWFzICk7XG5cblx0LyoqXG5cdCAqIENvbXBhcmUgdmFsdWVzLCB1c2VkIGJ5IF8uY2hlY2tlZCAmIF8uc2VsZWN0ZWQgbWl4aW5zXG5cdCAqIEBwYXJhbSAgICBtaXhlZCAgIGV4cGVjdGVkICBleHBlY3RlZCB2YWx1ZSwgcHJvYmFibHkgYSBzdHJpbmcgKHRoZSB2YWx1ZSBvZiBhIHNlbGVjdCBvcHRpb24gb3IgY2hlY2tib3ggZWxlbWVudClcblx0ICogQHBhcmFtICAgIG1peGVkICAgYWN0dWFsICAgIGFjdHVhbCB2YWx1ZSwgcHJvYmFibHkgYSBzdHJpbmcgKHRoZSByZXR1cm4gb2YgbW9kZWwuZ2V0KCAnc29tZXRoaW5nJyApIClcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0IGJ1dCBjb3VsZCBiZSBhbiBhcnJheSBsaWtlIGEgbXVsdGlzZWxlY3Rcblx0ICogQHJldHVybiAgIGJvb2xlYW5cblx0ICogQHNpbmNlICAgIDMuMTcuMlxuXHQgKiBAdmVyc2lvbiAgMy4xNy4yXG5cdCAqL1xuXHRmdW5jdGlvbiB2YWx1ZV9jb21wYXJlKCBleHBlY3RlZCwgYWN0dWFsICkge1xuXHRcdHJldHVybiAoICggXy5pc0FycmF5KCBhY3R1YWwgKSAmJiAtMSAhPT0gYWN0dWFsLmluZGV4T2YoIGV4cGVjdGVkICkgKSB8fCBleHBlY3RlZCA9PSBhY3R1YWwgKTtcblx0fTtcblxuXHQvKipcblx0ICogVW5kZXJzY29yZXMgdGVtcGxhdGluZyB1dGlsaXRpZXNcblx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHQgKiBAdmVyc2lvbiAgMy4xNy44XG5cdCAqL1xuXHRfLm1peGluKCB7XG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmUgaWYgdHdvIHZhbHVlcyBhcmUgZXF1YWwgYW5kIG91dHB1dCBjaGVja2VkIGF0dHJpYnV0ZSBpZiB0aGV5IGFyZVxuXHRcdCAqIFVzZWZ1bCBmb3IgdGVtcGxhdGluZyBjaGVja2JveGVzICYgcmFkaW8gZWxlbWVudHNcblx0XHQgKiBMaWtlIFdQIENvcmUgUEhQIGNoZWNrZWQoKSBidXQgaW4gSlNcblx0XHQgKiBAcGFyYW0gICAgbWl4ZWQgICBleHBlY3RlZCAgZXhwZWN0ZWQgZWxlbWVudCB2YWx1ZVxuXHRcdCAqIEBwYXJhbSAgICBtaXhlZCAgIGFjdHVhbCAgICBhY3R1YWwgZWxlbWVudCB2YWx1ZVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjJcblx0XHQgKi9cblx0XHRjaGVja2VkOiBmdW5jdGlvbiggZXhwZWN0ZWQsIGFjdHVhbCApIHtcblx0XHRcdGlmICggdmFsdWVfY29tcGFyZSggZXhwZWN0ZWQsIGFjdHVhbCApICkge1xuXHRcdFx0XHRyZXR1cm4gJyBjaGVja2VkPVwiY2hlY2tlZFwiJztcblx0XHRcdH1cblx0XHRcdHJldHVybiAnJztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVjdXJzaXZlbHkgY2xvbmUgYW4gb2JqZWN0IHZpYSBfLmNsb25lKClcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgb2JqICBvYmplY3QgdG8gY2xvbmVcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuN1xuXHRcdCAqIEB2ZXJzaW9uICAzLjE3Ljdcblx0XHQgKi9cblx0XHRkZWVwQ2xvbmU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHRcdHZhciBjbG9uZSA9IF8uY2xvbmUoIG9iaiApO1xuXG5cdFx0XHRfLmVhY2goIGNsb25lLCBmdW5jdGlvbiggdmFsLCBrZXkgKSB7XG5cdFx0XHRcdGlmICggISBfLmlzRnVuY3Rpb24oIHZhbCApICYmIF8uaXNPYmplY3QoIHZhbCApICkge1xuXHRcdFx0XHRcdGNsb25lWyBrZXkgXSA9IF8uZGVlcENsb25lKCB2YWwgKTtcblx0XHRcdFx0fTtcblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuIGNsb25lO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERldGVybWluZSBpZiB0d28gdmFsdWVzIGFyZSBlcXVhbCBhbmQgb3V0cHV0IHNlbGV0ZWQgYXR0cmlidXRlIGlmIHRoZXkgYXJlXG5cdFx0ICogVXNlZnVsIGZvciB0ZW1wbGF0aW5nIHNlbGVjdCBlbGVtZW50c1xuXHRcdCAqIExpa2UgV1AgQ29yZSBQSFAgc2VsZWN0ZWQoKSBidXQgaW4gSlNcblx0XHQgKiBAcGFyYW0gICAgbWl4ZWQgICBleHBlY3RlZCAgZXhwZWN0ZWQgZWxlbWVudCB2YWx1ZVxuXHRcdCAqIEBwYXJhbSAgICBtaXhlZCAgIGFjdHVhbCAgICBhY3R1YWwgZWxlbWVudCB2YWx1ZVxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjJcblx0XHQgKi9cblx0XHRzZWxlY3RlZDogZnVuY3Rpb24oIGV4cGVjdGVkLCBhY3R1YWwgKSB7XG5cdFx0XHRpZiAoIHZhbHVlX2NvbXBhcmUoIGV4cGVjdGVkLCBhY3R1YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuICcgc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJztcblx0XHRcdH1cblx0XHRcdHJldHVybiAnJztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogR2VuZXJpYyBmdW5jdGlvbiBmb3Igc3RyaXBwaW5nIEhUTUwgdGFncyBmcm9tIGEgc3RyaW5nXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIGNvbnRlbnQgICAgICAgcmF3IHN0cmluZ1xuXHRcdCAqIEBwYXJhbSAgICBhcnJheSAgIGFsbG93ZWRfdGFncyAgYXJyYXkgb2YgYWxsb3dlZCBIVE1MIHRhZ3Ncblx0XHQgKiBAcmV0dXJuICAgc3RyaW5nXG5cdFx0ICogQHNpbmNlICAgIDMuMTcuOFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3Ljhcblx0XHQgKi9cblx0XHRzdHJpcEZvcm1hdHRpbmc6IGZ1bmN0aW9uKCBjb250ZW50LCBhbGxvd2VkX3RhZ3MgKSB7XG5cblx0XHRcdGlmICggISBhbGxvd2VkX3RhZ3MgKSB7XG5cdFx0XHRcdGFsbG93ZWRfdGFncyA9IFsgJ2InLCAnaScsICd1JywgJ3N0cm9uZycsICdlbScgXTtcblx0XHRcdH1cblxuXHRcdFx0dmFyICRodG1sID0gJCggJzxkaXY+JyArIGNvbnRlbnQgKyAnPC9kaXY+JyApO1xuXG5cdFx0XHQkaHRtbC5maW5kKCAnKicgKS5ub3QoIGFsbG93ZWRfdGFncy5qb2luKCAnLCcgKSApLmVhY2goIGZ1bmN0aW9uKCApIHtcblxuXHRcdFx0XHQkKCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuaW5uZXJIVE1MICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuICRodG1sLmh0bWwoKTtcblxuXHRcdH0sXG5cblx0fSApO1xuXG5cdEJhY2tib25lLnB1YlN1YiA9IF8uZXh0ZW5kKCB7fSwgQmFja2JvbmUuRXZlbnRzICk7XG5cblx0JCggZG9jdW1lbnQgKS50cmlnZ2VyKCAnbGxtcy1idWlsZGVyLXByZS1pbml0JyApO1xuXG5cdHdpbmRvdy5sbG1zX2J1aWxkZXIucXVlc3Rpb25zID0gd2luZG93LmxsbXNfYnVpbGRlci5jb25zdHJ1Y3QuZ2V0X2NvbGxlY3Rpb24oICdRdWVzdGlvblR5cGVzJywgd2luZG93LmxsbXNfYnVpbGRlci5xdWVzdGlvbnMgKTtcblxuXHR2YXIgQ291cnNlTW9kZWwgPSB3aW5kb3cubGxtc19idWlsZGVyLmNvbnN0cnVjdC5nZXRfbW9kZWwoICdDb3Vyc2UnLCB3aW5kb3cubGxtc19idWlsZGVyLmNvdXJzZSApO1xuXHR3aW5kb3cubGxtc19idWlsZGVyLkNvdXJzZU1vZGVsID0gQ291cnNlTW9kZWw7XG5cblx0d2luZG93LmxsbXNfYnVpbGRlci5zeW5jID0gbmV3IFN5bmMoIENvdXJzZU1vZGVsLCB3aW5kb3cubGxtc19idWlsZGVyLnN5bmMgKTtcblxuXHR2YXIgQ291cnNlID0gbmV3IENvdXJzZVZpZXcoIHtcblx0XHRtb2RlbDogQ291cnNlTW9kZWwsXG5cdH0gKTtcblxuXHR2YXIgU2lkZWJhciA9IG5ldyBTaWRlYmFyVmlldygge1xuXHRcdENvdXJzZVZpZXc6IENvdXJzZVxuXHR9ICk7XG5cblx0JCggZG9jdW1lbnQgKS50cmlnZ2VyKCAnbGxtcy1idWlsZGVyLWluaXQnLCB7XG5cdFx0Y291cnNlOiBDb3Vyc2UsXG5cdFx0c2lkZWJhcjogU2lkZWJhcixcblx0fSApO1xuXG59ICk7XG5cbmRlZmluZShcIm1haW5cIiwgZnVuY3Rpb24oKXt9KTtcblxufShqUXVlcnkpKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGxtcy1idWlsZGVyLmpzLm1hcFxuIl19
